Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 1
dis.ASM



      1					     ;;	Programa reaguoja i perduodamus	parametrus
      2				     ;;	isveda pagalba,	jei nera nurodyti reikiami parametrai
      3				     ;;	source failas skaitomas	dalimis
      4				     ;;	destination failas rasomas dalimis
      5				     ;;	jei destination	failas jau egzistuoja, jis yra isvalomas
      6				     ;;	jei source failas nenurodytas -	skaito iš stdin iki tuščios naujos eilutės
      7				     ;;	galima nurodyti	daugiau	nei vieną source failą - juos	sujungia
      8
      9				     ;skaitomos	komandos
     10				     ;div	1111 011w mod 110 r/m [poslinkis]
     11				     ;idiv    1111 011w	mod 111	r/m [poslinkis]
     12				     ;in      1110 110w	arba 1110 010w portas (vieno baito dydzio betarpiskas operandas)
     13				     ;iret	1100 1111
     14				     ;int	1100 1100 (INT 3) 11001101 kodas (visi kiti int	kur kodas-1 baitas)
     15				     ;les     1100 0100	mod reg	r/m [poslinkis]	 reg-<atm
     16				     ;xchg	1001 0000 (NOP/XCHG ax,ax) 1001	0xxx (x-registras, kai is x i ax)
     17				     ;xchg	1000 011w mod reg r/m [poslinkis] – XCHG registras  registras/atmintis
     18				     ;test	1000 010w mod reg r/m [poslinkis]
     19
     20	0000			     .model small
     21	0000			     .stack 100H
     22
     23	0000			     .data
     24
     25				     ;pranesimai
     26	0000  6D 69 6E 69 20 64	69+  apie		     db	'mini disasembleris'
     27	      73 61 73 65 6D 62	6C+
     28	      65 72 69 73
     29	0012  44 65 73 74 69 6E	61+  err_d		     db	'Destination failo nepavyko atidaryti rasymui',13,10,'$'
     30	      74 69 6F 6E 20 66	61+
     31	      69 6C 6F 20 6E 65	70+
     32	      61 76 79 6B 6F 20	61+
     33	      74 69 64 61 72 79	74+
     34	      69 20 72 61 73 79	6D+
     35	      75 69 0D 0A 24
     36	0041  53 6F 75 72 63 65	20+  err_s		     db	'Source	failo nepavyko atidaryti skaitymui',13,10,'$'
     37	      66 61 69 6C 6F 20	6E+
     38	      65 70 61 76 79 6B	6F+
     39	      20 61 74 69 64 61	72+
     40	      79 74 69 20 73 6B	61+
     41	      69 74 79 6D 75 69	0D+
     42	      0A 24
     43
     44				     ;skaitomos	eilutes	numerio	formavimas
     45	006D  0000		     lineCount	     dw	0   ;desinys  baitas eiles nr skaiciaus
     46	006F  0001		     lineCountH	     dw	1   ;kairys  baitas eiles nr skaiciaus
     47
     48				     ;hex skaiciaus spausdinimas
     49	0071  30 31 32 33 34 35	36+  HEX_Map   DB  '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
     50	      37 38 39 41 42 43	44+
     51	      45 46
     52	0081  30 30 0D 0A 24	     HEX_Out   DB  "00", 13, 10, '$'   ; string	with line feed and '$'-terminator
     53	0086  3A 20 20 24	     lineStringAdd db ':  ', '$'
     54	008A  20 24		     hexBuffer db ' ', '$'
     55
     56
     57				     ;formatavimas
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 2
dis.ASM



     58	008C  09 09 24		     line_doubleTab db 9, 9, '$'
     59	008F  68 0D 0A 24	     line_hNewLine db 'h',13,10, '$'
     60	0093  0D 0A 24		     line_NewLine db 13,10,'$'
     61	0096  2C 20 24		     line_OperandSeparator db ',', ' ',	'$'
     62				     ;neatpazinta komanda
     63	0099  09 09 4E 65 61 74	70+  line_unkn db 9, 9,	'Neatpazinta komanda',13,10, '$'
     64	      61 7A 69 6E 74 61	20+
     65	      6B 6F 6D 61 6E 64	61+
     66	      0D 0A 24
     67
     68				     ;komandos-------------------------------
     69
     70	00B1  09 69 6E 09 24	     line_in db	9,'in',9,'$'
     71										     ;offset
     72	00B6  44 49 56 20	     com_names	     db	     'DIV '  ;0
     73	00BA  49 44 49 56 20				     db	     'IDIV ' ;4
     74	00BF  49 4E 24					     db	     'IN$'   ;9
     75	00C2  49 52 45 54 24				     db	     'IRET$' ;12
     76	00C7  49 4E 54 24				     db	     'INT$'  ;17
     77	00CB  4C 45 53 20				     db	     'LES '  ;21
     78	00CF  58 43 48 47 20				     db	     'XCHG ' ;26
     79	00D4  54 45 53 54 20				     db	     'TEST ' ;31
     80				     ;---------------------------------------
     81
     82				     ;registrai------------------------------
     83									     ;offset
     84	00D9  61 6C 24		     mod11w0reg	     db	'al$';0
     85	00DC  63 6C 24					     db	'cl$';3
     86	00DF  64 6C 24					     db	'dl$';6
     87	00E2  62 6C 24					     db	'bl$';9
     88	00E5  61 68 24					     db	'ah$';12
     89	00E8  63 68 24					     db	'ch$';15
     90	00EB  64 68 24					     db	'dh$';18
     91	00EE  62 68 24					     db	'bh$';21
     92	00F1  61 78 24		     mod11w1reg	     db	'ax$';0
     93	00F4  63 78 24					     db	'cx$';3
     94	00F7  64 78 24					     db	'dx$';6
     95	00FA  62 78 24					     db	'bx$';9
     96	00FD  73 70 24					     db	'sp$';12
     97	0100  62 70 24					     db	'bp$';15
     98	0103  73 69 24					     db	'si$';18
     99	0106  64 69 24					     db	'di$';21
    100	0109  2C 20 24					     db	', $';24
    101	010C  5B 62 78 2B 73 69	24   EAdress	     db	'[bx+si$' ;0
    102	0113  5B 62 78 2B 64 69	24			     db	'[bx+di$' ;7
    103	011A  5B 62 70 2B 73 69	24			     db	'[bp+si$' ;14
    104	0121  5B 62 70 2B 64 69	24			     db	'[bp+di$' ;21
    105	0128  5B 73 69 20 20 20	24			     db	'[si   $' ;28
    106	012F  5B 64 69 20 20 20	24			     db	'[di   $' ;35
    107	0136  5B 62 70 20 20 20	24			     db	'[bp   $' ;42
    108	013D  5B 62 78 20 20 20	24			     db	'[bx   $' ;49
    109
    110	0144  5B		     format db '[' ;0
    111	0145  5D			    db ']' ;1
    112	0146  2B					      db '+' ;2
    113				     ;---------------------------------------
    114
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 3
dis.ASM



    115
    116
    117
    118	0147  74 65 73 74 2E 65	78+  sourceF	     db	'test.exe'
    119	      65
    120	014F  ????		     sourceFHandle   dw	?
    121
    122	0151  61 73 6D 2E 61 73	6D   destF	     db	'asm.asm'
    123	0158  ????		     destFHandle     dw	?
    124
    125	015A  64*(??)		     buffer    db 100 dup (?)
    126	01BE  64*(??)		     regBuffer db 100 dup (?)
    127	0222  00		     regBufferCount db 0
    128
    129				     ; poslinkio bitai
    130	0223  00		     dLow    db	0
    131	0224  00		     dHigh db 0
    132
    133	0225  61 62 63		     temp db 'abc'
    134	0228  00		     wFlag db 0
    135
    136	0229			     .code
    137
    138	0000			     START:
    139	0000  B8 0000s		     mov     ax, @data
    140	0003  8E C0		     mov     es, ax		     ; es kad galetume naudot stosb funkcija: Store AL at address   +
    141				     ES:(E)DI
    142
    143	0005  BF 0151r		     lea     di, destF
    144	0008  BF 0147r		     lea     di, sourceF
    145
    146	000B  1E		     push    ds
    147	000C  56		     push    si
    148
    149	000D  B8 0000s		     mov     ax, @data
    150	0010  8E D8		     mov     ds, ax
    151
    152				     ;;	rasymui
    153	0012  BA 0151r		     mov     dx, offset	destF	     ; ikelti i	dx destF - failo pavadinima
    154	0015  B4 3C		     mov     ah, 3ch		     ; isvalo/sukuria faila - komandos kodas
    155	0017  B9 0000		     mov     cx, 0		     ; normal -	no attributes
    156	001A  CD 21		     int     21h		     ; INT 21h / AH= 3Ch - create or truncate file.
    157
    158
    159	001C  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    160	001E  B0 01		     mov     al, 1		     ; rasymui
    161	0020  CD 21		     int     21h		     ; INT 21h / AH= 3Dh - open	existing file.
    162
    163	0022  A3 0158r		     mov     destFHandle, ax	     ; issaugom	handle
    164
    165	0025  EB 01 90		     jmp     startConverting
    166
    167
    168	0028			     startConverting:
    169	0028  BA 0147r		     mov     dx, offset	sourceF	     ; failo pavadinimas
    170	002B  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    171	002D  B0 00		     mov     al, 0		     ; 0 - reading, 1-writing, 2-abu
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 4
dis.ASM



    172	002F  CD 21		     int     21h				 ; INT 21h / AH= 3Dh - open existing file
    173	0031  73 03		     jnc     not_err_source		   ; CF	set on error AX	= error	code.
    174	0033  E9 00D4		     jmp err_source
    175	0036			     not_err_source:
    176	0036  A3 014Fr		     mov     sourceFHandle, ax	       ; issaugojam filehandle
    177
    178	0039			     skaitom:
    179
    180	0039  E8 01BA		     call readToBuff
    181
    182	003C  75 0B		     jne     _6			     ; tai ne pabaiga
    183
    184	003E  8B 1E 014Fr	     mov     bx, sourceFHandle	     ; pabaiga skaitomo	failo
    185	0042  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    186	0044  CD 21		     int     21h
    187	0046  E9 00B4		     jmp closeF
    188
    189	0049			     _6:
    190	0049  BE 015Ar		     mov     si, offset	buffer	     ; skaitoma	is cia
    191	004C  8B 1E 0158r	     mov     bx, destFHandle	     ; rasoma i	cia
    192
    193				     ; cia prasideda pagrindine	logika (apdoroja kiekviena baita)
    194	0050			     atrenka:
    195	0050  AC		     lodsb			     ; Load byte at address DS:(E)SI into AL
    196
    197
    198	0051  BF 01BEr		     lea di, regBuffer
    199	0054  E8 0127		     call printLineNumber
    200
    201				     ;in portas****************************
    202	0057  8A D8		     mov bl, al
    203	0059  80 E3 FE		     and bl, 11111110b
    204	005C  80 FB E4		     cmp bl, 11100100b
    205	005F  75 06		     jne not_in2
    206	0061  E8 01C3		     call com_in2
    207	0064  EB 79 90		     jmp com_recognized
    208	0067			     not_in2:
    209
    210				     ;in be porto**************************
    211	0067  8A D8		     mov bl, al
    212	0069  80 FB EC		     cmp bl, 11101100b
    213	006C  75 06		     jne not_in
    214	006E  E8 0274		     call com_in
    215	0071  EB 6C 90		     jmp com_recognized
    216	0074			     not_in:
    217
    218				     ;XCHG********************************
    219	0074  8A D8		     mov bl, al
    220	0076  80 E3 F8		     and bl, 11111000b
    221	0079  80 FB 90		     cmp bl, 10010000b
    222	007C  75 06		     jne not_xchg
    223	007E  E8 02B7		     call com_xchg
    224	0081  EB 5C 90		     jmp com_recognized
    225	0084			     not_xchg:
    226
    227				     ;IRET********************************
    228	0084  3C CF		     cmp al, 11001111b
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 5
dis.ASM



    229	0086  75 06		     jne not_iret
    230	0088  E8 0218		     call com_iret
    231	008B  EB 52 90		     jmp com_recognized
    232	008E			     not_iret:
    233
    234				     ;INT su kodu************************
    235	008E  3C CD		     cmp al, 11001101b
    236	0090  75 06		     jne not_int2
    237	0092  E8 01D9		     call com_int2
    238	0095  EB 48 90		     jmp com_recognized
    239	0098			     not_int2:
    240
    241				     ; INT 3*****************************
    242	0098  3C CC		     cmp al, 11001100b
    243	009A  75 06		     jne not_int
    244	009C  E8 0221		     call com_int
    245	009F  EB 3E 90		     jmp com_recognized
    246	00A2			     not_int:
    247
    248				     ; LES*******************************
    249	00A2  3C C4		     cmp al, 11000100b
    250	00A4  75 06		     jne not_les
    251	00A6  E8 03E3		     call com_les
    252				     ;jmp not_les
    253	00A9  EB 34 90		     jmp com_recognized
    254	00AC			     not_les:
    255
    256	00AC  8A D8		     mov bl, al
    257	00AE  80 E3 FE		     and bl, 11111110b
    258	00B1  80 FB F6		     cmp bl, 11110110b
    259	00B4  75 06		     jne not_div
    260	00B6  E8 032C		     call com_div
    261	00B9  EB 24 90		     jmp com_recognized
    262	00BC			     not_div:
    263
    264	00BC  8A D8		     mov bl, al
    265	00BE  80 E3 FE		     and bl, 11111110b
    266	00C1  80 FB 84		     cmp bl, 10000100b
    267	00C4  75 06		     jne not_test1
    268	00C6  E8 02DF		     call com_test1
    269	00C9  EB 14 90		     jmp com_recognized
    270	00CC			     not_test1:
    271
    272	00CC  8A D8		     mov bl, al
    273	00CE  80 E3 FE		     and bl, 11111110b
    274	00D1  80 FB 86		     cmp bl, 10000110b
    275	00D4  75 06		     jne not_xchg2
    276	00D6  E8 0828		     call com_xchg2
    277	00D9  EB 04 90		     jmp com_recognized
    278	00DC			     not_xchg2:
    279
    280
    281				     ; Nezinoma	komanda******************
    282	00DC  E8 00FF		     call com_unk
    283
    284	00DF			     com_recognized:
    285
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 6
dis.ASM



    286	00DF			     inc_lineCount:
    287	00DF  E8 00E1		     call incLineNumber
    288
    289
    290	00E2  49		     dec cx
    291	00E3  83 F9 00		     cmp cx, 0
    292	00E6  74 03		     je	baigemLoop
    293	00E8  E9 FF65		     jmp     atrenka
    294
    295	00EB			     baigemLoop:
    296
    297	00EB  E9 FF4B		     jmp skaitom
    298
    299
    300
    301
    302				     ;----------------------------------
    303	00EE			     help:
    304	00EE  B8 0000s		     mov     ax, @data
    305	00F1  8E D8		     mov     ds, ax
    306
    307	00F3  BA 0000r		     mov     dx, offset	apie
    308	00F6  B4 09		     mov     ah, 09h
    309	00F8  CD 21		     int     21h
    310
    311	00FA  EB 09 90		     jmp     _end
    312
    313	00FD			     closeF:
    314				     ;;	uzdaryti dest
    315	00FD  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    316	00FF  8B 1E 0158r	     mov     bx, destFHandle
    317	0103  CD 21		     int     21h
    318
    319	0105			     _end:
    320	0105  B8 4C00		     mov     ax, 4c00h
    321	0108  CD 21		     int     21h
    322
    323	010A			     err_source:
    324	010A  B8 0000s		     mov     ax, @data
    325	010D  8E D8		     mov     ds, ax
    326
    327	010F  BA 0041r		     mov     dx, offset	err_s
    328	0112  B4 09		     mov     ah, 09h
    329	0114  CD 21		     int     21h
    330
    331	0116  BA 0147r		     mov     dx, offset	sourceF
    332	0119  CD 21		     int     21h
    333
    334	011B  B8 4C01		     mov     ax, 4c01h
    335	011E  CD 21		     int     21h
    336
    337	0120			     err_destination:
    338	0120  B8 0000s		     mov     ax, @data
    339	0123  8E D8		     mov     ds, ax
    340
    341	0125  BA 0012r		     mov     dx, offset	err_d
    342	0128  B4 09		     mov     ah, 09h
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 7
dis.ASM



    343	012A  CD 21		     int     21h
    344
    345	012C  BA 0151r		     mov     dx, offset	destF
    346	012F  CD 21		     int     21h
    347
    348	0131  B8 4C02		     mov     ax, 4c02h
    349	0134  CD 21		     int     21h
    350
    351
    352				     ;;	procedures
    353
    354	0136			     skip_spaces PROC near
    355
    356	0136			     skip_spaces_loop:
    357	0136  80 3C 20		     cmp byte ptr ds:[si], ' '
    358	0139  75 03		     jne skip_spaces_end
    359	013B  46		     inc si
    360	013C  EB F8		     jmp skip_spaces_loop
    361	013E			     skip_spaces_end:
    362	013E  C3		     ret
    363
    364	013F			     skip_spaces ENDP
    365
    366	013F			     read_filename PROC	near
    367
    368	013F  50		     push    ax
    369	0140  E8 FFF3		     call    skip_spaces
    370	0143			     read_filename_start:
    371	0143  80 3C 0D		     cmp     byte ptr ds:[si], 13    ; jei nera	parametru
    372	0146  74 05		     je	     read_filename_end	     ; tai taip, tai baigtas failo vedimas
    373	0148  80 3C 20		     cmp     byte ptr ds:[si], ' '   ; jei tarpas
    374	014B  75 05		     jne     read_filename_next	     ; tai praleisti visus tarpus, ir sokti prie kito parametro
    375	014D			     read_filename_end:
    376	014D  B0 24		     mov     al, '$'		     ; irasyti '$' gale
    377	014F  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    378	0150  58		     pop     ax
    379	0151  C3		     ret
    380	0152			     read_filename_next:
    381	0152  AC		     lodsb			     ; uzkrauna	kita simboli
    382	0153  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    383	0154  EB ED		     jmp read_filename_start
    384
    385	0156			     read_filename ENDP
    386
    387
    388	0156			     IntegerToHexFromMap PROC
    389	0156  56				     push si
    390	0157  57				     push di
    391
    392	0158  BE 0071r			 mov si, OFFSET	Hex_Map		 ; Pointer to hex-character table
    393
    394	015B  8B D8			 mov bx, ax			 ; BX =	argument AX
    395	015D  81 E3 00FF		 and bx, 00FFh			 ; Clear BH (just to be	on the safe side)
    396	0161  D1 EB D1 EB D1 EB	D1+	 shr bx, 4			 ; Isolate high	nibble (i.e. 4 bits)
    397	      EB
    398	0169  8A 10			 mov dl, [si+bx]		 ; Read	hex-character from the table
    399	016B  88 15			 mov [di+0], dl			 ; Store character at the first	place in the output string
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 8
dis.ASM



    400
    401	016D  8B D8			 mov bx, ax			 ; BX =	argument AX (just to be	on the safe side)
    402	016F  81 E3 00FF		 and bx, 00FFh			 ; Clear BH (just to be	on the safe side)
    403	0173  80 E3 0F			 and bl, 0Fh			 ; Isolate low nibble (i.e. 4 bits)
    404	0176  8A 10			 mov dl, [si+bx]		 ; Read	hex-character from the table
    405	0178  88 55 01			 mov [di+1], dl			 ; Store character at the second place in the output string
    406
    407	017B  5F				     pop di
    408	017C  5E				     pop si
    409	017D  C3			 ret
    410	017E			     IntegerToHexFromMap ENDP
    411
    412	017E			     printLineNumber PROC
    413
    414	017E  51		       push cx
    415	017F  56		       push si
    416	0180  50			     push ax
    417	0181  57			     push di
    418
    419	0182  BF 0081r		       mov di, OFFSET HEX_Out	       ; First argument: pointer
    420	0185  A1 006Fr		       mov ax, lineCountH		; Second argument: Integer
    421	0188  E8 FFCB		       call IntegerToHexFromMap
    422
    423	018B  B9 0002		       mov cx, 2
    424	018E  B4 40		       mov   ah, 40h
    425	0190  8B 1E 0158r	       mov bx, destFHandle
    426	0194  BA 0081r		       lea dx, HEX_Out
    427	0197  CD 21		       int 21h
    428
    429	0199  BF 0081r		       mov di, OFFSET HEX_Out	       ; First argument: pointer
    430	019C  A1 006Dr		       mov ax, lineCount	       ; Second	argument: Integer
    431	019F  E8 FFB4		       call IntegerToHexFromMap
    432
    433	01A2  B9 0002		       mov cx, 2
    434	01A5  B4 40		       mov   ah, 40h
    435	01A7  8B 1E 0158r	       mov bx, destFHandle
    436	01AB  BA 0081r		       lea dx, HEX_Out
    437	01AE  CD 21		       int 21h
    438
    439	01B0  B9 0003		       mov cx, 3
    440	01B3  B4 40		       mov ah, 40h
    441	01B5  8B 1E 0158r	       mov bx, destFHandle
    442	01B9  BA 0086r		       lea dx, lineStringAdd
    443	01BC  CD 21		       int 21h
    444
    445	01BE  5F			     pop di
    446	01BF  58			     pop ax
    447	01C0  5E		       pop si
    448	01C1  59		       pop cx
    449	01C2  C3		       ret
    450	01C3			     printLineNumber ENDP
    451
    452	01C3			     incLineNumber PROC
    453					     ; --- jei lineCount=255 ir	norim INC, reikia ji prilygint 0 ir lineCountH ++
    454	01C3  81 3E 006Dr 00FF		     cmp [lineCount], 255
    455	01C9  75 0E			     jne nereikTvarkytiDidelioHex
    456	01CB  C7 06 006Dr 0000		     mov [lineCount], 0
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 9
dis.ASM



    457	01D1  FF 06 006Fr		     inc [lineCountH]
    458	01D5  FF 0E 006Dr		     dec [lineCount]
    459	01D9				     nereikTvarkytiDidelioHex:
    460	01D9  FF 06 006Dr		     inc [lineCount]
    461					     ; ---
    462	01DD  C3			     ret
    463	01DE			     incLineNumber ENDP
    464
    465
    466	01DE			     com_unk PROC
    467	01DE  57		     push di
    468	01DF  E8 0028		     call printHexByte
    469	01E2  51		     push cx
    470	01E3  50		     push ax
    471
    472	01E4  B9 0017		      mov cx, 23
    473	01E7  B4 40		      mov ah, 40h
    474	01E9  8B 1E 0158r	      mov bx, destFHandle
    475	01ED  BA 0099r		      lea dx, line_unkn
    476	01F0  CD 21		      int 21h
    477
    478	01F2  58		      pop ax
    479	01F3  59		      pop cx
    480	01F4  5F		      pop di
    481	01F5  C3		      ret
    482	01F6			     com_unk ENDP
    483
    484	01F6			     readToBuff	PROC
    485	01F6  8B 1E 014Fr	     mov     bx, sourceFHandle
    486	01FA  BA 015Ar		     mov     dx, offset	buffer	     ; address of buffer in dx
    487	01FD  B9 0064		     mov     cx, 100			     ; kiek baitu nuskaitysim
    488	0200  B4 3F		     mov     ah, 3fh		     ; function	3Fh - read from	file
    489	0202  CD 21		     int     21h
    490
    491	0204  8B C8		     mov     cx, ax		     ; bytes actually read
    492	0206  3D 0000		     cmp     ax, 0
    493	0209  C3		     ret
    494	020A			     readToBuff	ENDP
    495
    496	020A			     printHexByte PROC
    497	020A  51		     push cx
    498	020B  50		     push ax
    499	020C  57		     push di
    500	020D  53		     push bx
    501
    502	020E  BF 0081r		     mov di, OFFSET HEX_Out
    503	0211  E8 FF42		     call IntegerToHexFromMap
    504	0214  B9 0002		     mov cx, 2
    505	0217  B4 40		     mov ah, 40h
    506	0219  8B 1E 0158r	     mov bx, destFHandle
    507	021D  BA 0081r		     lea dx, HEX_Out
    508	0220  CD 21		     int 21h
    509
    510	0222  5B		     pop bx
    511	0223  5F		     pop di
    512	0224  58		     pop ax
    513	0225  59		     pop cx
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 10
dis.ASM



    514	0226  C3		     ret
    515	0227			     printHexByte ENDP
    516
    517
    518				     ;------------- IN su portu
    519	0227			     com_in2 PROC
    520	0227  E8 FFE0		     call printHexByte
    521	022A  83 F9 01		     cmp cx, 1
    522	022D  75 03		     jne skipRefillin2
    523	022F  E8 FFC4		     call readToBuff
    524	0232			     skipRefillin2:
    525	0232  AC		     lodsb
    526	0233  50		     push ax
    527	0234  49		     dec cx
    528	0235  E8 FFD2		     call printHexByte
    529	0238  E8 FF88		     call incLineNumber
    530	023B  E8 04FC		     call printDoubleTab
    531				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    532	023E  51		     push cx
    533	023F  B9 0002		     mov cx, 2
    534	0242  B4 40		     mov ah, 40h
    535	0244  8B 1E 0158r	     mov bx, destFHandle
    536	0248  BA 00BFr		     mov dx, offset com_names +	9
    537	024B  CD 21		     int 21h
    538	024D  59		     pop cx
    539
    540	024E  E8 04E9		     call printDoubleTab
    541
    542	0251  51		     push cx
    543	0252  B9 0002		     mov cx, 2
    544	0255  B4 40		     mov ah, 40h
    545	0257  8B 1E 0158r	     mov bx, destFHandle
    546	025B  BA 00D9r		     mov dx, offset mod11w0reg + 0
    547	025E  CD 21		     int 21h
    548	0260  59		     pop cx
    549
    550	0261  E8 0580		     call printOperandSeparator
    551
    552	0264  58		     pop ax
    553	0265  E8 FFA2		     call printHexByte
    554	0268  E8 04E2		     call printHNewline
    555	026B  E9 FE71		     jmp inc_lineCount
    556	026E			     com_in2 ENDP
    557				     ;---------
    558
    559				     ;------------- INT	su kodu
    560	026E			     com_int2 PROC
    561	026E  E8 FF99		     call printHexByte
    562	0271  83 F9 01		     cmp cx, 1
    563	0274  75 03		     jne skipRefillint2
    564	0276  E8 FF7D		     call readToBuff
    565	0279			     skipRefillint2:
    566	0279  AC		     lodsb
    567	027A  50		     push ax
    568	027B  49		     dec cx
    569	027C  E8 FF8B		     call printHexByte
    570	027F  E8 FF41		     call incLineNumber
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 11
dis.ASM



    571	0282  E8 04B5		     call printDoubleTab
    572				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    573	0285  51		     push cx
    574	0286  B9 0003		     mov cx, 3
    575	0289  B4 40		     mov ah, 40h
    576	028B  8B 1E 0158r	     mov bx, destFHandle
    577	028F  BA 00C7r		     mov dx, offset com_names +	17
    578	0292  CD 21		     int 21h
    579	0294  59		     pop cx
    580
    581	0295  E8 04A2		     call printDoubleTab
    582	0298  58		     pop ax
    583	0299  E8 FF6E		     call printHexByte
    584	029C  E8 04AE		     call printHNewline
    585	029F  E9 FE3D		     jmp inc_lineCount
    586	02A2  C3		     ret
    587	02A3			     com_int2 ENDP
    588				     ;---------
    589
    590				     ;----------------------IRET
    591	02A3			     com_iret PROC
    592	02A3  E8 FF64		      call printHexByte
    593	02A6  E8 0491		      call printDoubleTab
    594	02A9  51		      push cx
    595	02AA  B9 0004		      mov cx, 4
    596	02AD  B4 40		      mov ah, 40h
    597	02AF  8B 1E 0158r	      mov bx, destFHandle
    598	02B3  BA 00C2r		      mov dx, offset com_names + 12
    599	02B6  CD 21		      int 21h
    600	02B8  59		      pop cx
    601	02B9  E8 04A2		      call printNewline
    602	02BC  E9 FE20		      jmp inc_lineCount
    603	02BF  C3		      ret
    604	02C0			     com_iret ENDP
    605				     ;---------
    606
    607				     ;----------------------INT	3
    608	02C0			     com_int PROC
    609	02C0  E8 FF47		      call printHexByte
    610	02C3  E8 0474		      call printDoubleTab
    611	02C6  51		      push cx
    612	02C7  B9 0003		      mov cx, 3
    613	02CA  B4 40		      mov ah, 40h
    614	02CC  8B 1E 0158r	      mov bx, destFHandle
    615	02D0  BA 00C7r		      mov dx, offset com_names + 17
    616	02D3  CD 21		      int 21h
    617	02D5  59		      pop cx
    618	02D6  E8 0461		      call printDoubleTab
    619	02D9  B0 03		      mov al, 03h
    620	02DB  E8 FF2C		      call printHexByte
    621	02DE  E8 047D		      call printNewline
    622	02E1  E9 FDFB		      jmp inc_lineCount
    623	02E4  C3		      ret
    624	02E5			     com_int ENDP
    625				     ;---------
    626
    627				     ;----------------------IN
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 12
dis.ASM



    628	02E5			     com_in PROC
    629	02E5  80 E3 01		      and bl, 00000001b
    630	02E8  80 FB 00		      cmp bl, 0
    631	02EB  75 06		      jne in_ax
    632	02ED  BA 00D9r		      mov dx, offset mod11w0reg+0
    633	02F0  EB 04 90		      jmp print_in
    634	02F3			      in_ax:
    635	02F3  BA 00F1r		      mov dx, offset mod11w1reg+0
    636	02F6			      print_in:
    637	02F6  52		      push dx
    638	02F7  E8 FF10		      call printHexByte
    639	02FA  E8 043D		      call printDoubleTab
    640	02FD  51		      push cx
    641	02FE  B9 0002		      mov cx, 2
    642	0301  B4 40		      mov ah, 40h
    643	0303  8B 1E 0158r	      mov bx, destFHandle
    644	0307  BA 00BFr		      mov dx, offset com_names + 9
    645	030A  CD 21		      int 21h
    646	030C  59		      pop cx
    647	030D  E8 042A		      call printDoubleTab
    648
    649	0310  5A		     pop dx
    650	0311  51		     push cx
    651	0312  B9 0002		     mov cx, 2
    652	0315  B4 40		     mov ah, 40h
    653	0317  8B 1E 0158r	     mov bx, destFHandle
    654	031B  CD 21		     int 21h
    655	031D  59		     pop cx
    656	031E  E8 04C3		     call printOperandSeparator
    657	0321  51		     push cx
    658	0322  B9 0002		     mov cx, 2
    659	0325  B4 40		     mov ah, 40h
    660	0327  8B 1E 0158r	     mov bx, destFHandle
    661	032B  BA 00F7r		     mov dx, offset mod11w1reg + 6
    662	032E  CD 21		     int 21h
    663	0330  59		     pop cx
    664
    665	0331  E8 042A		      call printNewline
    666	0334  E9 FDA8		      jmp inc_lineCount
    667	0337  C3		      ret
    668	0338			     com_in ENDP
    669				     ;---------
    670
    671				     ;----------------------XCHG
    672	0338			     com_xchg PROC
    673	0338  50		     push ax
    674	0339  E8 FECE		     call printHexByte
    675	033C  E8 03FB		     call printDoubleTab
    676	033F  58		     pop ax
    677	0340  8A D8		     mov bl, al
    678	0342  80 E3 07		     and bl, 00000111b
    679	0345  80 FB 00		     cmp bl, 00000000b ; ax is ax
    680	0348  75 06		     jne xchgnotax
    681	034A  BA 00F1r		     mov dx, offset mod11w1reg + 0
    682	034D  EB 1D 90		     jmp xchgprint
    683	0350			     xchgnotax:
    684	0350  80 FB 01		     cmp bl, 00000001b ; cx is ax
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 13
dis.ASM



    685	0353  75 06		     jne xchgnotcx
    686	0355  BA 00F4r		     mov dx, offset mod11w1reg + 3
    687	0358  EB 12 90		     jmp xchgprint
    688
    689	035B			     xchgnotcx:
    690	035B  80 FB 02		     cmp bl, 00000010b ; dx is ax
    691	035E  75 06		     jne xchgnotdx
    692	0360  BA 00F7r		     mov dx, offset mod11w1reg + 6
    693	0363  EB 07 90		     jmp xchgprint
    694
    695	0366			     xchgnotdx:	; turi buti bx
    696	0366  BA 00FAr		     mov dx, offset mod11w1reg + 9
    697	0369  EB 01 90		     jmp xchgprint
    698
    699	036C			     xchgprint:
    700	036C  52		     push dx
    701
    702	036D  51		     push cx
    703	036E  B9 0004		     mov cx, 4
    704	0371  B4 40		     mov ah, 40h
    705	0373  8B 1E 0158r	     mov bx, destFHandle
    706	0377  BA 00CFr		     mov dx, offset com_names +	25
    707	037A  CD 21		     int 21h
    708	037C  59		     pop cx
    709
    710
    711	037D  E8 03BA		     call printDoubleTab
    712
    713	0380  5A		     pop dx
    714	0381  51		     push cx
    715	0382  B9 0002		     mov cx, 2
    716	0385  B4 40		     mov ah, 40h
    717	0387  8B 1E 0158r	     mov bx, destFHandle
    718
    719	038B  CD 21		     int 21h
    720	038D  59		     pop cx
    721
    722
    723	038E  E8 0453		     call printOperandSeparator
    724
    725	0391  51		     push cx
    726	0392  B9 0002		     mov cx, 2
    727	0395  B4 40		     mov ah, 40h
    728	0397  8B 1E 0158r	     mov bx, destFHandle
    729	039B  BA 00F1r		     mov dx, offset mod11w1reg + 0
    730				     ;mov dx, offset com_names
    731	039E  CD 21		     int 21h
    732	03A0  59		     pop cx
    733	03A1  E8 03BA		     call printNewline
    734	03A4  E9 FD38		     jmp inc_lineCount
    735
    736	03A7  C3		     ret
    737	03A8			     com_xchg ENDP
    738
    739				     ; ------------------------------ TEST!
    740
    741	03A8			     com_test1 proc
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 14
dis.ASM



    742	03A8  E8 FE5F		     call printHexByte
    743
    744	03AB  8A D8		     mov bl, al
    745	03AD  80 E3 01		     and bl, 00000001b
    746	03B0  80 FB 01		     cmp bl, 00000001b
    747	03B3  74 08		     je	w1
    748	03B5  C6 06 0228r 00	     mov [wFlag], 0
    749	03BA  EB 06 90		     jmp continue1
    750	03BD			     w1:
    751	03BD  C6 06 0228r 01	     mov [wFlag], 1
    752	03C2			     continue1:
    753
    754	03C2  83 F9 01		     cmp cx, 1
    755	03C5  75 03		     jne skipRefilldiv
    756	03C7  E8 FE2C		     call readToBuff
    757	03CA			     skipRefilldiv:
    758	03CA  AC		     lodsb
    759	03CB  49		     dec cx
    760
    761	03CC  E8 FE3B		     call printHexByte
    762	03CF  E8 FDF1		     call incLineNumber
    763
    764	03D2  56		     push si
    765	03D3  B7 05		     mov bh, 5
    766	03D5  BE 00D4r		     mov si, offset com_names +	30
    767	03D8  E8 041A		     call fillRegBuffer
    768	03DB  5E		     pop si
    769
    770
    771	03DC  E8 042D		     call modregrm
    772
    773
    774	03DF  C6 06 0222r 00	     mov [regBufferCount], 0
    775	03E4  C3		     ret
    776	03E5			     com_test1	ENDP
    777
    778
    779				     ; ------------------------------ DIV
    780	03E5			     com_div proc
    781	03E5  E8 FE22		     call printHexByte
    782
    783	03E8  8A D8		     mov bl, al
    784	03EA  80 E3 01		     and bl, 00000001b
    785	03ED  80 FB 01		     cmp bl, 00000001b
    786	03F0  74 08		     je	w1DIV
    787	03F2  C6 06 0228r 00	     mov [wFlag], 0
    788	03F7  EB 06 90		     jmp continue1DIV
    789	03FA			     w1DIV:
    790	03FA  C6 06 0228r 01	     mov [wFlag], 1
    791	03FF			     continue1DIV:
    792
    793	03FF  83 F9 01		     cmp cx, 1
    794	0402  75 03		     jne skipRefilldiv5
    795	0404  E8 FDEF		     call readToBuff
    796	0407			     skipRefilldiv5:
    797	0407  AC		     lodsb
    798	0408  49		     dec cx
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 15
dis.ASM



    799
    800	0409  E8 FDFE		     call printHexByte
    801	040C  E8 FDB4		     call incLineNumber
    802
    803				     ; ziurim DIV ar IDIV
    804	040F  8A D8		     mov bl, al
    805	0411  80 E3 38		     and bl, 00111000b
    806	0414  80 FB 30		     cmp bl, 00110000b
    807	0417  75 0D		     jne itsIDIV
    808				     ;its div ->
    809	0419  56		     push si
    810	041A  B7 04		     mov bh, 4
    811	041C  BE 00B6r		     mov si, offset com_names +	0
    812	041F  E8 03D3		     call fillRegBuffer
    813	0422  5E		     pop si
    814	0423  EB 0B 90		     jmp continue2
    815	0426			     itsIDIV:
    816				     ;idiv
    817	0426  56		     push si
    818	0427  B7 05		     mov bh, 5
    819	0429  BE 00BAr		     mov si, offset com_names +	4
    820	042C  E8 03C6		     call fillRegBuffer
    821	042F  5E		     pop si
    822	0430			     continue2:
    823
    824
    825				     ;;;;;;------------tikrinamMod
    826	0430  8A D8		     mov bl, al
    827	0432  80 E3 C0		     and bl, 11000000b
    828	0435  80 FB C0		     cmp bl, 11000000b
    829	0438  75 1B		     jne DIVmodnot11
    830
    831				     ;-------------------mod11
    832				     ; ziurim w0 ar w1
    833	043A  8A 1E 0228r	     mov bl, [wFlag]
    834	043E  80 FB 01		     cmp bl, 1
    835	0441  75 06		     jne not1
    836	0443  E8 0107		     call scanRM00w1
    837	0446  EB 04 90		     jmp continue3
    838	0449			     not1:
    839	0449  E8 0194		     call scanRM00w0
    840	044C			     continue3:
    841
    842	044C  E8 02EB		     call printDoubleTab
    843	044F  E8 0379		     call printDIstring
    844	0452  E8 0309		     call printNewline
    845				     ;-------------------
    846	0455			     DIVmodnot11:
    847
    848				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;; mod 10
    849	0455  8A D8		     mov bl, al
    850	0457  80 E3 C0		     and bl, 11000000b
    851	045A  80 FB 80		     cmp bl, 10000000b
    852	045D  75 10		     jne DIVmodnot10
    853
    854	045F  83 F9 01		     cmp cx, 1
    855	0462  75 03		     jne skipRefilldiv2
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 16
dis.ASM



    856	0464  E8 FD8F		     call readToBuff
    857	0467			     skipRefilldiv2:
    858	0467  AC		     lodsb
    859	0468  49		     dec cx
    860
    861	0469  E8 FD9E		     call printHexByte
    862	046C  E8 FD54		     call incLineNumber
    863
    864	046F			     DIVmodnot10:
    865
    866				     ;;;;;;;;;;;;;;;;;;;;; mod00
    867	046F  8A D8		     mov bl, al
    868	0471  80 E3 C0		     and bl, 11000000b
    869	0474  80 FB 00		     cmp bl, 00000000b
    870	0477  75 0D		     jne DIVmodnot00
    871
    872				     ;nuskaitome reg, cia kai w=1
    873	0479  E8 01F7		     call scanRM
    874
    875	047C  8A D8		     mov bl, al
    876	047E  80 E3 07		     and bl, 00000111b
    877	0481  80 FB 06		     cmp bl, 00000110b
    878	0484  75 00		     jne DIVrmNot110
    879
    880
    881
    882	0486			     DIVrmNot110:
    883	0486			     DIVmodnot00:
    884
    885
    886	0486  C6 06 0222r 00	     mov [regBufferCount], 0
    887	048B  C3		     ret
    888	048C			     com_div endp
    889
    890	048C			     com_les PROC
    891
    892	048C  E8 FD7B		     call printHexByte
    893	048F  83 F9 01		     cmp cx, 1
    894	0492  75 03		     jne skipRefillLes
    895	0494  E8 FD5F		     call readToBuff
    896	0497			     skipRefillLes:
    897	0497  AC		     lodsb
    898	0498  49		     dec cx
    899
    900	0499  E8 FD6E		     call printHexByte
    901	049C  E8 FD24		     call incLineNumber
    902
    903				     ; i rbuff idedu komandos pav.
    904	049F  56		     push si
    905	04A0  B7 04		     mov bh, 4
    906	04A2  BE 00CBr		     mov si, offset com_names +	21
    907	04A5  E8 034D		     call fillRegBuffer
    908	04A8  5E		     pop si
    909
    910	04A9  E8 0360		     call modregrm
    911
    912
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 17
dis.ASM



    913	04AC  C6 06 0222r 00	     mov [regBufferCount], 0
    914	04B1  C3		     ret
    915	04B2			     com_les ENDP
    916
    917
    918	04B2			     scanREG PROC
    919	04B2  56		     push si
    920
    921	04B3  8A D8		     mov bl, al
    922	04B5  80 E3 38		     and bl, 00111000b
    923	04B8  80 FB 38		     cmp bl, 00111000b
    924	04BB  75 08		     jne LESregnot111
    925	04BD  B7 02		     mov bh, 2 ; nusakom kiek simboliu
    926	04BF  BE 0106r		     mov si, offset mod11w1reg + 21 ; di bus nukreipta i bufferReg
    927	04C2  E8 0330		     call fillRegBuffer
    928	04C5			     LESregnot111:
    929
    930	04C5  8A D8		     mov bl, al
    931	04C7  80 E3 38		     and bl, 00111000b
    932	04CA  80 FB 30		     cmp bl, 00110000b
    933	04CD  75 08		     jne LESregnot110
    934	04CF  B7 02		     mov bh, 2
    935	04D1  BE 0103r		     mov si, offset mod11w1reg + 18
    936	04D4  E8 031E		     call fillRegBuffer
    937	04D7			     LESregnot110:
    938
    939	04D7  8A D8		     mov bl, al
    940	04D9  80 E3 38		     and bl, 00111000b
    941	04DC  80 FB 28		     cmp bl, 00101000b
    942	04DF  75 08		     jne LESregnot101
    943	04E1  B7 02		     mov bh, 2
    944	04E3  BE 0100r		     mov si, offset mod11w1reg + 15
    945	04E6  E8 030C		     call fillRegBuffer
    946	04E9			     LESregnot101:
    947
    948	04E9  8A D8		     mov bl, al
    949	04EB  80 E3 38		     and bl, 00111000b
    950	04EE  80 FB 20		     cmp bl, 00100000b
    951	04F1  75 08		     jne LESregnot100
    952	04F3  B7 02		     mov bh, 2
    953	04F5  BE 00FDr		     mov si, offset mod11w1reg + 12
    954	04F8  E8 02FA		     call fillRegBuffer
    955	04FB			     LESregnot100:
    956
    957	04FB  8A D8		     mov bl, al
    958	04FD  80 E3 38		     and bl, 00111000b
    959	0500  80 FB 18		     cmp bl, 00011000b
    960	0503  75 08		     jne LESregnot011
    961	0505  B7 02		     mov bh, 2
    962	0507  BE 00FAr		     mov si, offset mod11w1reg + 9
    963	050A  E8 02E8		     call fillRegBuffer
    964	050D			     LESregnot011:
    965
    966	050D  8A D8		     mov bl, al
    967	050F  80 E3 38		     and bl, 00111000b
    968	0512  80 FB 10		     cmp bl, 00010000b
    969	0515  75 08		     jne LESregnot010
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 18
dis.ASM



    970	0517  B7 02		     mov bh, 2
    971	0519  BE 00F7r		     mov si, offset mod11w1reg + 6
    972	051C  E8 02D6		     call fillRegBuffer
    973	051F			     LESregnot010:
    974
    975	051F  8A D8		     mov bl, al
    976	0521  80 E3 38		     and bl, 00111000b
    977	0524  80 FB 08		     cmp bl, 00001000b
    978	0527  75 08		     jne LESregnot001
    979	0529  B7 02		     mov bh, 2
    980	052B  BE 00F4r		     mov si, offset mod11w1reg + 3
    981	052E  E8 02C4		     call fillRegBuffer
    982	0531			     LESregnot001:
    983
    984	0531  8A D8		     mov bl, al
    985	0533  80 E3 38		     and bl, 00111000b
    986	0536  80 FB 00		     cmp bl, 00000000b
    987	0539  75 08		     jne LESregnot000
    988	053B  B7 02		     mov bh, 2
    989	053D  BE 00F1r		     mov si, offset mod11w1reg + 0
    990	0540  E8 02B2		     call fillRegBuffer
    991	0543			     LESregnot000:
    992
    993	0543  B7 02		     mov bh, 2
    994	0545  BE 0109r		     mov si, offset mod11w1reg + 24
    995	0548  E8 02AA		     call fillRegBuffer
    996
    997	054B  5E		     pop si
    998	054C  C3		     ret
    999	054D			     scanREG ENDP
   1000
   1001	054D			     scanRM00w1	proc
   1002
   1003	054D  56		     push si
   1004
   1005	054E  8A D8		     mov bl, al
   1006	0550  80 E3 07		     and bl, 00000111b
   1007	0553  80 FB 00		     cmp bl, 00000000b
   1008	0556  75 08		     jne w0rmNot000
   1009	0558  B7 02		     mov bh, 2
   1010	055A  BE 00F1r		     mov si, offset mod11w1reg + 0
   1011	055D  E8 0295		     call fillRegBuffer
   1012	0560			     w0rmNot000:
   1013
   1014	0560  8A D8		     mov bl, al
   1015	0562  80 E3 07		     and bl, 00000111b
   1016	0565  80 FB 01		     cmp bl, 00000001b
   1017	0568  75 08		     jne w0rmNot001
   1018	056A  B7 02		     mov bh, 2
   1019	056C  BE 00F4r		     mov si, offset mod11w1reg + 3
   1020	056F  E8 0283		     call fillRegBuffer
   1021	0572			     w0rmNot001:
   1022
   1023	0572  8A D8		     mov bl, al
   1024	0574  80 E3 07		     and bl, 00000111b
   1025	0577  80 FB 02		     cmp bl, 00000010b
   1026	057A  75 08		     jne w0rmNot010
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 19
dis.ASM



   1027	057C  B7 02		     mov bh, 2
   1028	057E  BE 00F7r		     mov si, offset mod11w1reg + 6
   1029	0581  E8 0271		     call fillRegBuffer
   1030	0584			     w0rmNot010:
   1031
   1032	0584  8A D8		     mov bl, al
   1033	0586  80 E3 07		     and bl, 00000111b
   1034	0589  80 FB 03		     cmp bl, 00000011b
   1035	058C  75 08		     jne w0rmNot011
   1036	058E  B7 02		     mov bh, 2
   1037	0590  BE 00FAr		     mov si, offset mod11w1reg + 9
   1038	0593  E8 025F		     call fillRegBuffer
   1039	0596			     w0rmNot011:
   1040
   1041	0596  8A D8		     mov bl, al
   1042	0598  80 E3 07		     and bl, 00000111b
   1043	059B  80 FB 04		     cmp bl, 00000100b
   1044	059E  75 08		     jne w0rmNot100
   1045	05A0  B7 02		     mov bh, 2
   1046	05A2  BE 00FDr		     mov si, offset mod11w1reg + 12
   1047	05A5  E8 024D		     call fillRegBuffer
   1048	05A8			     w0rmNot100:
   1049
   1050	05A8  8A D8		     mov bl, al
   1051	05AA  80 E3 07		     and bl, 00000111b
   1052	05AD  80 FB 05		     cmp bl, 00000101b
   1053	05B0  75 08		     jne w0rmNot101
   1054	05B2  B7 02		     mov bh, 2
   1055	05B4  BE 0100r		     mov si, offset mod11w1reg + 15
   1056	05B7  E8 023B		     call fillRegBuffer
   1057	05BA			     w0rmNot101:
   1058
   1059	05BA  8A D8		     mov bl, al
   1060	05BC  80 E3 07		     and bl, 00000111b
   1061	05BF  80 FB 06		     cmp bl, 00000110b
   1062	05C2  75 08		     jne w0rmNot110
   1063	05C4  B7 02		     mov bh, 2
   1064	05C6  BE 0103r		     mov si, offset mod11w1reg + 18
   1065	05C9  E8 0229		     call fillRegBuffer
   1066	05CC			     w0rmNot110:
   1067
   1068	05CC  8A D8		     mov bl, al
   1069	05CE  80 E3 07		     and bl, 00000111b
   1070	05D1  80 FB 07		     cmp bl, 00000111b
   1071	05D4  75 08		     jne w0rmNot111
   1072	05D6  B7 02		     mov bh, 2
   1073	05D8  BE 0106r		     mov si, offset mod11w1reg + 21
   1074	05DB  E8 0217		     call fillRegBuffer
   1075	05DE			     w0rmNot111:
   1076
   1077	05DE  5E		     pop si
   1078
   1079	05DF  C3		     ret
   1080	05E0			     scanRM00w1	ENDP
   1081
   1082	05E0			     scanRM00w0	proc
   1083
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 20
dis.ASM



   1084	05E0  56		     push si
   1085
   1086	05E1  8A D8		     mov bl, al
   1087	05E3  80 E3 07		     and bl, 00000111b
   1088	05E6  80 FB 00		     cmp bl, 00000000b
   1089	05E9  75 08		     jne w0rmNot000w0
   1090	05EB  B7 02		     mov bh, 2
   1091	05ED  BE 00D9r		     mov si, offset mod11w0reg + 0
   1092	05F0  E8 0202		     call fillRegBuffer
   1093	05F3			     w0rmNot000w0:
   1094
   1095	05F3  8A D8		     mov bl, al
   1096	05F5  80 E3 07		     and bl, 00000111b
   1097	05F8  80 FB 01		     cmp bl, 00000001b
   1098	05FB  75 08		     jne w0rmNot001w0
   1099	05FD  B7 02		     mov bh, 2
   1100	05FF  BE 00DCr		     mov si, offset mod11w0reg + 3
   1101	0602  E8 01F0		     call fillRegBuffer
   1102	0605			     w0rmNot001w0:
   1103
   1104	0605  8A D8		     mov bl, al
   1105	0607  80 E3 07		     and bl, 00000111b
   1106	060A  80 FB 02		     cmp bl, 00000010b
   1107	060D  75 08		     jne w0rmNot010w0
   1108	060F  B7 02		     mov bh, 2
   1109	0611  BE 00DFr		     mov si, offset mod11w0reg + 6
   1110	0614  E8 01DE		     call fillRegBuffer
   1111	0617			     w0rmNot010w0:
   1112
   1113	0617  8A D8		     mov bl, al
   1114	0619  80 E3 07		     and bl, 00000111b
   1115	061C  80 FB 03		     cmp bl, 00000011b
   1116	061F  75 08		     jne w0rmNot011w0
   1117	0621  B7 02		     mov bh, 2
   1118	0623  BE 00E2r		     mov si, offset mod11w0reg + 9
   1119	0626  E8 01CC		     call fillRegBuffer
   1120	0629			     w0rmNot011w0:
   1121
   1122	0629  8A D8		     mov bl, al
   1123	062B  80 E3 07		     and bl, 00000111b
   1124	062E  80 FB 04		     cmp bl, 00000100b
   1125	0631  75 08		     jne w0rmNot100w0
   1126	0633  B7 02		     mov bh, 2
   1127	0635  BE 00E5r		     mov si, offset mod11w0reg + 12
   1128	0638  E8 01BA		     call fillRegBuffer
   1129	063B			     w0rmNot100w0:
   1130
   1131	063B  8A D8		     mov bl, al
   1132	063D  80 E3 07		     and bl, 00000111b
   1133	0640  80 FB 05		     cmp bl, 00000101b
   1134	0643  75 08		     jne w0rmNot101w0
   1135	0645  B7 02		     mov bh, 2
   1136	0647  BE 00E8r		     mov si, offset mod11w0reg + 15
   1137	064A  E8 01A8		     call fillRegBuffer
   1138	064D			     w0rmNot101w0:
   1139
   1140	064D  8A D8		     mov bl, al
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 21
dis.ASM



   1141	064F  80 E3 07		     and bl, 00000111b
   1142	0652  80 FB 06		     cmp bl, 00000110b
   1143	0655  75 08		     jne w0rmNot110w0
   1144	0657  B7 02		     mov bh, 2
   1145	0659  BE 00EBr		     mov si, offset mod11w0reg + 18
   1146	065C  E8 0196		     call fillRegBuffer
   1147	065F			     w0rmNot110w0:
   1148
   1149	065F  8A D8		     mov bl, al
   1150	0661  80 E3 07		     and bl, 00000111b
   1151	0664  80 FB 07		     cmp bl, 00000111b
   1152	0667  75 08		     jne w0rmNot111w0
   1153	0669  B7 02		     mov bh, 2
   1154	066B  BE 00EEr		     mov si, offset mod11w0reg + 21
   1155	066E  E8 0184		     call fillRegBuffer
   1156	0671			     w0rmNot111w0:
   1157
   1158	0671  5E		     pop si
   1159
   1160	0672  C3		     ret
   1161	0673			     scanRM00w0	ENDP
   1162
   1163				     ; cia be 110 rm, nes ten keicias logika nuo mod
   1164	0673			     scanRM PROC
   1165
   1166	0673  56		     push si
   1167	0674  8A D8		     mov bl, al
   1168	0676  80 E3 07		     and bl, 00000111b
   1169	0679  80 FB 00		     cmp bl, 00000000b
   1170	067C  75 08		     jne rmNot000
   1171	067E  B7 06		     mov bh, 6
   1172	0680  BE 010Cr		     mov si, offset EAdress + 0
   1173	0683  E8 016F		     call fillRegBuffer
   1174	0686			     rmNot000:
   1175
   1176	0686  8A D8		     mov bl, al
   1177	0688  80 E3 07		     and bl, 00000111b
   1178	068B  80 FB 01		     cmp bl, 00000001b
   1179	068E  75 08		     jne rmNot001
   1180	0690  B7 06		     mov bh, 6
   1181	0692  BE 0113r		     mov si, offset EAdress + 7
   1182	0695  E8 015D		     call fillRegBuffer
   1183	0698			     rmNot001:
   1184
   1185	0698  8A D8		     mov bl, al
   1186	069A  80 E3 07		     and bl, 00000111b
   1187	069D  80 FB 02		     cmp bl, 00000010b
   1188	06A0  75 08		     jne rmNot010
   1189	06A2  B7 06		     mov bh, 6
   1190	06A4  BE 011Ar		     mov si, offset EAdress + 14
   1191	06A7  E8 014B		     call fillRegBuffer
   1192	06AA			     rmNot010:
   1193
   1194	06AA  8A D8		     mov bl, al
   1195	06AC  80 E3 07		     and bl, 00000111b
   1196	06AF  80 FB 03		     cmp bl, 00000011b
   1197	06B2  75 08		     jne rmNot011
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 22
dis.ASM



   1198	06B4  B7 06		     mov bh, 6
   1199	06B6  BE 0121r		     mov si, offset EAdress + 21
   1200	06B9  E8 0139		     call fillRegBuffer
   1201	06BC			     rmNot011:
   1202
   1203	06BC  8A D8		     mov bl, al
   1204	06BE  80 E3 07		     and bl, 00000111b
   1205	06C1  80 FB 04		     cmp bl, 00000100b
   1206	06C4  75 08		     jne rmNot100
   1207	06C6  B7 06		     mov bh, 6
   1208	06C8  BE 0128r		     mov si, offset EAdress + 28
   1209	06CB  E8 0127		     call fillRegBuffer
   1210	06CE			     rmNot100:
   1211
   1212	06CE  8A D8		     mov bl, al
   1213	06D0  80 E3 07		     and bl, 00000111b
   1214	06D3  80 FB 05		     cmp bl, 00000101b
   1215	06D6  75 08		     jne rmNot101
   1216	06D8  B7 06		     mov bh, 6
   1217	06DA  BE 012Fr		     mov si, offset EAdress + 35
   1218	06DD  E8 0115		     call fillRegBuffer
   1219	06E0			     rmNot101:
   1220
   1221	06E0  8A D8		     mov bl, al
   1222	06E2  80 E3 07		     and bl, 00000111b
   1223	06E5  80 FB 07		     cmp bl, 00000111b
   1224	06E8  75 08		     jne rmNot111
   1225	06EA  B7 06		     mov bh, 6
   1226	06EC  BE 013Dr		     mov si, offset EAdress + 49
   1227	06EF  E8 0103		     call fillRegBuffer
   1228	06F2			     rmNot111:
   1229
   1230	06F2  5E		     pop si
   1231	06F3  C3		     ret
   1232	06F4			     scanRM ENDP
   1233
   1234
   1235	06F4			     scanRMwhenMod00 PROC
   1236
   1237	06F4  8A D8		     mov bl, al
   1238	06F6  80 E3 07		     and bl, 00000111b
   1239	06F9  80 FB 06		     cmp bl, 00000110b
   1240	06FC  75 3B		     jne rmNot110
   1241
   1242
   1243				     ; skaitom poslinkio LowByte
   1244	06FE  83 F9 01		     cmp cx, 1
   1245	0701  75 03		     jne skipRefillLes2
   1246	0703  E8 FAF0		     call readToBuff
   1247	0706			     skipRefillLes2:
   1248	0706  AC		     lodsb
   1249	0707  A2 0223r		     mov [dLow], al
   1250	070A  49		     dec cx
   1251	070B  E8 FAB5		     call incLineNumber
   1252
   1253				     ;Skaitom poslinkio	HighByte
   1254	070E  83 F9 01		     cmp cx, 1
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 23
dis.ASM



   1255	0711  75 03		     jne skipRefillLes3
   1256	0713  E8 FAE0		     call readToBuff
   1257	0716			     skipRefillLes3:
   1258	0716  AC		     lodsb
   1259	0717  A2 0224r		     mov [dHigh], al
   1260	071A  49		     dec cx
   1261	071B  E8 FAA5		     call incLineNumber
   1262
   1263	071E  A0 0223r		     mov al, [dLow]
   1264	0721  E8 FAE6		     call printHexByte
   1265	0724  A0 0224r		     mov al, [dHigh]
   1266	0727  E8 FAE0		     call printHexByte
   1267
   1268
   1269
   1270	072A  E8 000D		     call printDoubleTab
   1271	072D  E8 009B		     call printDIstring
   1272	0730  E8 003C		     call PrintLeftBracket
   1273	0733  E8 006C		     call printWordInBrackets
   1274	0736  E8 0047		     call PrintRightBracket
   1275
   1276	0739			     rmNot110:
   1277
   1278	0739  C3		     ret
   1279	073A			     scanRMwhenMod00 ENDP
   1280
   1281
   1282
   1283
   1284				     ;---------
   1285
   1286				     ;formatavimo proceduros
   1287	073A			     printDoubleTab PROC
   1288	073A  51		      push cx
   1289	073B  50		      push ax
   1290
   1291	073C  B9 0002		      mov cx, 2
   1292	073F  B4 40		      mov ah, 40h
   1293	0741  8B 1E 0158r	      mov bx, destFHandle
   1294	0745  BA 008Cr		      lea dx, line_doubleTab
   1295	0748  CD 21		      int 21h
   1296
   1297	074A  58		      pop ax
   1298	074B  59		      pop cx
   1299	074C  C3		      ret
   1300	074D			     printDoubleTab ENDP
   1301
   1302	074D			     printHNewline PROC
   1303	074D  51		      push cx
   1304	074E  B9 0003		      mov cx, 3
   1305	0751  B4 40		      mov ah, 40h
   1306	0753  8B 1E 0158r	      mov bx, destFHandle
   1307	0757  BA 008Fr		      lea dx, line_hNewLine
   1308	075A  CD 21		      int 21h
   1309	075C  59		      pop cx
   1310	075D  C3		      ret
   1311	075E			     printHNewline ENDP
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 24
dis.ASM



   1312
   1313	075E			     printNewline PROC
   1314	075E  51		      push cx
   1315	075F  B9 0002		      mov cx, 2
   1316	0762  B4 40		      mov ah, 40h
   1317	0764  8B 1E 0158r	      mov bx, destFHandle
   1318	0768  BA 0093r		      lea dx, line_NewLine
   1319	076B  CD 21		      int 21h
   1320	076D  59		      pop cx
   1321	076E  C3		      ret
   1322	076F			     printNewline ENDP
   1323
   1324	076F			     PrintLeftBracket PROC
   1325	076F  51		     push cx
   1326	0770  B9 0001		     mov cx, 1
   1327	0773  B4 40		     mov ah, 40h
   1328	0775  8B 1E 0158r	     mov bx, destFHandle
   1329	0779  BA 0144r		     lea dx, format
   1330	077C  CD 21		     int 21h
   1331	077E  59		     pop cx
   1332	077F  C3		     ret
   1333	0780			     PrintLeftBracket ENDP
   1334
   1335	0780			     PrintRightBracket PROC
   1336	0780  51		     push cx
   1337	0781  B9 0001		     mov cx, 1
   1338	0784  B4 40		     mov ah, 40h
   1339	0786  8B 1E 0158r	     mov bx, destFHandle
   1340	078A  BA 0145r		     lea dx, format +1
   1341	078D  CD 21		     int 21h
   1342	078F  59		     pop cx
   1343	0790  C3		     ret
   1344
   1345	0791			     PrintRightBracket ENDP
   1346	0791  51		     push cx
   1347	0792  B9 0001		     mov cx, 1
   1348	0795  B4 40		     mov ah, 40h
   1349	0797  8B 1E 0158r	     mov bx, destFHandle
   1350	079B  BA 0145r		     lea dx, format+1
   1351	079E  CD 21		     int 21h
   1352	07A0  59		     pop cx
   1353	07A1  C3		     ret
   1354
   1355	07A2			     printWordInBrackets PROC
   1356
   1357	07A2  A0 0224r		     mov al, [dHigh]
   1358	07A5  E8 FA62		     call printHexByte
   1359
   1360	07A8  A0 0223r		     mov al, [dLow]
   1361	07AB  E8 FA5C		     call printHexByte
   1362
   1363	07AE  C3		     ret
   1364	07AF			     printWordInBrackets ENDP
   1365
   1366	07AF			     printByteInBrackets PROC
   1367	07AF  51		     push cx
   1368
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 25
dis.ASM



   1369	07B0  B0 00		     mov al, 0
   1370	07B2  E8 FA55		     call printHexByte
   1371
   1372	07B5  A0 0223r		     mov al, [dLow]
   1373	07B8  E8 FA4F		     call printHexByte
   1374
   1375	07BB  B9 0001		     mov cx, 1
   1376	07BE  BA 0145r		     lea dx, format + 1
   1377	07C1  B4 40		     mov ah, 40h
   1378	07C3  8B 1E 0158r	     mov bx, destFHandle
   1379	07C7  CD 21		     int 21h
   1380
   1381	07C9  59		     pop cx
   1382
   1383	07CA  C3		     ret
   1384	07CB			     printByteInBrackets ENDP
   1385
   1386	07CB			     printDIstring PROC
   1387	07CB  51		      push cx
   1388	07CC  50		      push ax
   1389
   1390	07CD  A0 0222r		      mov al, [regBufferCount]
   1391
   1392	07D0  B5 00		      mov ch, 0
   1393	07D2  8A 0E 0222r	      mov cl, [regBufferCount]
   1394
   1395
   1396	07D6  B4 40		      mov ah, 40h
   1397	07D8  8B 1E 0158r	      mov bx, destFHandle
   1398	07DC  BA 01BEr		      lea dx, regBuffer
   1399	07DF  CD 21		      int 21h
   1400
   1401	07E1  58		     pop ax
   1402	07E2  59		      pop cx
   1403	07E3  C3		      ret
   1404	07E4			     printDIstring ENDP
   1405
   1406	07E4			     printOperandSeparator PROC
   1407	07E4  51		      push cx
   1408	07E5  B9 0002		      mov cx, 2
   1409	07E8  B4 40		      mov ah, 40h
   1410	07EA  8B 1E 0158r	      mov bx, destFHandle
   1411	07EE  BA 0096r		      lea dx, line_OperandSeparator
   1412	07F1  CD 21		      int 21h
   1413	07F3  59		      pop cx
   1414	07F4  C3		      ret
   1415	07F5			     printOperandSeparator ENDP
   1416
   1417	07F5			     fillRegBuffer PROC
   1418
   1419				     ;aprasysiu	tai pradzioj scan ciklo
   1420					     ;lea di, regBuffer
   1421	07F5  51			     push cx
   1422	07F6  56			     push si
   1423
   1424	07F7  B5 00			     mov ch, 0
   1425	07F9  8A CF			     mov cl, bh
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 26
dis.ASM



   1426
   1427	07FB				     pushToBuffer2:
   1428	07FB  53			     push bx
   1429	07FC  8A 1C			     mov bl, [si]
   1430	07FE  88 1D			     mov [di], bl
   1431	0800  5B			     pop bx
   1432	0801  46			     inc si
   1433	0802  47			     inc di
   1434	0803  FE 06 0222r		     inc [regBufferCount]
   1435	0807  E2 F2			     loop pushToBuffer2
   1436
   1437	0809  5E			     pop si
   1438	080A  59			     pop cx
   1439
   1440	080B  C3			     ret
   1441	080C			     fillRegBuffer ENDP
   1442
   1443
   1444
   1445	080C			     modregrm proc
   1446
   1447
   1448	080C  8A D8		     mov bl, al
   1449	080E  80 E3 C0		     and bl, 11000000b
   1450	0811  80 FB 00		     cmp bl, 00000000b
   1451	0814  75 09		     jne LESmodnot00
   1452
   1453				     ;nuskaitome reg, cia kai w=1
   1454	0816  E8 FC99		     call scanREG
   1455	0819  E8 FE57		     call scanRM
   1456
   1457	081C  E8 FED5		     call scanRMwhenMod00
   1458
   1459	081F			     LESmodnot00:
   1460
   1461	081F  8A D8		     mov bl, al
   1462	0821  80 E3 C0		     and bl, 11000000b
   1463	0824  80 FB 80		     cmp bl, 10000000b
   1464	0827  75 57		     jne modNot10
   1465
   1466	0829  E8 FC86		     call scanREG
   1467	082C  E8 FE44		     call scanRM
   1468
   1469	082F  8A D8		     mov bl, al
   1470	0831  80 E3 07		     and bl, 00000111b
   1471	0834  80 FB 06		     cmp bl, 00000110b
   1472	0837  75 08		     jne rmNot110v2
   1473	0839  B7 06		     mov bh, 6
   1474	083B  BE 0136r		     mov si, offset EAdress + 42
   1475	083E  E8 FFB4		     call fillRegBuffer
   1476	0841			     rmNot110v2:
   1477
   1478				     ; skaitom poslinkio LowByte
   1479	0841  83 F9 01		     cmp cx, 1
   1480	0844  75 03		     jne skipRefillLes4
   1481	0846  E8 F9AD		     call readToBuff
   1482	0849			     skipRefillLes4:
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 27
dis.ASM



   1483	0849  AC		     lodsb
   1484	084A  A2 0223r		     mov [dLow], al
   1485	084D  49		     dec cx
   1486	084E  E8 F972		     call incLineNumber
   1487
   1488	0851  83 F9 01		     cmp cx, 1
   1489	0854  75 03		     jne skipRefillLes5
   1490	0856  E8 F99D		     call readToBuff
   1491	0859			     skipRefillLes5:
   1492	0859  AC		     lodsb
   1493	085A  A2 0224r		     mov [dHigh], al
   1494	085D  49		     dec cx
   1495	085E  E8 F962		     call incLineNumber
   1496
   1497	0861  E8 F9A6		     call printHexByte
   1498	0864  A0 0223r		     mov al, [dLow]
   1499	0867  E8 F9A0		     call printHexByte
   1500
   1501	086A  E8 FECD		     call printDoubleTab
   1502
   1503	086D  56		     push si
   1504	086E  B7 01		     mov bh, 1
   1505	0870  BE 0146r		     mov si, offset format + 2
   1506	0873  E8 FF7F		     call fillRegBuffer
   1507	0876  5E		     pop si
   1508
   1509	0877  E8 FF51		     call printDIstring
   1510	087A  E8 FF25		     call printWordInBrackets
   1511	087D  E8 FF00		     call PrintRightBracket
   1512	0880			     modNot10:
   1513
   1514	0880  8A D8		     mov bl, al
   1515	0882  80 E3 C0		     and bl, 11000000b
   1516	0885  80 FB 40		     cmp bl, 01000000b
   1517	0888  75 4E		     jne modNot01
   1518
   1519				     ;;----------------------------- 1byte
   1520	088A  E8 FC25		     call scanREG
   1521	088D  E8 FDE3		     call scanRM
   1522
   1523	0890  8A D8		     mov bl, al
   1524	0892  80 E3 07		     and bl, 00000111b
   1525	0895  80 FB 06		     cmp bl, 00000110b
   1526	0898  75 08		     jne rmNot110v3
   1527	089A  B7 06		     mov bh, 6
   1528	089C  BE 0136r		     mov si, offset EAdress + 42
   1529	089F  E8 FF53		     call fillRegBuffer
   1530	08A2			     rmNot110v3:
   1531
   1532				     ; skaitom poslinkio LowByte
   1533	08A2  83 F9 01		     cmp cx, 1
   1534	08A5  75 03		     jne skipRefillLes6
   1535	08A7  E8 F94C		     call readToBuff
   1536	08AA			     skipRefillLes6:
   1537	08AA  AC		     lodsb
   1538	08AB  A2 0223r		     mov [dLow], al
   1539	08AE  49		     dec cx
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 28
dis.ASM



   1540	08AF  E8 F911		     call incLineNumber
   1541
   1542	08B2  C6 06 0224r 00	     mov [dHigh], 0
   1543	08B7  B0 00		     mov al, 0
   1544
   1545	08B9  E8 F94E		     call printHexByte
   1546	08BC  A0 0223r		     mov al, [dLow]
   1547	08BF  E8 F948		     call printHexByte
   1548
   1549	08C2  E8 FE75		     call printDoubleTab
   1550
   1551	08C5  56		     push si
   1552	08C6  B7 01		     mov bh, 1
   1553	08C8  BE 0146r		     mov si, offset format + 2
   1554	08CB  E8 FF27		     call fillRegBuffer
   1555	08CE  5E		     pop si
   1556
   1557	08CF  E8 FEF9		     call printDIstring
   1558	08D2  E8 FECD		     call printWordInBrackets
   1559	08D5  E8 FEA8		     call PrintRightBracket
   1560	08D8			     modNot01:
   1561
   1562	08D8  8A D8		     mov bl, al
   1563	08DA  80 E3 C0		     and bl, 11000000b
   1564	08DD  80 FB C0		     cmp bl, 11000000b
   1565	08E0  75 1B		     jne modNot11
   1566
   1567	08E2  E8 FBCD		     call scanREG
   1568
   1569				     ;-------------------mod11
   1570				     ; ziurim w0 ar w1
   1571	08E5  8A 1E 0228r	     mov bl, [wFlag]
   1572	08E9  80 FB 01		     cmp bl, 1
   1573	08EC  75 06		     jne LESnot1
   1574	08EE  E8 FC5C		     call scanRM00w1
   1575	08F1  EB 04 90		     jmp LEScontinue3
   1576	08F4			     LESnot1:
   1577	08F4  E8 FCE9		     call scanRM00w0
   1578	08F7			     LEScontinue3:
   1579
   1580	08F7  E8 FE40		     call printDoubleTab
   1581	08FA  E8 FECE		     call printDIstring
   1582
   1583	08FD			     modNot11:
   1584
   1585	08FD  E8 FE5E		     call printNewline
   1586
   1587	0900  C3		     ret
   1588	0901			     modregrm ENDP
   1589
   1590	0901			     com_xchg2 PROC
   1591	0901  E8 F906		     call printHexByte
   1592
   1593	0904  8A D8		     mov bl, al
   1594	0906  80 E3 01		     and bl, 00000001b
   1595	0909  80 FB 01		     cmp bl, 00000001b
   1596	090C  74 08		     je	w11
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 29
dis.ASM



   1597	090E  C6 06 0228r 00	     mov [wFlag], 0
   1598	0913  EB 06 90		     jmp continue11
   1599	0916			     w11:
   1600	0916  C6 06 0228r 01	     mov [wFlag], 1
   1601	091B			     continue11:
   1602
   1603	091B  83 F9 01		     cmp cx, 1
   1604	091E  75 03		     jne skipRefilldiv1
   1605	0920  E8 F8D3		     call readToBuff
   1606	0923			     skipRefilldiv1:
   1607	0923  AC		     lodsb
   1608	0924  49		     dec cx
   1609
   1610	0925  E8 F8E2		     call printHexByte
   1611	0928  E8 F898		     call incLineNumber
   1612
   1613	092B  56		     push si
   1614	092C  B7 05		     mov bh, 5
   1615	092E  BE 00CFr		     mov si, offset com_names +	25
   1616	0931  E8 FEC1		     call fillRegBuffer
   1617	0934  5E		     pop si
   1618
   1619
   1620	0935  E8 FED4		     call modregrm
   1621
   1622
   1623	0938  C6 06 0222r 00	     mov [regBufferCount], 0
   1624
   1625
   1626	093D  C3		     ret
   1627	093E			     com_xchg2	ENDP
   1628
   1629
   1630				     end START
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 30
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/21/15"
??FILENAME			  Text	 "dis	  "
??TIME				  Text	 "18:10:19"
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DIS
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
APIE				  Byte	 DGROUP:0000
ATRENKA				  Near	 _TEXT:0050
BAIGEMLOOP			  Near	 _TEXT:00EB
BUFFER				  Byte	 DGROUP:015A
CLOSEF				  Near	 _TEXT:00FD
COM_DIV				  Near	 _TEXT:03E5
COM_IN				  Near	 _TEXT:02E5
COM_IN2				  Near	 _TEXT:0227
COM_INT				  Near	 _TEXT:02C0
COM_INT2			  Near	 _TEXT:026E
COM_IRET			  Near	 _TEXT:02A3
COM_LES				  Near	 _TEXT:048C
COM_NAMES			  Byte	 DGROUP:00B6
COM_RECOGNIZED			  Near	 _TEXT:00DF
COM_TEST1			  Near	 _TEXT:03A8
COM_UNK				  Near	 _TEXT:01DE
COM_XCHG			  Near	 _TEXT:0338
COM_XCHG2			  Near	 _TEXT:0901
CONTINUE1			  Near	 _TEXT:03C2
CONTINUE11			  Near	 _TEXT:091B
CONTINUE1DIV			  Near	 _TEXT:03FF
CONTINUE2			  Near	 _TEXT:0430
CONTINUE3			  Near	 _TEXT:044C
DESTF				  Byte	 DGROUP:0151
DESTFHANDLE			  Word	 DGROUP:0158
DHIGH				  Byte	 DGROUP:0224
DIVMODNOT00			  Near	 _TEXT:0486
DIVMODNOT10			  Near	 _TEXT:046F
DIVMODNOT11			  Near	 _TEXT:0455
DIVRMNOT110			  Near	 _TEXT:0486
DLOW				  Byte	 DGROUP:0223
EADRESS				  Byte	 DGROUP:010C
ERR_D				  Byte	 DGROUP:0012
ERR_DESTINATION			  Near	 _TEXT:0120
ERR_S				  Byte	 DGROUP:0041
ERR_SOURCE			  Near	 _TEXT:010A
FILLREGBUFFER			  Near	 _TEXT:07F5
FORMAT				  Byte	 DGROUP:0144
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 31
Symbol Table



HELP				  Near	 _TEXT:00EE
HEXBUFFER			  Byte	 DGROUP:008A
HEX_MAP				  Byte	 DGROUP:0071
HEX_OUT				  Byte	 DGROUP:0081
INCLINENUMBER			  Near	 _TEXT:01C3
INC_LINECOUNT			  Near	 _TEXT:00DF
INTEGERTOHEXFROMMAP		  Near	 _TEXT:0156
IN_AX				  Near	 _TEXT:02F3
ITSIDIV				  Near	 _TEXT:0426
LESCONTINUE3			  Near	 _TEXT:08F7
LESMODNOT00			  Near	 _TEXT:081F
LESNOT1				  Near	 _TEXT:08F4
LESREGNOT000			  Near	 _TEXT:0543
LESREGNOT001			  Near	 _TEXT:0531
LESREGNOT010			  Near	 _TEXT:051F
LESREGNOT011			  Near	 _TEXT:050D
LESREGNOT100			  Near	 _TEXT:04FB
LESREGNOT101			  Near	 _TEXT:04E9
LESREGNOT110			  Near	 _TEXT:04D7
LESREGNOT111			  Near	 _TEXT:04C5
LINECOUNT			  Word	 DGROUP:006D
LINECOUNTH			  Word	 DGROUP:006F
LINESTRINGADD			  Byte	 DGROUP:0086
LINE_DOUBLETAB			  Byte	 DGROUP:008C
LINE_HNEWLINE			  Byte	 DGROUP:008F
LINE_IN				  Byte	 DGROUP:00B1
LINE_NEWLINE			  Byte	 DGROUP:0093
LINE_OPERANDSEPARATOR		  Byte	 DGROUP:0096
LINE_UNKN			  Byte	 DGROUP:0099
MOD11W0REG			  Byte	 DGROUP:00D9
MOD11W1REG			  Byte	 DGROUP:00F1
MODNOT01			  Near	 _TEXT:08D8
MODNOT10			  Near	 _TEXT:0880
MODNOT11			  Near	 _TEXT:08FD
MODREGRM			  Near	 _TEXT:080C
NEREIKTVARKYTIDIDELIOHEX	  Near	 _TEXT:01D9
NOT1				  Near	 _TEXT:0449
NOT_DIV				  Near	 _TEXT:00BC
NOT_ERR_SOURCE			  Near	 _TEXT:0036
NOT_IN				  Near	 _TEXT:0074
NOT_IN2				  Near	 _TEXT:0067
NOT_INT				  Near	 _TEXT:00A2
NOT_INT2			  Near	 _TEXT:0098
NOT_IRET			  Near	 _TEXT:008E
NOT_LES				  Near	 _TEXT:00AC
NOT_TEST1			  Near	 _TEXT:00CC
NOT_XCHG			  Near	 _TEXT:0084
NOT_XCHG2			  Near	 _TEXT:00DC
PRINTBYTEINBRACKETS		  Near	 _TEXT:07AF
PRINTDISTRING			  Near	 _TEXT:07CB
PRINTDOUBLETAB			  Near	 _TEXT:073A
PRINTHEXBYTE			  Near	 _TEXT:020A
PRINTHNEWLINE			  Near	 _TEXT:074D
PRINTLEFTBRACKET		  Near	 _TEXT:076F
PRINTLINENUMBER			  Near	 _TEXT:017E
PRINTNEWLINE			  Near	 _TEXT:075E
PRINTOPERANDSEPARATOR		  Near	 _TEXT:07E4
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 32
Symbol Table



PRINTRIGHTBRACKET		  Near	 _TEXT:0780
PRINTWORDINBRACKETS		  Near	 _TEXT:07A2
PRINT_IN			  Near	 _TEXT:02F6
PUSHTOBUFFER2			  Near	 _TEXT:07FB
READTOBUFF			  Near	 _TEXT:01F6
READ_FILENAME			  Near	 _TEXT:013F
READ_FILENAME_END		  Near	 _TEXT:014D
READ_FILENAME_NEXT		  Near	 _TEXT:0152
READ_FILENAME_START		  Near	 _TEXT:0143
REGBUFFER			  Byte	 DGROUP:01BE
REGBUFFERCOUNT			  Byte	 DGROUP:0222
RMNOT000			  Near	 _TEXT:0686
RMNOT001			  Near	 _TEXT:0698
RMNOT010			  Near	 _TEXT:06AA
RMNOT011			  Near	 _TEXT:06BC
RMNOT100			  Near	 _TEXT:06CE
RMNOT101			  Near	 _TEXT:06E0
RMNOT110			  Near	 _TEXT:0739
RMNOT110V2			  Near	 _TEXT:0841
RMNOT110V3			  Near	 _TEXT:08A2
RMNOT111			  Near	 _TEXT:06F2
SCANREG				  Near	 _TEXT:04B2
SCANRM				  Near	 _TEXT:0673
SCANRM00W0			  Near	 _TEXT:05E0
SCANRM00W1			  Near	 _TEXT:054D
SCANRMWHENMOD00			  Near	 _TEXT:06F4
SKAITOM				  Near	 _TEXT:0039
SKIPREFILLDIV			  Near	 _TEXT:03CA
SKIPREFILLDIV1			  Near	 _TEXT:0923
SKIPREFILLDIV2			  Near	 _TEXT:0467
SKIPREFILLDIV5			  Near	 _TEXT:0407
SKIPREFILLIN2			  Near	 _TEXT:0232
SKIPREFILLINT2			  Near	 _TEXT:0279
SKIPREFILLLES			  Near	 _TEXT:0497
SKIPREFILLLES2			  Near	 _TEXT:0706
SKIPREFILLLES3			  Near	 _TEXT:0716
SKIPREFILLLES4			  Near	 _TEXT:0849
SKIPREFILLLES5			  Near	 _TEXT:0859
SKIPREFILLLES6			  Near	 _TEXT:08AA
SKIP_SPACES			  Near	 _TEXT:0136
SKIP_SPACES_END			  Near	 _TEXT:013E
SKIP_SPACES_LOOP		  Near	 _TEXT:0136
SOURCEF				  Byte	 DGROUP:0147
SOURCEFHANDLE			  Word	 DGROUP:014F
START				  Near	 _TEXT:0000
STARTCONVERTING			  Near	 _TEXT:0028
TEMP				  Byte	 DGROUP:0225
W0RMNOT000			  Near	 _TEXT:0560
W0RMNOT000W0			  Near	 _TEXT:05F3
W0RMNOT001			  Near	 _TEXT:0572
W0RMNOT001W0			  Near	 _TEXT:0605
W0RMNOT010			  Near	 _TEXT:0584
W0RMNOT010W0			  Near	 _TEXT:0617
W0RMNOT011			  Near	 _TEXT:0596
W0RMNOT011W0			  Near	 _TEXT:0629
W0RMNOT100			  Near	 _TEXT:05A8
W0RMNOT100W0			  Near	 _TEXT:063B
Turbo Assembler	 Version 3.2	    12/21/15 18:10:19	    Page 33
Symbol Table



W0RMNOT101			  Near	 _TEXT:05BA
W0RMNOT101W0			  Near	 _TEXT:064D
W0RMNOT110			  Near	 _TEXT:05CC
W0RMNOT110W0			  Near	 _TEXT:065F
W0RMNOT111			  Near	 _TEXT:05DE
W0RMNOT111W0			  Near	 _TEXT:0671
W1				  Near	 _TEXT:03BD
W11				  Near	 _TEXT:0916
W1DIV				  Near	 _TEXT:03FA
WFLAG				  Byte	 DGROUP:0228
XCHGNOTAX			  Near	 _TEXT:0350
XCHGNOTCX			  Near	 _TEXT:035B
XCHGNOTDX			  Near	 _TEXT:0366
XCHGPRINT			  Near	 _TEXT:036C
_6				  Near	 _TEXT:0049
_END				  Near	 _TEXT:0105

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  0229 Word	  Public  DATA
_TEXT				  16  093E Word	  Public  CODE
