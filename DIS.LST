Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 1
dis.ASM



      1				     ;;	Programa reaguoja i perduodamus	parametrus
      2				     ;;	isveda pagalba,	jei nera nurodyti reikiami parametrai
      3				     ;;	source failas skaitomas	dalimis
      4				     ;;	destination failas rasomas dalimis
      5				     ;;	jei destination	failas jau egzistuoja, jis yra isvalomas
      6				     ;;	jei source failas nenurodytas -	skaito iš stdin iki tuščios naujos eilutės
      7				     ;;	galima nurodyti	daugiau	nei vieną source failą - juos	sujungia
      8
      9				     ;skaitomos	komandos
     10				     ;div	1111 011w mod 110 r/m [poslinkis]
     11				     ;idiv    1111 011w	mod 111	r/m [poslinkis]
     12				     ;in      1110 110w	arba 1110 010w portas (vieno baito dydzio betarpiskas operandas)
     13				     ;iret	1100 1111
     14				     ;int	1100 1100 (INT 3) 11001101 kodas (visi kiti int	kur kodas-1 baitas)
     15				     ;les     1100 0100	mod reg	r/m [poslinkis]	 reg-<atm
     16				     ;xchg	1001 0000 (NOP/XCHG ax,ax) 1001	0xxx (x-registras, kai is x i ax)
     17				     ;xchg	1000 011w mod reg r/m [poslinkis] – XCHG registras  registras/atmintis
     18				     ;test	1000 010w mod reg r/m [poslinkis]
     19
     20	0000			     .model small
     21	0000			     .stack 100H
     22
     23	0000			     .data
     24
     25				     ;pranesimai
     26	0000  6D 69 6E 69 20 64	69+  apie		     db	'mini disasembleris'
     27	      73 61 73 65 6D 62	6C+
     28	      65 72 69 73
     29	0012  44 65 73 74 69 6E	61+  err_d		     db	'Destination failo nepavyko atidaryti rasymui',13,10,'$'
     30	      74 69 6F 6E 20 66	61+
     31	      69 6C 6F 20 6E 65	70+
     32	      61 76 79 6B 6F 20	61+
     33	      74 69 64 61 72 79	74+
     34	      69 20 72 61 73 79	6D+
     35	      75 69 0D 0A 24
     36	0041  53 6F 75 72 63 65	20+  err_s		     db	'Source	failo nepavyko atidaryti skaitymui',13,10,'$'
     37	      66 61 69 6C 6F 20	6E+
     38	      65 70 61 76 79 6B	6F+
     39	      20 61 74 69 64 61	72+
     40	      79 74 69 20 73 6B	61+
     41	      69 74 79 6D 75 69	0D+
     42	      0A 24
     43
     44				     ;skaitomos	eilutes	numerio	formavimas
     45	006D  0000		     lineCount	     dw	0   ;desinys  baitas eiles nr skaiciaus
     46	006F  0001		     lineCountH	     dw	1   ;kairys  baitas eiles nr skaiciaus
     47
     48				     ;hex skaiciaus spausdinimas
     49	0071  30 31 32 33 34 35	36+  HEX_Map   DB  '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
     50	      37 38 39 41 42 43	44+
     51	      45 46
     52	0081  30 30 0D 0A 24	     HEX_Out   DB  "00", 13, 10, '$'   ; string	with line feed and '$'-terminator
     53	0086  3A 20 20 24	     lineStringAdd db ':  ', '$'
     54	008A  20 24		     hexBuffer db ' ', '$'
     55
     56
     57				     ;formatavimas
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 2
dis.ASM



     58	008C  09 09 24		     line_doubleTab db 9, 9, '$'
     59	008F  68 0D 0A 24	     line_hNewLine db 'h',13,10, '$'
     60	0093  0D 0A 24		     line_NewLine db 13,10,'$'
     61	0096  2C 20 24		     line_OperandSeparator db ',', ' ',	'$'
     62				     ;neatpazinta komanda
     63	0099  09 09 4E 65 61 74	70+  line_unkn db 9, 9,	'Neatpazinta komanda',13,10, '$'
     64	      61 7A 69 6E 74 61	20+
     65	      6B 6F 6D 61 6E 64	61+
     66	      0D 0A 24
     67
     68				     ;komandos-------------------------------
     69
     70	00B1  09 69 6E 09 24	     line_in db	9,'in',9,'$'
     71										     ;offset
     72	00B6  44 49 56 24	     com_names	     db	     'DIV$'  ;0
     73	00BA  49 44 49 56 24				     db	     'IDIV$' ;4
     74	00BF  49 4E 24					     db	     'IN$'   ;9
     75	00C2  49 52 45 54 24				     db	     'IRET$' ;12
     76	00C7  49 4E 54 24				     db	     'INT$'  ;17
     77	00CB  4C 45 53 24				     db	     'LES$'  ;21
     78	00CF  58 43 48 47 24				     db	     'XCHG$' ;25
     79	00D4  54 45 53 54 24				     db	     'TEST$' ;30
     80				     ;---------------------------------------
     81
     82				     ;registrai------------------------------
     83									     ;offset
     84	00D9  61 6C 24		     mod11w0reg	     db	'al$';0
     85	00DC  63 6C 24					     db	'cl$';3
     86	00DF  64 6C 24					     db	'dl$';6
     87	00E2  62 6C 24					     db	'bl$';9
     88	00E5  61 68 24					     db	'ah$';12
     89	00E8  63 68 24					     db	'ch$';15
     90	00EB  64 68 24					     db	'dh$';18
     91	00EE  62 68 24					     db	'bh$';21
     92	00F1  61 78 24		     mod11w1reg	     db	'ax$';0
     93	00F4  63 78 24					     db	'cx$';3
     94	00F7  64 78 24					     db	'dx$';6
     95	00FA  62 78 24					     db	'bx$';9
     96	00FD  73 70 24					     db	'sp$';12
     97	0100  62 70 24					     db	'bp$';15
     98	0103  73 69 24					     db	'si$';18
     99	0106  64 69 24					     db	'di$';21
    100	0109  2C 20 24					     db	', $';24
    101	010C  5B 62 78 2B 73 69	24   EAdress	     db	'[bx+si$' ;0
    102	0113  5B 62 78 2B 64 69	24			     db	'[bx+di$' ;7
    103	011A  5B 62 70 2B 73 69	24			     db	'[bp+si$' ;14
    104	0121  5B 62 70 2B 64 69	24			     db	'[bp+di$' ;21
    105	0128  5B 73 69 20 20 20	24			     db	'[si   $' ;28
    106	012F  5B 64 69 20 20 20	24			     db	'[di   $' ;35
    107	0136  5B 62 70 20 20 20	24			     db	'[bp   $' ;42
    108	013D  5B 62 78 20 20 20	24			     db	'[bx   $' ;49
    109				     ;---------------------------------------
    110
    111
    112
    113
    114	0144  74 65 73 74 2E 65	78+  sourceF	     db	'test.exe'
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 3
dis.ASM



    115	      65
    116	014C  ????		     sourceFHandle   dw	?
    117
    118	014E  61 73 6D 2E 61 73	6D   destF	     db	'asm.asm'
    119	0155  ????		     destFHandle     dw	?
    120
    121	0157  64*(??)		     buffer    db 100 dup (?)
    122	01BB  64*(??)		     regBuffer db 100 dup (?)
    123	021F  00		     regBufferCount db 0
    124
    125				     ; poslinkio bitai
    126	0220  00		     dLow    db	0
    127	0221  00		     dHigh db 0
    128
    129	0222  61 62 63		     temp db 'abc'
    130
    131	0225			     .code
    132
    133	0000			     START:
    134	0000  B8 0000s		     mov     ax, @data
    135	0003  8E C0		     mov     es, ax		     ; es kad galetume naudot stosb funkcija: Store AL at address   +
    136				     ES:(E)DI
    137
    138	0005  BF 014Er		     lea     di, destF
    139	0008  BF 0144r		     lea     di, sourceF
    140
    141	000B  1E		     push    ds
    142	000C  56		     push    si
    143
    144	000D  B8 0000s		     mov     ax, @data
    145	0010  8E D8		     mov     ds, ax
    146
    147				     ;;	rasymui
    148	0012  BA 014Er		     mov     dx, offset	destF	     ; ikelti i	dx destF - failo pavadinima
    149	0015  B4 3C		     mov     ah, 3ch		     ; isvalo/sukuria faila - komandos kodas
    150	0017  B9 0000		     mov     cx, 0		     ; normal -	no attributes
    151	001A  CD 21		     int     21h		     ; INT 21h / AH= 3Ch - create or truncate file.
    152
    153
    154	001C  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    155	001E  B0 01		     mov     al, 1		     ; rasymui
    156	0020  CD 21		     int     21h		     ; INT 21h / AH= 3Dh - open	existing file.
    157
    158	0022  A3 0155r		     mov     destFHandle, ax	     ; issaugom	handle
    159
    160	0025  EB 01 90		     jmp     startConverting
    161
    162
    163	0028			     startConverting:
    164	0028  BA 0144r		     mov     dx, offset	sourceF	     ; failo pavadinimas
    165	002B  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    166	002D  B0 00		     mov     al, 0		     ; 0 - reading, 1-writing, 2-abu
    167	002F  CD 21		     int     21h				 ; INT 21h / AH= 3Dh - open existing file
    168	0031  73 03		     jnc     not_err_source		   ; CF	set on error AX	= error	code.
    169	0033  E9 009C		     jmp err_source
    170	0036			     not_err_source:
    171	0036  A3 014Cr		     mov     sourceFHandle, ax	       ; issaugojam filehandle
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 4
dis.ASM



    172
    173	0039			     skaitom:
    174
    175	0039  E8 0182		     call readToBuff
    176
    177	003C  75 0B		     jne     _6			     ; tai ne pabaiga
    178
    179	003E  8B 1E 014Cr	     mov     bx, sourceFHandle	     ; pabaiga skaitomo	failo
    180	0042  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    181	0044  CD 21		     int     21h
    182	0046  EB 7D 90		     jmp closeF
    183
    184	0049			     _6:
    185	0049  BE 0157r		     mov     si, offset	buffer	     ; skaitoma	is cia
    186	004C  8B 1E 0155r	     mov     bx, destFHandle	     ; rasoma i	cia
    187
    188				     ; cia prasideda pagrindine	logika (apdoroja kiekviena baita)
    189	0050			     atrenka:
    190	0050  AC		     lodsb			     ; Load byte at address DS:(E)SI into AL
    191
    192
    193	0051  BF 01BBr		     lea di, regBuffer
    194	0054  E8 00EF		     call printLineNumber
    195
    196				     ;in portas****************************
    197	0057  8A D8		     mov bl, al
    198	0059  80 E3 FE		     and bl, 11111110b
    199	005C  80 FB E4		     cmp bl, 11100100b
    200	005F  75 06		     jne not_in2
    201	0061  E8 018B		     call com_in2
    202	0064  EB 49 90		     jmp com_recognized
    203	0067			     not_in2:
    204
    205				     ;in be porto**************************
    206	0067  8A D8		     mov bl, al
    207	0069  80 FB EC		     cmp bl, 11101100b
    208	006C  75 06		     jne not_in
    209	006E  E8 023C		     call com_in
    210	0071  EB 3C 90		     jmp com_recognized
    211	0074			     not_in:
    212
    213				     ;XCHG********************************
    214	0074  8A D8		     mov bl, al
    215	0076  80 E3 F8		     and bl, 11111000b
    216	0079  80 FB 90		     cmp bl, 10010000b
    217	007C  75 06		     jne not_xchg
    218	007E  E8 027F		     call com_xchg
    219	0081  EB 2C 90		     jmp com_recognized
    220	0084			     not_xchg:
    221
    222				     ;IRET********************************
    223	0084  3C CF		     cmp al, 11001111b
    224	0086  75 06		     jne not_iret
    225	0088  E8 01E0		     call com_iret
    226	008B  EB 22 90		     jmp com_recognized
    227	008E			     not_iret:
    228
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 5
dis.ASM



    229				     ;INT su kodu************************
    230	008E  3C CD		     cmp al, 11001101b
    231	0090  75 06		     jne not_int2
    232	0092  E8 01A1		     call com_int2
    233	0095  EB 18 90		     jmp com_recognized
    234	0098			     not_int2:
    235
    236				     ; INT 3*****************************
    237	0098  3C CC		     cmp al, 11001100b
    238	009A  75 06		     jne not_int
    239	009C  E8 01E9		     call com_int
    240	009F  EB 0E 90		     jmp com_recognized
    241	00A2			     not_int:
    242
    243				     ; LES*******************************
    244	00A2  3C C4		     cmp al, 11000100b
    245	00A4  75 06		     jne not_les
    246	00A6  E8 02C7		     call com_les
    247				     ;jmp not_les
    248	00A9  EB 04 90		     jmp com_recognized
    249	00AC			     not_les:
    250
    251				     ; Nezinoma	komanda******************
    252	00AC  E8 00F7		     call com_unk
    253
    254	00AF			     com_recognized:
    255
    256	00AF			     inc_lineCount:
    257	00AF  E8 00D9		     call incLineNumber
    258
    259	00B2  E2 9C		     loop    atrenka
    260	00B4  EB 83		     jmp skaitom
    261
    262
    263
    264
    265				     ;----------------------------------
    266	00B6			     help:
    267	00B6  B8 0000s		     mov     ax, @data
    268	00B9  8E D8		     mov     ds, ax
    269
    270	00BB  BA 0000r		     mov     dx, offset	apie
    271	00BE  B4 09		     mov     ah, 09h
    272	00C0  CD 21		     int     21h
    273
    274	00C2  EB 09 90		     jmp     _end
    275
    276	00C5			     closeF:
    277				     ;;	uzdaryti dest
    278	00C5  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    279	00C7  8B 1E 0155r	     mov     bx, destFHandle
    280	00CB  CD 21		     int     21h
    281
    282	00CD			     _end:
    283	00CD  B8 4C00		     mov     ax, 4c00h
    284	00D0  CD 21		     int     21h
    285
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 6
dis.ASM



    286	00D2			     err_source:
    287	00D2  B8 0000s		     mov     ax, @data
    288	00D5  8E D8		     mov     ds, ax
    289
    290	00D7  BA 0041r		     mov     dx, offset	err_s
    291	00DA  B4 09		     mov     ah, 09h
    292	00DC  CD 21		     int     21h
    293
    294	00DE  BA 0144r		     mov     dx, offset	sourceF
    295	00E1  CD 21		     int     21h
    296
    297	00E3  B8 4C01		     mov     ax, 4c01h
    298	00E6  CD 21		     int     21h
    299
    300	00E8			     err_destination:
    301	00E8  B8 0000s		     mov     ax, @data
    302	00EB  8E D8		     mov     ds, ax
    303
    304	00ED  BA 0012r		     mov     dx, offset	err_d
    305	00F0  B4 09		     mov     ah, 09h
    306	00F2  CD 21		     int     21h
    307
    308	00F4  BA 014Er		     mov     dx, offset	destF
    309	00F7  CD 21		     int     21h
    310
    311	00F9  B8 4C02		     mov     ax, 4c02h
    312	00FC  CD 21		     int     21h
    313
    314
    315				     ;;	procedures
    316
    317	00FE			     skip_spaces PROC near
    318
    319	00FE			     skip_spaces_loop:
    320	00FE  80 3C 20		     cmp byte ptr ds:[si], ' '
    321	0101  75 03		     jne skip_spaces_end
    322	0103  46		     inc si
    323	0104  EB F8		     jmp skip_spaces_loop
    324	0106			     skip_spaces_end:
    325	0106  C3		     ret
    326
    327	0107			     skip_spaces ENDP
    328
    329	0107			     read_filename PROC	near
    330
    331	0107  50		     push    ax
    332	0108  E8 FFF3		     call    skip_spaces
    333	010B			     read_filename_start:
    334	010B  80 3C 0D		     cmp     byte ptr ds:[si], 13    ; jei nera	parametru
    335	010E  74 05		     je	     read_filename_end	     ; tai taip, tai baigtas failo vedimas
    336	0110  80 3C 20		     cmp     byte ptr ds:[si], ' '   ; jei tarpas
    337	0113  75 05		     jne     read_filename_next	     ; tai praleisti visus tarpus, ir sokti prie kito parametro
    338	0115			     read_filename_end:
    339	0115  B0 24		     mov     al, '$'		     ; irasyti '$' gale
    340	0117  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    341	0118  58		     pop     ax
    342	0119  C3		     ret
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 7
dis.ASM



    343	011A			     read_filename_next:
    344	011A  AC		     lodsb			     ; uzkrauna	kita simboli
    345	011B  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    346	011C  EB ED		     jmp read_filename_start
    347
    348	011E			     read_filename ENDP
    349
    350
    351	011E			     IntegerToHexFromMap PROC
    352	011E  56				     push si
    353	011F  57				     push di
    354
    355	0120  BE 0071r			 mov si, OFFSET	Hex_Map		 ; Pointer to hex-character table
    356
    357	0123  8B D8			 mov bx, ax			 ; BX =	argument AX
    358	0125  81 E3 00FF		 and bx, 00FFh			 ; Clear BH (just to be	on the safe side)
    359	0129  D1 EB D1 EB D1 EB	D1+	 shr bx, 4			 ; Isolate high	nibble (i.e. 4 bits)
    360	      EB
    361	0131  8A 10			 mov dl, [si+bx]		 ; Read	hex-character from the table
    362	0133  88 15			 mov [di+0], dl			 ; Store character at the first	place in the output string
    363
    364	0135  8B D8			 mov bx, ax			 ; BX =	argument AX (just to be	on the safe side)
    365	0137  81 E3 00FF		 and bx, 00FFh			 ; Clear BH (just to be	on the safe side)
    366	013B  80 E3 0F			 and bl, 0Fh			 ; Isolate low nibble (i.e. 4 bits)
    367	013E  8A 10			 mov dl, [si+bx]		 ; Read	hex-character from the table
    368	0140  88 55 01			 mov [di+1], dl			 ; Store character at the second place in the output string
    369
    370	0143  5F				     pop di
    371	0144  5E				     pop si
    372	0145  C3			 ret
    373	0146			     IntegerToHexFromMap ENDP
    374
    375	0146			     printLineNumber PROC
    376
    377	0146  51		       push cx
    378	0147  56		       push si
    379	0148  50			     push ax
    380	0149  57			     push di
    381
    382	014A  BF 0081r		       mov di, OFFSET HEX_Out	       ; First argument: pointer
    383	014D  A1 006Fr		       mov ax, lineCountH		; Second argument: Integer
    384	0150  E8 FFCB		       call IntegerToHexFromMap
    385
    386	0153  B9 0002		       mov cx, 2
    387	0156  B4 40		       mov   ah, 40h
    388	0158  8B 1E 0155r	       mov bx, destFHandle
    389	015C  BA 0081r		       lea dx, HEX_Out
    390	015F  CD 21		       int 21h
    391
    392	0161  BF 0081r		       mov di, OFFSET HEX_Out	       ; First argument: pointer
    393	0164  A1 006Dr		       mov ax, lineCount	       ; Second	argument: Integer
    394	0167  E8 FFB4		       call IntegerToHexFromMap
    395
    396	016A  B9 0002		       mov cx, 2
    397	016D  B4 40		       mov   ah, 40h
    398	016F  8B 1E 0155r	       mov bx, destFHandle
    399	0173  BA 0081r		       lea dx, HEX_Out
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 8
dis.ASM



    400	0176  CD 21		       int 21h
    401
    402	0178  B9 0003		       mov cx, 3
    403	017B  B4 40		       mov ah, 40h
    404	017D  8B 1E 0155r	       mov bx, destFHandle
    405	0181  BA 0086r		       lea dx, lineStringAdd
    406	0184  CD 21		       int 21h
    407
    408	0186  5F			     pop di
    409	0187  58			     pop ax
    410	0188  5E		       pop si
    411	0189  59		       pop cx
    412	018A  C3		       ret
    413	018B			     printLineNumber ENDP
    414
    415	018B			     incLineNumber PROC
    416					     ; --- jei lineCount=255 ir	norim INC, reikia ji prilygint 0 ir lineCountH ++
    417	018B  81 3E 006Dr 00FF		     cmp [lineCount], 255
    418	0191  75 0E			     jne nereikTvarkytiDidelioHex
    419	0193  C7 06 006Dr 0000		     mov [lineCount], 0
    420	0199  FF 06 006Fr		     inc [lineCountH]
    421	019D  FF 0E 006Dr		     dec [lineCount]
    422	01A1				     nereikTvarkytiDidelioHex:
    423	01A1  FF 06 006Dr		     inc [lineCount]
    424					     ; ---
    425	01A5  C3			     ret
    426	01A6			     incLineNumber ENDP
    427
    428
    429	01A6			     com_unk PROC
    430	01A6  57		     push di
    431	01A7  E8 0028		     call printHexByte
    432	01AA  51		     push cx
    433	01AB  50		     push ax
    434
    435	01AC  B9 0017		      mov cx, 23
    436	01AF  B4 40		      mov ah, 40h
    437	01B1  8B 1E 0155r	      mov bx, destFHandle
    438	01B5  BA 0099r		      lea dx, line_unkn
    439	01B8  CD 21		      int 21h
    440
    441	01BA  58		      pop ax
    442	01BB  59		      pop cx
    443	01BC  5F		      pop di
    444	01BD  C3		      ret
    445	01BE			     com_unk ENDP
    446
    447	01BE			     readToBuff	PROC
    448	01BE  8B 1E 014Cr	     mov     bx, sourceFHandle
    449	01C2  BA 0157r		     mov     dx, offset	buffer	     ; address of buffer in dx
    450	01C5  B9 0064		     mov     cx, 100			     ; kiek baitu nuskaitysim
    451	01C8  B4 3F		     mov     ah, 3fh		     ; function	3Fh - read from	file
    452	01CA  CD 21		     int     21h
    453
    454	01CC  8B C8		     mov     cx, ax		     ; bytes actually read
    455	01CE  3D 0000		     cmp     ax, 0
    456	01D1  C3		     ret
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 9
dis.ASM



    457	01D2			     readToBuff	ENDP
    458
    459	01D2			     printHexByte PROC
    460	01D2  51		     push cx
    461	01D3  50		     push ax
    462	01D4  57		     push di
    463	01D5  53		     push bx
    464
    465	01D6  BF 0081r		     mov di, OFFSET HEX_Out
    466	01D9  E8 FF42		     call IntegerToHexFromMap
    467	01DC  B9 0002		     mov cx, 2
    468	01DF  B4 40		     mov ah, 40h
    469	01E1  8B 1E 0155r	     mov bx, destFHandle
    470	01E5  BA 0081r		     lea dx, HEX_Out
    471	01E8  CD 21		     int 21h
    472
    473	01EA  5B		     pop bx
    474	01EB  5F		     pop di
    475	01EC  58		     pop ax
    476	01ED  59		     pop cx
    477	01EE  C3		     ret
    478	01EF			     printHexByte ENDP
    479
    480
    481				     ;------------- IN su portu
    482	01EF			     com_in2 PROC
    483	01EF  E8 FFE0		     call printHexByte
    484	01F2  83 F9 01		     cmp cx, 1
    485	01F5  75 03		     jne skipRefillin2
    486	01F7  E8 FFC4		     call readToBuff
    487	01FA			     skipRefillin2:
    488	01FA  AC		     lodsb
    489	01FB  50		     push ax
    490	01FC  49		     dec cx
    491	01FD  E8 FFD2		     call printHexByte
    492	0200  E8 FF88		     call incLineNumber
    493	0203  E8 02E9		     call printDoubleTab
    494				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    495	0206  51		     push cx
    496	0207  B9 0002		     mov cx, 2
    497	020A  B4 40		     mov ah, 40h
    498	020C  8B 1E 0155r	     mov bx, destFHandle
    499	0210  BA 00BFr		     mov dx, offset com_names +	9
    500	0213  CD 21		     int 21h
    501	0215  59		     pop cx
    502
    503	0216  E8 02D6		     call printDoubleTab
    504
    505	0219  51		     push cx
    506	021A  B9 0002		     mov cx, 2
    507	021D  B4 40		     mov ah, 40h
    508	021F  8B 1E 0155r	     mov bx, destFHandle
    509	0223  BA 00D9r		     mov dx, offset mod11w0reg + 0
    510	0226  CD 21		     int 21h
    511	0228  59		     pop cx
    512
    513	0229  E8 030B		     call printOperandSeparator
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 10
dis.ASM



    514
    515	022C  58		     pop ax
    516	022D  E8 FFA2		     call printHexByte
    517	0230  E8 02CF		     call printHNewline
    518	0233  E9 FE79		     jmp inc_lineCount
    519	0236			     com_in2 ENDP
    520				     ;---------
    521
    522				     ;------------- INT	su kodu
    523	0236			     com_int2 PROC
    524	0236  E8 FF99		     call printHexByte
    525	0239  83 F9 01		     cmp cx, 1
    526	023C  75 03		     jne skipRefillint2
    527	023E  E8 FF7D		     call readToBuff
    528	0241			     skipRefillint2:
    529	0241  AC		     lodsb
    530	0242  50		     push ax
    531	0243  49		     dec cx
    532	0244  E8 FF8B		     call printHexByte
    533	0247  E8 FF41		     call incLineNumber
    534	024A  E8 02A2		     call printDoubleTab
    535				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    536	024D  51		     push cx
    537	024E  B9 0003		     mov cx, 3
    538	0251  B4 40		     mov ah, 40h
    539	0253  8B 1E 0155r	     mov bx, destFHandle
    540	0257  BA 00C7r		     mov dx, offset com_names +	17
    541	025A  CD 21		     int 21h
    542	025C  59		     pop cx
    543
    544	025D  E8 028F		     call printDoubleTab
    545	0260  58		     pop ax
    546	0261  E8 FF6E		     call printHexByte
    547	0264  E8 029B		     call printHNewline
    548	0267  E9 FE45		     jmp inc_lineCount
    549	026A  C3		     ret
    550	026B			     com_int2 ENDP
    551				     ;---------
    552
    553				     ;----------------------IRET
    554	026B			     com_iret PROC
    555	026B  E8 FF64		      call printHexByte
    556	026E  E8 027E		      call printDoubleTab
    557	0271  51		      push cx
    558	0272  B9 0004		      mov cx, 4
    559	0275  B4 40		      mov ah, 40h
    560	0277  8B 1E 0155r	      mov bx, destFHandle
    561	027B  BA 00C2r		      mov dx, offset com_names + 12
    562	027E  CD 21		      int 21h
    563	0280  59		      pop cx
    564	0281  E8 028F		      call printNewline
    565	0284  E9 FE28		      jmp inc_lineCount
    566	0287  C3		      ret
    567	0288			     com_iret ENDP
    568				     ;---------
    569
    570				     ;----------------------INT	3
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 11
dis.ASM



    571	0288			     com_int PROC
    572	0288  E8 FF47		      call printHexByte
    573	028B  E8 0261		      call printDoubleTab
    574	028E  51		      push cx
    575	028F  B9 0003		      mov cx, 3
    576	0292  B4 40		      mov ah, 40h
    577	0294  8B 1E 0155r	      mov bx, destFHandle
    578	0298  BA 00C7r		      mov dx, offset com_names + 17
    579	029B  CD 21		      int 21h
    580	029D  59		      pop cx
    581	029E  E8 024E		      call printDoubleTab
    582	02A1  B0 03		      mov al, 03h
    583	02A3  E8 FF2C		      call printHexByte
    584	02A6  E8 026A		      call printNewline
    585	02A9  E9 FE03		      jmp inc_lineCount
    586	02AC  C3		      ret
    587	02AD			     com_int ENDP
    588				     ;---------
    589
    590				     ;----------------------IN
    591	02AD			     com_in PROC
    592	02AD  80 E3 01		      and bl, 00000001b
    593	02B0  80 FB 00		      cmp bl, 0
    594	02B3  75 06		      jne in_ax
    595	02B5  BA 00D9r		      mov dx, offset mod11w0reg+0
    596	02B8  EB 04 90		      jmp print_in
    597	02BB			      in_ax:
    598	02BB  BA 00F1r		      mov dx, offset mod11w1reg+0
    599	02BE			      print_in:
    600	02BE  52		      push dx
    601	02BF  E8 FF10		      call printHexByte
    602	02C2  E8 022A		      call printDoubleTab
    603	02C5  51		      push cx
    604	02C6  B9 0002		      mov cx, 2
    605	02C9  B4 40		      mov ah, 40h
    606	02CB  8B 1E 0155r	      mov bx, destFHandle
    607	02CF  BA 00BFr		      mov dx, offset com_names + 9
    608	02D2  CD 21		      int 21h
    609	02D4  59		      pop cx
    610	02D5  E8 0217		      call printDoubleTab
    611
    612	02D8  5A		     pop dx
    613	02D9  51		     push cx
    614	02DA  B9 0002		     mov cx, 2
    615	02DD  B4 40		     mov ah, 40h
    616	02DF  8B 1E 0155r	     mov bx, destFHandle
    617	02E3  CD 21		     int 21h
    618	02E5  59		     pop cx
    619	02E6  E8 024E		     call printOperandSeparator
    620	02E9  51		     push cx
    621	02EA  B9 0002		     mov cx, 2
    622	02ED  B4 40		     mov ah, 40h
    623	02EF  8B 1E 0155r	     mov bx, destFHandle
    624	02F3  BA 00F7r		     mov dx, offset mod11w1reg + 6
    625	02F6  CD 21		     int 21h
    626	02F8  59		     pop cx
    627
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 12
dis.ASM



    628	02F9  E8 0217		      call printNewline
    629	02FC  E9 FDB0		      jmp inc_lineCount
    630	02FF  C3		      ret
    631	0300			     com_in ENDP
    632				     ;---------
    633
    634				     ;----------------------XCHG
    635	0300			     com_xchg PROC
    636	0300  50		     push ax
    637	0301  E8 FECE		     call printHexByte
    638	0304  E8 01E8		     call printDoubleTab
    639	0307  58		     pop ax
    640	0308  8A D8		     mov bl, al
    641	030A  80 E3 07		     and bl, 00000111b
    642	030D  80 FB 00		     cmp bl, 00000000b ; ax is ax
    643	0310  75 06		     jne xchgnotax
    644	0312  BA 00F1r		     mov dx, offset mod11w1reg + 0
    645	0315  EB 1D 90		     jmp xchgprint
    646	0318			     xchgnotax:
    647	0318  80 FB 01		     cmp bl, 00000001b ; cx is ax
    648	031B  75 06		     jne xchgnotcx
    649	031D  BA 00F4r		     mov dx, offset mod11w1reg + 3
    650	0320  EB 12 90		     jmp xchgprint
    651
    652	0323			     xchgnotcx:
    653	0323  80 FB 02		     cmp bl, 00000010b ; dx is ax
    654	0326  75 06		     jne xchgnotdx
    655	0328  BA 00F7r		     mov dx, offset mod11w1reg + 6
    656	032B  EB 07 90		     jmp xchgprint
    657
    658	032E			     xchgnotdx:	; turi buti bx
    659	032E  BA 00FAr		     mov dx, offset mod11w1reg + 9
    660	0331  EB 01 90		     jmp xchgprint
    661
    662	0334			     xchgprint:
    663	0334  52		     push dx
    664
    665	0335  51		     push cx
    666	0336  B9 0004		     mov cx, 4
    667	0339  B4 40		     mov ah, 40h
    668	033B  8B 1E 0155r	     mov bx, destFHandle
    669	033F  BA 00CFr		     mov dx, offset com_names +	25
    670	0342  CD 21		     int 21h
    671	0344  59		     pop cx
    672
    673
    674	0345  E8 01A7		     call printDoubleTab
    675
    676	0348  5A		     pop dx
    677	0349  51		     push cx
    678	034A  B9 0002		     mov cx, 2
    679	034D  B4 40		     mov ah, 40h
    680	034F  8B 1E 0155r	     mov bx, destFHandle
    681
    682	0353  CD 21		     int 21h
    683	0355  59		     pop cx
    684
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 13
dis.ASM



    685
    686	0356  E8 01DE		     call printOperandSeparator
    687
    688	0359  51		     push cx
    689	035A  B9 0002		     mov cx, 2
    690	035D  B4 40		     mov ah, 40h
    691	035F  8B 1E 0155r	     mov bx, destFHandle
    692	0363  BA 00F1r		     mov dx, offset mod11w1reg + 0
    693				     ;mov dx, offset com_names
    694	0366  CD 21		     int 21h
    695	0368  59		     pop cx
    696	0369  E8 01A7		     call printNewline
    697	036C  E9 FD40		     jmp inc_lineCount
    698
    699	036F  C3		     ret
    700	0370			     com_xchg ENDP
    701
    702
    703				     ; ------------------------------ LES
    704	0370			     com_les PROC
    705
    706	0370  E8 FE5F		     call printHexByte
    707	0373  83 F9 01		     cmp cx, 1
    708	0376  75 03		     jne skipRefillLes
    709	0378  E8 FE43		     call readToBuff
    710	037B			     skipRefillLes:
    711	037B  AC		     lodsb
    712	037C  49		     dec cx
    713
    714	037D  E8 FE52		     call printHexByte
    715	0380  E8 FE08		     call incLineNumber
    716
    717
    718	0383  8A D8		     mov bl, al
    719	0385  80 E3 C0		     and bl, 11000000b
    720	0388  80 FB 00		     cmp bl, 00000000b
    721	038B  75 42		     jne LESmodnot00
    722
    723				     ;nuskaitome reg, cia kai w=1
    724	038D  E8 0043		     call scanREG
    725	0390  E8 00DB		     call scanRM
    726
    727	0393  8A D8		     mov bl, al
    728	0395  80 E3 07		     and bl, 00000111b
    729	0398  80 FB 06		     cmp bl, 00000110b
    730	039B  75 32		     jne rmNot110
    731
    732
    733				     ; skaitom poslinkio LowByte
    734	039D  83 F9 01		     cmp cx, 1
    735	03A0  75 03		     jne skipRefillLes2
    736	03A2  E8 FE19		     call readToBuff
    737	03A5			     skipRefillLes2:
    738	03A5  AC		     lodsb
    739	03A6  A2 0220r		     mov [dLow], al
    740	03A9  49		     dec cx
    741	03AA  E8 FDDE		     call incLineNumber
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 14
dis.ASM



    742
    743				     ;Skaitom poslinkio	HighByte
    744	03AD  83 F9 01		     cmp cx, 1
    745	03B0  75 03		     jne skipRefillLes3
    746	03B2  E8 FE09		     call readToBuff
    747	03B5			     skipRefillLes3:
    748	03B5  AC		     lodsb
    749	03B6  A2 0221r		     mov [dHigh], al
    750	03B9  49		     dec cx
    751	03BA  E8 FDCE		     call incLineNumber
    752
    753
    754	03BD  E8 FE12		     call printHexByte
    755	03C0  A0 0220r		     mov al, [dLow]
    756	03C3  E8 FE0C		     call printHexByte
    757
    758	03C6  E8 015B		     call printDIstring
    759
    760
    761
    762	03C9  E8 0147		     call printNewline
    763	03CC  E8 0144		     call printNewline
    764
    765	03CF			     rmNot110:
    766
    767
    768
    769	03CF			     LESmodnot00:
    770	03CF  E8 0141		     call printNewline
    771
    772	03D2  C3		     ret
    773	03D3			     com_les ENDP
    774
    775
    776	03D3			     scanREG PROC
    777	03D3  56		     push si
    778
    779	03D4  8A D8		     mov bl, al
    780	03D6  80 E3 38		     and bl, 00111000b
    781	03D9  80 FB 38		     cmp bl, 00111000b
    782	03DC  75 08		     jne LESregnot111
    783	03DE  B7 02		     mov bh, 2 ; nusakom kiek simboliu
    784	03E0  BE 0106r		     mov si, offset mod11w1reg + 21 ; di bus nukreipta i bufferReg
    785	03E3  E8 0162		     call fillRegBuffer
    786	03E6			     LESregnot111:
    787
    788	03E6  8A D8		     mov bl, al
    789	03E8  80 E3 38		     and bl, 00111000b
    790	03EB  80 FB 30		     cmp bl, 00110000b
    791	03EE  75 08		     jne LESregnot110
    792	03F0  B7 02		     mov bh, 2
    793	03F2  BE 0103r		     mov si, offset mod11w1reg + 18
    794	03F5  E8 0150		     call fillRegBuffer
    795	03F8			     LESregnot110:
    796
    797	03F8  8A D8		     mov bl, al
    798	03FA  80 E3 38		     and bl, 00111000b
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 15
dis.ASM



    799	03FD  80 FB 28		     cmp bl, 00101000b
    800	0400  75 08		     jne LESregnot101
    801	0402  B7 02		     mov bh, 2
    802	0404  BE 0100r		     mov si, offset mod11w1reg + 15
    803	0407  E8 013E		     call fillRegBuffer
    804	040A			     LESregnot101:
    805
    806	040A  8A D8		     mov bl, al
    807	040C  80 E3 38		     and bl, 00111000b
    808	040F  80 FB 20		     cmp bl, 00100000b
    809	0412  75 08		     jne LESregnot100
    810	0414  B7 02		     mov bh, 2
    811	0416  BE 00FDr		     mov si, offset mod11w1reg + 12
    812	0419  E8 012C		     call fillRegBuffer
    813	041C			     LESregnot100:
    814
    815	041C  8A D8		     mov bl, al
    816	041E  80 E3 38		     and bl, 00111000b
    817	0421  80 FB 18		     cmp bl, 00011000b
    818	0424  75 08		     jne LESregnot011
    819	0426  B7 02		     mov bh, 2
    820	0428  BE 00FAr		     mov si, offset mod11w1reg + 9
    821	042B  E8 011A		     call fillRegBuffer
    822	042E			     LESregnot011:
    823
    824	042E  8A D8		     mov bl, al
    825	0430  80 E3 38		     and bl, 00111000b
    826	0433  80 FB 10		     cmp bl, 00010000b
    827	0436  75 08		     jne LESregnot010
    828	0438  B7 02		     mov bh, 2
    829	043A  BE 00F7r		     mov si, offset mod11w1reg + 6
    830	043D  E8 0108		     call fillRegBuffer
    831	0440			     LESregnot010:
    832
    833	0440  8A D8		     mov bl, al
    834	0442  80 E3 38		     and bl, 00111000b
    835	0445  80 FB 08		     cmp bl, 00001000b
    836	0448  75 08		     jne LESregnot001
    837	044A  B7 02		     mov bh, 2
    838	044C  BE 00F4r		     mov si, offset mod11w1reg + 3
    839	044F  E8 00F6		     call fillRegBuffer
    840	0452			     LESregnot001:
    841
    842	0452  8A D8		     mov bl, al
    843	0454  80 E3 38		     and bl, 00111000b
    844	0457  80 FB 00		     cmp bl, 00000000b
    845	045A  75 08		     jne LESregnot000
    846	045C  B7 02		     mov bh, 2
    847	045E  BE 00F1r		     mov si, offset mod11w1reg + 0
    848	0461  E8 00E4		     call fillRegBuffer
    849	0464			     LESregnot000:
    850
    851	0464  B7 02		     mov bh, 2
    852	0466  BE 0109r		     mov si, offset mod11w1reg + 24
    853	0469  E8 00DC		     call fillRegBuffer
    854
    855	046C  5E		     pop si
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 16
dis.ASM



    856	046D  C3		     ret
    857	046E			     scanREG ENDP
    858
    859				     ; cia be 110 rm, nes ten keicias logika nuo mod
    860	046E			     scanRM PROC
    861
    862	046E  56		     push si
    863	046F  8A D8		     mov bl, al
    864	0471  80 E3 07		     and bl, 00000111b
    865	0474  80 FB 00		     cmp bl, 00000000b
    866	0477  75 08		     jne rmNot000
    867	0479  B7 06		     mov bh, 6
    868	047B  BE 010Cr		     mov si, offset EAdress + 0
    869	047E  E8 00C7		     call fillRegBuffer
    870	0481			     rmNot000:
    871
    872	0481  8A D8		     mov bl, al
    873	0483  80 E3 07		     and bl, 00000111b
    874	0486  80 FB 01		     cmp bl, 00000001b
    875	0489  75 08		     jne rmNot001
    876	048B  B7 06		     mov bh, 6
    877	048D  BE 0113r		     mov si, offset EAdress + 7
    878	0490  E8 00B5		     call fillRegBuffer
    879	0493			     rmNot001:
    880
    881	0493  8A D8		     mov bl, al
    882	0495  80 E3 07		     and bl, 00000111b
    883	0498  80 FB 02		     cmp bl, 00000010b
    884	049B  75 08		     jne rmNot010
    885	049D  B7 06		     mov bh, 6
    886	049F  BE 011Ar		     mov si, offset EAdress + 14
    887	04A2  E8 00A3		     call fillRegBuffer
    888	04A5			     rmNot010:
    889
    890	04A5  8A D8		     mov bl, al
    891	04A7  80 E3 07		     and bl, 00000111b
    892	04AA  80 FB 03		     cmp bl, 00000011b
    893	04AD  75 08		     jne rmNot011
    894	04AF  B7 06		     mov bh, 6
    895	04B1  BE 0121r		     mov si, offset EAdress + 21
    896	04B4  E8 0091		     call fillRegBuffer
    897	04B7			     rmNot011:
    898
    899	04B7  8A D8		     mov bl, al
    900	04B9  80 E3 07		     and bl, 00000111b
    901	04BC  80 FB 04		     cmp bl, 00000100b
    902	04BF  75 08		     jne rmNot100
    903	04C1  B7 06		     mov bh, 6
    904	04C3  BE 0128r		     mov si, offset EAdress + 28
    905	04C6  E8 007F		     call fillRegBuffer
    906	04C9			     rmNot100:
    907
    908	04C9  8A D8		     mov bl, al
    909	04CB  80 E3 07		     and bl, 00000111b
    910	04CE  80 FB 05		     cmp bl, 00000101b
    911	04D1  75 08		     jne rmNot101
    912	04D3  B7 06		     mov bh, 6
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 17
dis.ASM



    913	04D5  BE 012Fr		     mov si, offset EAdress + 35
    914	04D8  E8 006D		     call fillRegBuffer
    915	04DB			     rmNot101:
    916
    917	04DB  8A D8		     mov bl, al
    918	04DD  80 E3 07		     and bl, 00000111b
    919	04E0  80 FB 07		     cmp bl, 00000111b
    920	04E3  75 08		     jne rmNot111
    921	04E5  B7 06		     mov bh, 6
    922	04E7  BE 013Dr		     mov si, offset EAdress + 49
    923	04EA  E8 005B		     call fillRegBuffer
    924	04ED			     rmNot111:
    925
    926	04ED  5E		     pop si
    927	04EE  C3		     ret
    928	04EF			     scanRM ENDP
    929
    930				     ;---------
    931
    932				     ;formatavimo proceduros
    933	04EF			     printDoubleTab PROC
    934	04EF  51		      push cx
    935	04F0  50		      push ax
    936
    937	04F1  B9 0002		      mov cx, 2
    938	04F4  B4 40		      mov ah, 40h
    939	04F6  8B 1E 0155r	      mov bx, destFHandle
    940	04FA  BA 008Cr		      lea dx, line_doubleTab
    941	04FD  CD 21		      int 21h
    942
    943	04FF  58		      pop ax
    944	0500  59		      pop cx
    945	0501  C3		      ret
    946	0502			     printDoubleTab ENDP
    947
    948	0502			     printHNewline PROC
    949	0502  51		      push cx
    950	0503  B9 0003		      mov cx, 3
    951	0506  B4 40		      mov ah, 40h
    952	0508  8B 1E 0155r	      mov bx, destFHandle
    953	050C  BA 008Fr		      lea dx, line_hNewLine
    954	050F  CD 21		      int 21h
    955	0511  59		      pop cx
    956	0512  C3		      ret
    957	0513			     printHNewline ENDP
    958
    959	0513			     printNewline PROC
    960	0513  51		      push cx
    961	0514  B9 0002		      mov cx, 2
    962	0517  B4 40		      mov ah, 40h
    963	0519  8B 1E 0155r	      mov bx, destFHandle
    964	051D  BA 0093r		      lea dx, line_NewLine
    965	0520  CD 21		      int 21h
    966	0522  59		      pop cx
    967	0523  C3		      ret
    968	0524			     printNewline ENDP
    969
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 18
dis.ASM



    970	0524			     printDIstring PROC
    971	0524  51		      push cx
    972	0525  B5 00		      mov ch, 0
    973	0527  8A 0E 021Fr	      mov cl, [regBufferCount]
    974
    975	052B  B4 40		      mov ah, 40h
    976	052D  8B 1E 0155r	      mov bx, destFHandle
    977	0531  8B D7		      mov dx, di
    978	0533  CD 21		      int 21h
    979
    980	0535  59		      pop cx
    981	0536  C3		      ret
    982	0537			     printDIstring ENDP
    983
    984	0537			     printOperandSeparator PROC
    985	0537  51		      push cx
    986	0538  B9 0002		      mov cx, 2
    987	053B  B4 40		      mov ah, 40h
    988	053D  8B 1E 0155r	      mov bx, destFHandle
    989	0541  BA 0096r		      lea dx, line_OperandSeparator
    990	0544  CD 21		      int 21h
    991	0546  59		      pop cx
    992	0547  C3		      ret
    993	0548			     printOperandSeparator ENDP
    994
    995	0548			     fillRegBuffer PROC
    996
    997				     ;aprasysiu	tai pradzioj scan ciklo
    998					     ;lea di, regBuffer
    999	0548  51			     push cx
   1000	0549  56			     push si
   1001
   1002	054A  B5 00			     mov ch, 0
   1003	054C  8A CF			     mov cl, bh
   1004
   1005	054E				     pushToBuffer2:
   1006	054E  53			     push bx
   1007	054F  8A 1C			     mov bl, [si]
   1008	0551  88 1D			     mov [di], bl
   1009	0553  5B			     pop bx
   1010	0554  46			     inc si
   1011	0555  47			     inc di
   1012	0556  FE 06 021Fr		     inc [regBufferCount]
   1013	055A  E2 F2			     loop pushToBuffer2
   1014
   1015	055C  5E			     pop si
   1016	055D  59			     pop cx
   1017
   1018	055E  C3			     ret
   1019	055F			     fillRegBuffer ENDP
   1020
   1021				     end START
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 19
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/20/15"
??FILENAME			  Text	 "dis	  "
??TIME				  Text	 "19:33:28"
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DIS
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
APIE				  Byte	 DGROUP:0000
ATRENKA				  Near	 _TEXT:0050
BUFFER				  Byte	 DGROUP:0157
CLOSEF				  Near	 _TEXT:00C5
COM_IN				  Near	 _TEXT:02AD
COM_IN2				  Near	 _TEXT:01EF
COM_INT				  Near	 _TEXT:0288
COM_INT2			  Near	 _TEXT:0236
COM_IRET			  Near	 _TEXT:026B
COM_LES				  Near	 _TEXT:0370
COM_NAMES			  Byte	 DGROUP:00B6
COM_RECOGNIZED			  Near	 _TEXT:00AF
COM_UNK				  Near	 _TEXT:01A6
COM_XCHG			  Near	 _TEXT:0300
DESTF				  Byte	 DGROUP:014E
DESTFHANDLE			  Word	 DGROUP:0155
DHIGH				  Byte	 DGROUP:0221
DLOW				  Byte	 DGROUP:0220
EADRESS				  Byte	 DGROUP:010C
ERR_D				  Byte	 DGROUP:0012
ERR_DESTINATION			  Near	 _TEXT:00E8
ERR_S				  Byte	 DGROUP:0041
ERR_SOURCE			  Near	 _TEXT:00D2
FILLREGBUFFER			  Near	 _TEXT:0548
HELP				  Near	 _TEXT:00B6
HEXBUFFER			  Byte	 DGROUP:008A
HEX_MAP				  Byte	 DGROUP:0071
HEX_OUT				  Byte	 DGROUP:0081
INCLINENUMBER			  Near	 _TEXT:018B
INC_LINECOUNT			  Near	 _TEXT:00AF
INTEGERTOHEXFROMMAP		  Near	 _TEXT:011E
IN_AX				  Near	 _TEXT:02BB
LESMODNOT00			  Near	 _TEXT:03CF
LESREGNOT000			  Near	 _TEXT:0464
LESREGNOT001			  Near	 _TEXT:0452
LESREGNOT010			  Near	 _TEXT:0440
LESREGNOT011			  Near	 _TEXT:042E
LESREGNOT100			  Near	 _TEXT:041C
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 20
Symbol Table



LESREGNOT101			  Near	 _TEXT:040A
LESREGNOT110			  Near	 _TEXT:03F8
LESREGNOT111			  Near	 _TEXT:03E6
LINECOUNT			  Word	 DGROUP:006D
LINECOUNTH			  Word	 DGROUP:006F
LINESTRINGADD			  Byte	 DGROUP:0086
LINE_DOUBLETAB			  Byte	 DGROUP:008C
LINE_HNEWLINE			  Byte	 DGROUP:008F
LINE_IN				  Byte	 DGROUP:00B1
LINE_NEWLINE			  Byte	 DGROUP:0093
LINE_OPERANDSEPARATOR		  Byte	 DGROUP:0096
LINE_UNKN			  Byte	 DGROUP:0099
MOD11W0REG			  Byte	 DGROUP:00D9
MOD11W1REG			  Byte	 DGROUP:00F1
NEREIKTVARKYTIDIDELIOHEX	  Near	 _TEXT:01A1
NOT_ERR_SOURCE			  Near	 _TEXT:0036
NOT_IN				  Near	 _TEXT:0074
NOT_IN2				  Near	 _TEXT:0067
NOT_INT				  Near	 _TEXT:00A2
NOT_INT2			  Near	 _TEXT:0098
NOT_IRET			  Near	 _TEXT:008E
NOT_LES				  Near	 _TEXT:00AC
NOT_XCHG			  Near	 _TEXT:0084
PRINTDISTRING			  Near	 _TEXT:0524
PRINTDOUBLETAB			  Near	 _TEXT:04EF
PRINTHEXBYTE			  Near	 _TEXT:01D2
PRINTHNEWLINE			  Near	 _TEXT:0502
PRINTLINENUMBER			  Near	 _TEXT:0146
PRINTNEWLINE			  Near	 _TEXT:0513
PRINTOPERANDSEPARATOR		  Near	 _TEXT:0537
PRINT_IN			  Near	 _TEXT:02BE
PUSHTOBUFFER2			  Near	 _TEXT:054E
READTOBUFF			  Near	 _TEXT:01BE
READ_FILENAME			  Near	 _TEXT:0107
READ_FILENAME_END		  Near	 _TEXT:0115
READ_FILENAME_NEXT		  Near	 _TEXT:011A
READ_FILENAME_START		  Near	 _TEXT:010B
REGBUFFER			  Byte	 DGROUP:01BB
REGBUFFERCOUNT			  Byte	 DGROUP:021F
RMNOT000			  Near	 _TEXT:0481
RMNOT001			  Near	 _TEXT:0493
RMNOT010			  Near	 _TEXT:04A5
RMNOT011			  Near	 _TEXT:04B7
RMNOT100			  Near	 _TEXT:04C9
RMNOT101			  Near	 _TEXT:04DB
RMNOT110			  Near	 _TEXT:03CF
RMNOT111			  Near	 _TEXT:04ED
SCANREG				  Near	 _TEXT:03D3
SCANRM				  Near	 _TEXT:046E
SKAITOM				  Near	 _TEXT:0039
SKIPREFILLIN2			  Near	 _TEXT:01FA
SKIPREFILLINT2			  Near	 _TEXT:0241
SKIPREFILLLES			  Near	 _TEXT:037B
SKIPREFILLLES2			  Near	 _TEXT:03A5
SKIPREFILLLES3			  Near	 _TEXT:03B5
SKIP_SPACES			  Near	 _TEXT:00FE
SKIP_SPACES_END			  Near	 _TEXT:0106
Turbo Assembler	 Version 3.2	    12/20/15 19:33:28	    Page 21
Symbol Table



SKIP_SPACES_LOOP		  Near	 _TEXT:00FE
SOURCEF				  Byte	 DGROUP:0144
SOURCEFHANDLE			  Word	 DGROUP:014C
START				  Near	 _TEXT:0000
STARTCONVERTING			  Near	 _TEXT:0028
TEMP				  Byte	 DGROUP:0222
XCHGNOTAX			  Near	 _TEXT:0318
XCHGNOTCX			  Near	 _TEXT:0323
XCHGNOTDX			  Near	 _TEXT:032E
XCHGPRINT			  Near	 _TEXT:0334
_6				  Near	 _TEXT:0049
_END				  Near	 _TEXT:00CD

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  0225 Word	  Public  DATA
_TEXT				  16  055F Word	  Public  CODE
