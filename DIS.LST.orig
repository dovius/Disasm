<<<<<<< HEAD
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 1
dis.ASM
=======
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 1
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



      1				     ;;	Programa reaguoja i perduodamus	parametrus
      2				     ;;	isveda pagalba,	jei nera nurodyti reikiami parametrai
      3				     ;;	source failas skaitomas	dalimis
      4				     ;;	destination failas rasomas dalimis
      5				     ;;	jei destination	failas jau egzistuoja, jis yra isvalomas
      6				     ;;	jei source failas nenurodytas -	skaito iš stdin iki tuščios naujos eilutės
      7				     ;;	galima nurodyti	daugiau	nei vieną source failą - juos	sujungia
      8
      9				     ;skaitomos	komandos
     10				     ;div	1111 011w mod 110 r/m [poslinkis]
     11				     ;idiv    1111 011w	mod 111	r/m [poslinkis]
     12				     ;in      1110 110w	arba 1110 010w portas (vieno baito dydzio betarpiskas operandas)
     13				     ;iret	1100 1111
     14				     ;int	1100 1100 (INT 3) 11001101 kodas (visi kiti int	kur kodas-1 baitas)
     15				     ;les     1100 0100	mod reg	r/m [poslinkis]	 reg-<atm
     16				     ;xchg	1001 0000 (NOP/XCHG ax,ax) 1001	0xxx (x-registras, kai is x i ax)
     17				     ;xchg	1000 011w mod reg r/m [poslinkis] – XCHG registras  registras/atmintis
     18				     ;test	1000 010w mod reg r/m [poslinkis]
     19
     20	0000			     .model small
     21	0000			     .stack 100H
     22
     23	0000			     .data
     24
     25				     ;pranesimai
     26	0000  6D 69 6E 69 20 64	69+  apie		     db	'mini disasembleris'
     27	      73 61 73 65 6D 62	6C+
     28	      65 72 69 73
     29	0012  44 65 73 74 69 6E	61+  err_d		     db	'Destination failo nepavyko atidaryti rasymui',13,10,'$'
     30	      74 69 6F 6E 20 66	61+
     31	      69 6C 6F 20 6E 65	70+
     32	      61 76 79 6B 6F 20	61+
     33	      74 69 64 61 72 79	74+
     34	      69 20 72 61 73 79	6D+
     35	      75 69 0D 0A 24
     36	0041  53 6F 75 72 63 65	20+  err_s		     db	'Source	failo nepavyko atidaryti skaitymui',13,10,'$'
     37	      66 61 69 6C 6F 20	6E+
     38	      65 70 61 76 79 6B	6F+
     39	      20 61 74 69 64 61	72+
     40	      79 74 69 20 73 6B	61+
     41	      69 74 79 6D 75 69	0D+
     42	      0A 24
     43
     44				     ;skaitomos	eilutes	numerio	formavimas
     45	006D  0000		     lineCount	     dw	0   ;desinys  baitas eiles nr skaiciaus
     46	006F  0001		     lineCountH	     dw	1   ;kairys  baitas eiles nr skaiciaus
     47
     48				     ;hex skaiciaus spausdinimas
     49	0071  30 31 32 33 34 35	36+  HEX_Map   DB  '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
     50	      37 38 39 41 42 43	44+
     51	      45 46
     52	0081  30 30 0D 0A 24	     HEX_Out   DB  "00", 13, 10, '$'   ; string	with line feed and '$'-terminator
     53	0086  3A 20 20 24	     lineStringAdd db ':  ', '$'
     54	008A  20 24		     hexBuffer db ' ', '$'
     55
     56
     57				     ;formatavimas
<<<<<<< HEAD
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 2
dis.ASM
=======
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 2
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



     58	008C  09 09 24		     line_doubleTab db 9, 9, '$'
     59	008F  68 0D 0A 24	     line_hNewLine db 'h',13,10, '$'
     60	0093  0D 0A 24		     line_NewLine db 13,10,'$'
     61	0096  2C 20 24		     line_OperandSeparator db ',', ' ',	'$'
     62				     ;neatpazinta komanda
     63	0099  09 09 4E 65 61 74	70+  line_unkn db 9, 9,	'Neatpazinta komanda',13,10, '$'
     64	      61 7A 69 6E 74 61	20+
     65	      6B 6F 6D 61 6E 64	61+
     66	      0D 0A 24
     67
     68				     ;komandos-------------------------------
     69
     70	00B1  09 69 6E 09 24	     line_in db	9,'in',9,'$'
     71									     ;offset
     72	00B6  44 49 56 20	     com_names	     db	     'DIV '  ;0
     73	00BA  49 44 49 56 20			     db	     'IDIV ' ;4
     74	00BF  49 4E 24				     db	     'IN$'   ;9
     75	00C2  49 52 45 54 24			     db	     'IRET$' ;12
     76	00C7  49 4E 54 24			     db	     'INT$'  ;17
     77	00CB  4C 45 53 20			     db	     'LES '  ;21
     78	00CF  58 43 48 47 20			     db	     'XCHG ' ;26
     79	00D4  54 45 53 54 20			     db	     'TEST ' ;31
     80				     ;---------------------------------------
     81
     82				     ;registrai------------------------------
     83								     ;offset
     84	00D9  61 6C 24		     mod11w0reg	     db	'al$';0
     85	00DC  63 6C 24				     db	'cl$';3
     86	00DF  64 6C 24				     db	'dl$';6
     87	00E2  62 6C 24				     db	'bl$';9
     88	00E5  61 68 24				     db	'ah$';12
     89	00E8  63 68 24				     db	'ch$';15
     90	00EB  64 68 24				     db	'dh$';18
     91	00EE  62 68 24				     db	'bh$';21
     92	00F1  61 78 24		     mod11w1reg	     db	'ax$';0
     93	00F4  63 78 24				     db	'cx$';3
     94	00F7  64 78 24				     db	'dx$';6
     95	00FA  62 78 24				     db	'bx$';9
     96	00FD  73 70 24				     db	'sp$';12
     97	0100  62 70 24				     db	'bp$';15
     98	0103  73 69 24				     db	'si$';18
     99	0106  64 69 24				     db	'di$';21
    100	0109  2C 20 24				     db	', $';24
    101	010C  5B 62 78 2B 73 69	24   EAdress	     db	'[bx+si$' ;0
    102	0113  5B 62 78 2B 64 69	24		     db	'[bx+di$' ;7
    103	011A  5B 62 70 2B 73 69	24		     db	'[bp+si$' ;14
    104	0121  5B 62 70 2B 64 69	24		     db	'[bp+di$' ;21
    105	0128  5B 73 69 20 20 20	24		     db	'[si   $' ;28
    106	012F  5B 64 69 20 20 20	24		     db	'[di   $' ;35
    107	0136  5B 62 70 20 20 20	24		     db	'[bp   $' ;42
    108	013D  5B 62 78 20 20 20	24		     db	'[bx   $' ;49
    109
    110	0144  5B		     format db '[' ;0
    111	0145  5D				      db ']' ;1
    112	0146  2B				      db '+' ;2
    113				     ;---------------------------------------
    114
<<<<<<< HEAD
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 3
dis.ASM
=======
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 3
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



    115
    116
    117
    118	0147  0C*(00)		     sourceF	     db	12 dup (0)
    119	0153  ????		     sourceFHandle   dw	?
    120
    121	0155  0C*(00)		     destF	     db	12 dup (0)
    122	0161  ????		     destFHandle     dw	?
    123
    124	0163  64*(??)		     buffer    db 100 dup (?)
    125	01C7  64*(??)		     regBuffer db 100 dup (?)
    126	022B  00		     regBufferCount db 0
    127
    128	022C  00		     keyFlag db	0
    129
    130				     ; poslinkio bitai
    131	022D  00		     dLow    db	0
    132	022E  00		     dHigh db 0
    133
    134	022F  61 62 63		     temp db 'abc'
    135	0232  00		     wFlag db 0
    136
    137	0233			     .code
    138
    139	0000			     START:
    140	0000  B8 0000s		     mov     ax, @data
    141	0003  8E C0		     mov     es, ax		     ; es kad galetume naudot stosb funkcija: Store AL at address   +
    142				     ES:(E)DI
    143				     ;-------------------------
    144	0005  BE 0081		     mov     si, 81h
    145	0008  E8 019F		     call    skip_spaces
    146	000B  8A 04		     mov     al, byte ptr ds:[si]    ; nuskaityti pirma	parametro simboli
    147	000D  3C 0D		     cmp     al, 13		     ; jei nera	parametru
    148	000F  75 03		     jne     _1
    149	0011  E9 014E		     jmp     help		     ; tai isvesti pagalba
    150
    151	0014			     _1:
    152
<<<<<<< HEAD
    153				     ;;	ar reikia isvesti pagalba
    154	0014  8B 04		     mov     ax, word ptr ds:[si]
    155	0016  3D 3F2F		     cmp     ax, 3F2Fh		     ; jei nuskaityta "/?" - 3F	= '?'; 2F = '/'
    156	0019  75 03		     jne     _2
    157	001B  E9 0144		     jmp     help		     ; rastas "/?", vadinasi reikia isvesti pagalba
    158	001E			     _2:
    159
    160				     ;;	destination failo pavadinimas
    161	001E  BF 0155r		     lea     di, destF
    162	0021  E8 018F		     call    read_filename	     ; perkelti	is parametro i eilute
    163	0024  26: 80 3E	0155r 24     cmp     byte ptr es:[destF], '$' ;	jei nieko nenuskaite
    164	002A  75 03		     jne     _3
    165	002C  E9 0133		     jmp     help
    166	002F			     _3:
    167
    168				     ;;	source failo pavadinimas
    169	002F  BF 0147r		     lea     di, sourceF
    170	0032  E8 017E		     call    read_filename	     ; perkelti	is parametro i eilute
    171
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 4
dis.ASM



    172	0035  1E		     push    ds
    173	0036  56		     push    si
    174
    175	0037  B8 0000s		     mov     ax, @data
    176	003A  8E D8		     mov     ds, ax
=======
    153					     ;;	ar reikia isvesti pagalba
    154	0014  8B 04			     mov     ax, word ptr ds:[si]
    155	0016  3D 3F2F			     cmp     ax, 3F2Fh		     ; jei nuskaityta "/?" - 3F	= '?'; 2F = '/'
    156	0019  75 03			     jne     _2
    157	001B  E9 0144			     jmp     help		     ; rastas "/?", vadinasi reikia isvesti pagalba
    158	001E			     _2:
    159
    160					     ;;	destination failo pavadinimas
    161	001E  BF 0155r			     lea     di, destF
    162	0021  E8 018F			     call    read_filename	     ; perkelti	is parametro i eilute
    163	0024  26: 80 3E	0155r 24	     cmp     byte ptr es:[destF], '$' ;	jei nieko nenuskaite
    164	002A  75 03			     jne     _3
    165	002C  E9 0133			     jmp     help
    166	002F			     _3:
    167
    168					     ;;	source failo pavadinimas
    169	002F  BF 0147r			     lea     di, sourceF
    170	0032  E8 017E			     call    read_filename	     ; perkelti	is parametro i eilute
    171
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 4
dis.asm



    172	0035  1E			     push    ds
    173	0036  56			     push    si
    174
    175	0037  B8 0000s			     mov     ax, @data
    176	003A  8E D8			     mov     ds, ax
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
    177				     ;--------------------
    178
    179
    180
    181				     ;;	rasymui
    182	003C  BA 0155r		     mov     dx, offset	destF	     ; ikelti i	dx destF - failo pavadinima
    183	003F  B4 3C		     mov     ah, 3ch		     ; isvalo/sukuria faila - komandos kodas
    184	0041  B9 0000		     mov     cx, 0		     ; normal -	no attributes
    185	0044  CD 21		     int     21h		     ; INT 21h / AH= 3Ch - create or truncate file.
    186
    187
    188	0046  73 03		     jnc     _4			     ; CF set on error AX = error code.
    189	0048  E9 0149		     jmp     err_destination
    190
    191	004B			     _4:
    192
    193	004B  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    194	004D  B0 01		     mov     al, 1		     ; rasymui
    195	004F  CD 21		     int     21h		     ; INT 21h / AH= 3Dh - open	existing file.
    196
    197	0051  73 03		     jnc     _5			     ; CF set on error AX = error code.
    198	0053  E9 013E		     jmp     err_destination
    199
    200	0056			     _5:
    201	0056  A3 0161r		     mov     destFHandle, ax	     ; issaugom	handle
    202
    203	0059  EB 1A 90		     jmp     startConverting
    204
    205	005C			     readSourceFile:
<<<<<<< HEAD
    206	005C  5E		     pop     si
    207	005D  1F		     pop     ds
    208
    209				     ;;	source failo pavadinimas
    210	005E  BF 0147r		     lea     di, sourceF
    211	0061  E8 014F		     call    read_filename	     ; perkelti	is parametro i eilute
    212
    213	0064  1E		     push    ds
    214	0065  56		     push    si
    215
    216	0066  B8 0000s		     mov     ax, @data
    217	0069  8E D8		     mov     ds, ax
    218
    219	006B  80 3E 0147r 24	     cmp     byte ptr ds:[sourceF], '$'	; jei nieko nenuskaite
    220	0070  75 03		     jne     startConverting
    221	0072  E9 00FC		     jmp     closeF
    222
    223	0075			     startConverting:
    224				     ;;	atidarom
    225	0075  80 3E 0147r 24	     cmp     byte ptr ds:[sourceF], '$'	; jei nieko nenuskaite
    226	007A  75 0E		     jne     source_from_file
    227
    228	007C  C7 06 0153r 0000	     mov     sourceFHandle, 0
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 5
dis.ASM



    229	0082  C6 06 022Cr 01	     mov keyFlag, 1
    230	0087  EB 12 90		     jmp     skaitom
    231
    232	008A			     source_from_file:
    233	008A  BA 0147r		     mov     dx, offset	sourceF	     ; failo pavadinimas
    234	008D  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    235	008F  B0 00		     mov     al, 0		     ; 0 - reading, 1-writing, 2-abu
    236	0091  CD 21		     int     21h		     ; INT 21h / AH= 3Dh - open	existing file
    237	0093  73 03		     jnc     not_err_source	     ; CF set on error AX = error code.
    238	0095  E9 00E6		     jmp err_source
    239	0098			     not_err_source:
    240	0098  A3 0153r		     mov     sourceFHandle, ax	     ; issaugojam filehandle
=======
    206	005C  5E			     pop     si
    207	005D  1F			     pop     ds
    208
    209					     ;;	source failo pavadinimas
    210	005E  BF 0147r			     lea     di, sourceF
    211	0061  E8 014F			     call    read_filename	     ; perkelti	is parametro i eilute
    212
    213	0064  1E			     push    ds
    214	0065  56			     push    si
    215
    216	0066  B8 0000s			     mov     ax, @data
    217	0069  8E D8			     mov     ds, ax
    218
    219	006B  80 3E 0147r 24		     cmp     byte ptr ds:[sourceF], '$'	; jei nieko nenuskaite
    220	0070  75 03			     jne     startConverting
    221	0072  E9 00FC			     jmp     closeF
    222
    223	0075			     startConverting:
    224					     ;;	atidarom
    225	0075  80 3E 0147r 24		     cmp     byte ptr ds:[sourceF], '$'	; jei nieko nenuskaite
    226	007A  75 0E			     jne     source_from_file
    227
    228	007C  C7 06 0153r 0000		     mov     sourceFHandle, 0
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 5
dis.asm



    229	0082  C6 06 022Cr 01		     mov keyFlag, 1
    230	0087  EB 12 90			     jmp     skaitom
    231
    232	008A				     source_from_file:
    233	008A  BA 0147r			     mov     dx, offset	sourceF	     ; failo pavadinimas
    234	008D  B4 3D			     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    235	008F  B0 00			     mov     al, 0		     ; 0 - reading, 1-writing, 2-abu
    236	0091  CD 21			     int     21h		     ; INT 21h / AH= 3Dh - open	existing file
    237	0093  73 03			     jnc     not_err_source	     ; CF set on error AX = error code.
    238	0095  E9 00E6			     jmp err_source
    239	0098				     not_err_source:
    240	0098  A3 0153r			     mov     sourceFHandle, ax	     ; issaugojam filehandle
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
    241
    242	009B			     skaitom:
    243
    244	009B  E8 01CE		     call readToBuff
    245
    246	009E  75 0B		     jne     _6			     ; tai ne pabaiga
    247
    248	00A0  8B 1E 0153r	     mov     bx, sourceFHandle	     ; pabaiga skaitomo	failo
    249	00A4  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    250	00A6  CD 21		     int     21h
    251	00A8  E9 00C6		     jmp closeF
    252
    253	00AB			     _6:
    254	00AB  BE 0163r		     mov     si, offset	buffer	     ; skaitoma	is cia
    255	00AE  8B 1E 0161r	     mov     bx, destFHandle	     ; rasoma i	cia
    256
    257
    258				     ; cia prasideda pagrindine	logika (apdoroja kiekviena baita)
    259	00B2			     atrenka:
<<<<<<< HEAD
    260	00B2  E8 0A26		     call keyboard_hex				     ; Load byte at address DS:(E)SI into AL
=======
    260	00B2  E8 09FC		     call keyboard_hex				     ; Load byte at address DS:(E)SI into AL
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
    261
    262
    263	00B5  BF 01C7r		     lea di, regBuffer
    264	00B8  E8 0139		     call printLineNumber
    265
    266				     ;in portas****************************
    267	00BB  8A D8		     mov bl, al
    268	00BD  80 E3 FE		     and bl, 11111110b
    269	00C0  80 FB E4		     cmp bl, 11100100b
    270	00C3  75 06		     jne not_in2
    271	00C5  E8 01D5		     call com_in2
    272	00C8  E9 0088		     jmp com_recognized
    273	00CB			     not_in2:
    274
    275				     ;in be porto**************************
    276	00CB  8A D8		     mov bl, al
    277	00CD  80 FB EC		     cmp bl, 11101100b
    278	00D0  75 06		     jne not_in
    279	00D2  E8 028A		     call com_in
    280	00D5  EB 7C 90		     jmp com_recognized
    281	00D8			     not_in:
    282
    283				     ;XCHG********************************
    284	00D8  8A D8		     mov bl, al
    285	00DA  80 E3 F8		     and bl, 11111000b
<<<<<<< HEAD
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 6
dis.ASM
=======
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 6
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



    286	00DD  80 FB 90		     cmp bl, 10010000b
    287	00E0  75 06		     jne not_xchg
    288	00E2  E8 02CD		     call com_xchg
    289	00E5  EB 6C 90		     jmp com_recognized
    290	00E8			     not_xchg:
    291
    292				     ;IRET********************************
    293	00E8  3C CF		     cmp al, 11001111b
    294	00EA  75 06		     jne not_iret
    295	00EC  E8 022E		     call com_iret
    296	00EF  EB 62 90		     jmp com_recognized
    297	00F2			     not_iret:
    298
    299				     ;INT su kodu************************
    300	00F2  3C CD		     cmp al, 11001101b
    301	00F4  75 06		     jne not_int2
    302	00F6  E8 01ED		     call com_int2
    303	00F9  EB 58 90		     jmp com_recognized
    304	00FC			     not_int2:
    305
    306				     ; INT 3*****************************
    307	00FC  3C CC		     cmp al, 11001100b
    308	00FE  75 06		     jne not_int
    309	0100  E8 0237		     call com_int
    310	0103  EB 4E 90		     jmp com_recognized
    311	0106			     not_int:
    312
    313				     ; LES*******************************
    314	0106  3C C4		     cmp al, 11000100b
    315	0108  75 06		     jne not_les
<<<<<<< HEAD
    316	010A  E8 0455		     call com_les
=======
    316	010A  E8 042B		     call com_les
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
    317				     ;jmp not_les
    318	010D  EB 44 90		     jmp com_recognized
    319	0110			     not_les:
    320
    321	0110  8A D8		     mov bl, al
    322	0112  80 E3 FE		     and bl, 11111110b
    323	0115  80 FB F6		     cmp bl, 11110110b
    324	0118  75 06		     jne not_div
    325	011A  E8 0370		     call com_div
    326	011D  EB 34 90		     jmp com_recognized
    327	0120			     not_div:
    328
    329	0120  8A D8		     mov bl, al
    330	0122  80 E3 FE		     and bl, 11111110b
    331	0125  80 FB 84		     cmp bl, 10000100b
    332	0128  75 06		     jne not_test1
    333	012A  E8 0321		     call com_test1
    334	012D  EB 24 90		     jmp com_recognized
    335	0130			     not_test1:
    336
    337				     ;test2*********************
    338	0130  8A D8		     mov bl, al
    339	0132  80 E3 FE		     and bl, 11111110b
    340	0135  80 FB A8		     cmp bl, 10101000b
    341	0138  75 06		     jne not_test2
<<<<<<< HEAD
    342	013A  E8 08E5		     call com_test2
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 7
dis.ASM
=======
    342	013A  E8 08BB		     call com_test2
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 7
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



    343	013D  EB 14 90		     jmp com_recognized
    344	0140			     not_test2:
    345
    346	0140  8A D8		     mov bl, al
    347	0142  80 E3 FE		     and bl, 11111110b
    348	0145  80 FB 86		     cmp bl, 10000110b
    349	0148  75 06		     jne not_xchg2
<<<<<<< HEAD
    350	014A  E8 0896		     call com_xchg2
=======
    350	014A  E8 086C		     call com_xchg2
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
    351	014D  EB 04 90		     jmp com_recognized
    352	0150			     not_xchg2:
    353
    354
    355				     ; Nezinoma	komanda******************
    356	0150  E8 0101		     call com_unk
    357
    358	0153			     com_recognized:
    359
    360	0153			     inc_lineCount:
    361	0153  E8 00E3		     call incLineNumber
    362
    363
    364	0156  49		     dec cx
    365	0157  83 F9 00		     cmp cx, 0
    366	015A  74 03		     je	baigemLoop
    367	015C  E9 FF53		     jmp     atrenka
    368
    369	015F			     baigemLoop:
    370
    371	015F  E9 FF39		     jmp skaitom
    372
    373
    374
    375
    376				     ;----------------------------------
    377	0162			     help:
    378	0162  B8 0000s		     mov     ax, @data
    379	0165  8E D8		     mov     ds, ax
    380
    381	0167  BA 0000r		     mov     dx, offset	apie
    382	016A  B4 09		     mov     ah, 09h
    383	016C  CD 21		     int     21h
    384
    385	016E  EB 09 90		     jmp     _end
    386
    387	0171			     closeF:
    388				     ;;	uzdaryti dest
    389	0171  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    390	0173  8B 1E 0161r	     mov     bx, destFHandle
    391	0177  CD 21		     int     21h
    392
    393	0179			     _end:
    394	0179  B8 4C00		     mov     ax, 4c00h
    395	017C  CD 21		     int     21h
    396
    397	017E			     err_source:
    398	017E  B8 0000s		     mov     ax, @data
    399	0181  8E D8		     mov     ds, ax
<<<<<<< HEAD
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 8
dis.ASM
=======
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 8
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



    400
    401	0183  BA 0041r		     mov     dx, offset	err_s
    402	0186  B4 09		     mov     ah, 09h
    403	0188  CD 21		     int     21h
    404
    405	018A  BA 0147r		     mov     dx, offset	sourceF
    406	018D  CD 21		     int     21h
    407
    408	018F  B8 4C01		     mov     ax, 4c01h
    409	0192  CD 21		     int     21h
    410
    411	0194			     err_destination:
    412	0194  B8 0000s		     mov     ax, @data
    413	0197  8E D8		     mov     ds, ax
    414
    415	0199  BA 0012r		     mov     dx, offset	err_d
    416	019C  B4 09		     mov     ah, 09h
    417	019E  CD 21		     int     21h
    418
    419	01A0  BA 0155r		     mov     dx, offset	destF
    420	01A3  CD 21		     int     21h
    421
    422	01A5  B8 4C02		     mov     ax, 4c02h
    423	01A8  CD 21		     int     21h
    424
    425
    426				     ;;	procedures
    427
    428	01AA			     skip_spaces PROC near
    429
    430	01AA			     skip_spaces_loop:
    431	01AA  80 3C 20		     cmp byte ptr ds:[si], ' '
    432	01AD  75 03		     jne skip_spaces_end
    433	01AF  46		     inc si
    434	01B0  EB F8		     jmp skip_spaces_loop
    435	01B2			     skip_spaces_end:
    436	01B2  C3		     ret
    437
    438	01B3			     skip_spaces ENDP
    439
    440	01B3			     read_filename PROC	near
    441
    442	01B3  50		     push    ax
    443	01B4  E8 FFF3		     call    skip_spaces
    444	01B7			     read_filename_start:
    445	01B7  80 3C 0D		     cmp     byte ptr ds:[si], 13    ; jei nera	parametru
    446	01BA  74 05		     je	     read_filename_end	     ; tai taip, tai baigtas failo vedimas
    447	01BC  80 3C 20		     cmp     byte ptr ds:[si], ' '   ; jei tarpas
    448	01BF  75 05		     jne     read_filename_next	     ; tai praleisti visus tarpus, ir sokti prie kito parametro
    449	01C1			     read_filename_end:
    450	01C1  B0 24		     mov     al, '$'		     ; irasyti '$' gale
    451	01C3  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    452	01C4  58		     pop     ax
    453	01C5  C3		     ret
    454	01C6			     read_filename_next:
<<<<<<< HEAD
    455	01C6  E8 0912		     call keyboard_hex				     ; uzkrauna	kita simboli
    456	01C9  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 9
dis.ASM
=======
    455	01C6  E8 08E8		     call keyboard_hex				     ; uzkrauna	kita simboli
    456	01C9  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 9
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



    457	01CA  EB EB		     jmp read_filename_start
    458
    459	01CC			     read_filename ENDP
    460
    461
    462	01CC			     IntegerToHexFromMap PROC
<<<<<<< HEAD
    463	01CC  56			     push si
    464	01CD  57			     push di
    465
    466	01CE  BE 0071r			     mov si, OFFSET Hex_Map	     ; Pointer to hex-character	table
    467
    468	01D1  8B D8			     mov bx, ax			     ; BX = argument AX
    469	01D3  81 E3 00FF		     and bx, 00FFh		     ; Clear BH	(just to be on the safe	side)
    470	01D7  D1 EB D1 EB D1 EB	D1+	     shr bx, 4			     ; Isolate high nibble (i.e. 4 bits)
    471	      EB
    472	01DF  8A 10			     mov dl, [si+bx]		     ; Read hex-character from the table
    473	01E1  88 15			     mov [di+0], dl		     ; Store character at the first place in the output	    +
    474				     string
    475
    476	01E3  8B D8			     mov bx, ax			     ; BX = argument AX	(just to be on the safe	side)
    477	01E5  81 E3 00FF		     and bx, 00FFh		     ; Clear BH	(just to be on the safe	side)
    478	01E9  80 E3 0F			     and bl, 0Fh		     ; Isolate low nibble (i.e.	4 bits)
    479	01EC  8A 10			     mov dl, [si+bx]		     ; Read hex-character from the table
    480	01EE  88 55 01			     mov [di+1], dl		     ; Store character at the second place in the output    +
    481				     string
    482
    483	01F1  5F			     pop di
    484	01F2  5E			     pop si
    485	01F3  C3			     ret
    486	01F4			     IntegerToHexFromMap ENDP
    487
    488	01F4			     printLineNumber PROC
    489
    490	01F4  51		     push cx
    491	01F5  56		     push si
    492	01F6  50		     push ax
    493	01F7  57		     push di
    494
    495	01F8  BF 0081r		     mov di, OFFSET HEX_Out	     ; First argument: pointer
    496	01FB  A1 006Fr		     mov ax, lineCountH		      ;	Second argument: Integer
    497	01FE  E8 FFCB		     call IntegerToHexFromMap
    498
    499	0201  B9 0002		     mov cx, 2
    500	0204  B4 40		     mov     ah, 40h
    501	0206  8B 1E 0161r	     mov bx, destFHandle
    502	020A  BA 0081r		     lea dx, HEX_Out
    503	020D  CD 21		     int 21h
    504
    505	020F  BF 0081r		     mov di, OFFSET HEX_Out	     ; First argument: pointer
    506	0212  A1 006Dr		     mov ax, lineCount		     ; Second argument:	Integer
    507	0215  E8 FFB4		     call IntegerToHexFromMap
    508
    509	0218  B9 0002		     mov cx, 2
    510	021B  B4 40		     mov     ah, 40h
    511	021D  8B 1E 0161r	     mov bx, destFHandle
    512	0221  BA 0081r		     lea dx, HEX_Out
    513	0224  CD 21		     int 21h
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 10
dis.ASM



    514
    515	0226  B9 0003		     mov cx, 3
    516	0229  B4 40		     mov ah, 40h
    517	022B  8B 1E 0161r	     mov bx, destFHandle
    518	022F  BA 0086r		     lea dx, lineStringAdd
    519	0232  CD 21		     int 21h
    520
    521	0234  5F		     pop di
    522	0235  58		     pop ax
    523	0236  5E		     pop si
    524	0237  59		     pop cx
    525	0238  C3		     ret
    526	0239			     printLineNumber ENDP
    527
    528	0239			     incLineNumber PROC
    529				     ; --- jei lineCount=255 ir	norim INC, reikia ji prilygint 0 ir lineCountH ++
    530	0239  81 3E 006Dr 00FF	     cmp [lineCount], 255
    531	023F  75 0E		     jne nereikTvarkytiDidelioHex
    532	0241  C7 06 006Dr 0000	     mov [lineCount], 0
    533	0247  FF 06 006Fr	     inc [lineCountH]
    534	024B  FF 0E 006Dr	     dec [lineCount]
    535	024F			     nereikTvarkytiDidelioHex:
    536	024F  FF 06 006Dr	     inc [lineCount]
    537				     ; ---
    538	0253  C3		     ret
    539	0254			     incLineNumber ENDP
    540
    541
    542	0254			     com_unk PROC
    543	0254  57		     push di
    544	0255  E8 0028		     call printHexByte
    545	0258  51		     push cx
    546	0259  50		     push ax
    547
    548	025A  B9 0017		     mov cx, 23
    549	025D  B4 40		     mov ah, 40h
    550	025F  8B 1E 0161r	     mov bx, destFHandle
    551	0263  BA 0099r		     lea dx, line_unkn
    552	0266  CD 21		     int 21h
    553
    554	0268  58		     pop ax
    555	0269  59		     pop cx
    556	026A  5F		     pop di
    557	026B  C3		     ret
    558	026C			     com_unk ENDP
    559
    560	026C			     readToBuff	PROC
    561	026C  8B 1E 0153r	     mov     bx, sourceFHandle
    562	0270  BA 0163r		     mov     dx, offset	buffer	     ; address of buffer in dx
    563	0273  B9 0064		     mov     cx, 100			     ; kiek baitu nuskaitysim
    564	0276  B4 3F		     mov     ah, 3fh		     ; function	3Fh - read from	file
    565	0278  CD 21		     int     21h
    566
    567	027A  8B C8		     mov     cx, ax		     ; bytes actually read
    568	027C  3D 0000		     cmp     ax, 0
    569	027F  C3		     ret
    570	0280			     readToBuff	ENDP
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 11
dis.ASM



    571
    572	0280			     printHexByte PROC
    573	0280  51		     push cx
    574	0281  50		     push ax
    575	0282  57		     push di
    576	0283  53		     push bx
    577
    578	0284  BF 0081r		     mov di, OFFSET HEX_Out
    579	0287  E8 FF42		     call IntegerToHexFromMap
    580	028A  B9 0002		     mov cx, 2
    581	028D  B4 40		     mov ah, 40h
    582	028F  8B 1E 0161r	     mov bx, destFHandle
    583	0293  BA 0081r		     lea dx, HEX_Out
    584	0296  CD 21		     int 21h
    585
    586	0298  5B		     pop bx
    587	0299  5F		     pop di
    588	029A  58		     pop ax
    589	029B  59		     pop cx
    590	029C  C3		     ret
    591	029D			     printHexByte ENDP
    592
    593
    594				     ;------------- IN su portu
    595	029D			     com_in2 PROC
    596	029D  E8 FFE0		     call printHexByte
    597	02A0  83 F9 01		     cmp cx, 1
    598	02A3  75 03		     jne skipRefillin2
    599	02A5  E8 FFC4		     call readToBuff
    600	02A8			     skipRefillin2:
    601	02A8  E8 0830		     call keyboard_hex
    602	02AB  50		     push ax
    603	02AC  49		     dec cx
    604	02AD  E8 FFD0		     call printHexByte
    605	02B0  E8 FF86		     call incLineNumber
    606	02B3  E8 0560		     call printDoubleTab
    607				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    608	02B6  51		     push cx
    609	02B7  B9 0002		     mov cx, 2
    610	02BA  B4 40		     mov ah, 40h
    611	02BC  8B 1E 0161r	     mov bx, destFHandle
    612	02C0  BA 00BFr		     mov dx, offset com_names +	9
    613	02C3  CD 21		     int 21h
    614	02C5  59		     pop cx
    615
    616	02C6  E8 054D		     call printDoubleTab
    617
    618	02C9  51		     push cx
    619	02CA  B9 0002		     mov cx, 2
    620	02CD  B4 40		     mov ah, 40h
    621	02CF  8B 1E 0161r	     mov bx, destFHandle
    622	02D3  BA 00D9r		     mov dx, offset mod11w0reg + 0
    623	02D6  CD 21		     int 21h
    624	02D8  59		     pop cx
    625
    626	02D9  E8 05E4		     call printOperandSeparator
    627
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 12
dis.ASM



    628	02DC  58		     pop ax
    629	02DD  E8 FFA0		     call printHexByte
    630	02E0  E8 0546		     call printHNewline
    631	02E3  E9 FE6D		     jmp inc_lineCount
    632	02E6			     com_in2 ENDP
    633				     ;---------
    634
    635				     ;------------- INT	su kodu
    636	02E6			     com_int2 PROC
    637	02E6  E8 FF97		     call printHexByte
    638	02E9  83 F9 01		     cmp cx, 1
    639	02EC  75 03		     jne skipRefillint2
    640	02EE  E8 FF7B		     call readToBuff
    641	02F1			     skipRefillint2:
    642	02F1  E8 07E7		     call keyboard_hex
    643	02F4  50		     push ax
    644	02F5  49		     dec cx
    645	02F6  E8 FF87		     call printHexByte
    646	02F9  E8 FF3D		     call incLineNumber
    647	02FC  E8 0517		     call printDoubleTab
    648				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    649	02FF  51		     push cx
    650	0300  B9 0003		     mov cx, 3
    651	0303  B4 40		     mov ah, 40h
    652	0305  8B 1E 0161r	     mov bx, destFHandle
    653	0309  BA 00C7r		     mov dx, offset com_names +	17
    654	030C  CD 21		     int 21h
    655	030E  59		     pop cx
    656
    657	030F  E8 0504		     call printDoubleTab
    658	0312  58		     pop ax
    659	0313  E8 FF6A		     call printHexByte
    660	0316  E8 0510		     call printHNewline
    661	0319  E9 FE37		     jmp inc_lineCount
    662	031C  C3		     ret
    663	031D			     com_int2 ENDP
    664				     ;---------
    665
    666				     ;----------------------IRET
    667	031D			     com_iret PROC
    668	031D  E8 FF60		     call printHexByte
    669	0320  E8 04F3		     call printDoubleTab
    670	0323  51		     push cx
    671	0324  B9 0004		     mov cx, 4
    672	0327  B4 40		     mov ah, 40h
    673	0329  8B 1E 0161r	     mov bx, destFHandle
    674	032D  BA 00C2r		     mov dx, offset com_names +	12
    675	0330  CD 21		     int 21h
    676	0332  59		     pop cx
    677	0333  E8 0504		     call printNewline
    678	0336  E9 FE1A		     jmp inc_lineCount
    679	0339  C3		     ret
    680	033A			     com_iret ENDP
    681				     ;---------
    682
    683				     ;----------------------INT	3
    684	033A			     com_int PROC
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 13
dis.ASM



    685	033A  E8 FF43		     call printHexByte
    686	033D  E8 04D6		     call printDoubleTab
    687	0340  51		     push cx
    688	0341  B9 0003		     mov cx, 3
    689	0344  B4 40		     mov ah, 40h
    690	0346  8B 1E 0161r	     mov bx, destFHandle
    691	034A  BA 00C7r		     mov dx, offset com_names +	17
    692	034D  CD 21		     int 21h
    693	034F  59		     pop cx
    694	0350  E8 04C3		     call printDoubleTab
    695	0353  B0 03		     mov al, 03h
    696	0355  E8 FF28		     call printHexByte
    697	0358  E8 04DF		     call printNewline
    698	035B  E9 FDF5		     jmp inc_lineCount
    699	035E  C3		     ret
    700	035F			     com_int ENDP
    701				     ;---------
    702
    703				     ;----------------------IN
    704	035F			     com_in PROC
    705	035F  80 E3 01		     and bl, 00000001b
    706	0362  80 FB 00		     cmp bl, 0
    707	0365  75 06		     jne in_ax
    708	0367  BA 00D9r		     mov dx, offset mod11w0reg+0
    709	036A  EB 04 90		     jmp print_in
    710	036D			     in_ax:
    711	036D  BA 00F1r		     mov dx, offset mod11w1reg+0
    712	0370			     print_in:
    713	0370  52		     push dx
    714	0371  E8 FF0C		     call printHexByte
    715	0374  E8 049F		     call printDoubleTab
    716	0377  51		     push cx
    717	0378  B9 0002		     mov cx, 2
    718	037B  B4 40		     mov ah, 40h
    719	037D  8B 1E 0161r	     mov bx, destFHandle
    720	0381  BA 00BFr		     mov dx, offset com_names +	9
    721	0384  CD 21		     int 21h
    722	0386  59		     pop cx
    723	0387  E8 048C		     call printDoubleTab
    724
    725	038A  5A		     pop dx
    726	038B  51		     push cx
    727	038C  B9 0002		     mov cx, 2
    728	038F  B4 40		     mov ah, 40h
    729	0391  8B 1E 0161r	     mov bx, destFHandle
    730	0395  CD 21		     int 21h
    731	0397  59		     pop cx
    732	0398  E8 0525		     call printOperandSeparator
    733	039B  51		     push cx
    734	039C  B9 0002		     mov cx, 2
    735	039F  B4 40		     mov ah, 40h
    736	03A1  8B 1E 0161r	     mov bx, destFHandle
    737	03A5  BA 00F7r		     mov dx, offset mod11w1reg + 6
    738	03A8  CD 21		     int 21h
    739	03AA  59		     pop cx
    740
    741	03AB  E8 048C		     call printNewline
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 14
dis.ASM



    742	03AE  E9 FDA2		     jmp inc_lineCount
    743	03B1  C3		     ret
    744	03B2			     com_in ENDP
    745				     ;---------
    746
    747				     ;----------------------XCHG
    748	03B2			     com_xchg PROC
    749	03B2  50		     push ax
    750	03B3  E8 FECA		     call printHexByte
    751	03B6  E8 045D		     call printDoubleTab
    752	03B9  58		     pop ax
    753	03BA  8A D8		     mov bl, al
    754	03BC  80 E3 07		     and bl, 00000111b
    755	03BF  80 FB 00		     cmp bl, 00000000b ; ax is ax
    756	03C2  75 06		     jne xchgnotax
    757	03C4  BA 00F1r		     mov dx, offset mod11w1reg + 0
    758	03C7  EB 49 90		     jmp xchgprint
    759	03CA			     xchgnotax:
    760	03CA  80 FB 01		     cmp bl, 00000001b ; cx is ax
    761	03CD  75 06		     jne xchgnotcx
    762	03CF  BA 00F4r		     mov dx, offset mod11w1reg + 3
    763	03D2  EB 3E 90		     jmp xchgprint
    764
    765	03D5			     xchgnotcx:
    766	03D5  80 FB 02		     cmp bl, 00000010b ; dx is ax
    767	03D8  75 06		     jne xchgnotdx
    768	03DA  BA 00F7r		     mov dx, offset mod11w1reg + 6
    769	03DD  EB 33 90		     jmp xchgprint
    770
    771	03E0			     xchgnotdx:	; bx is	ax
    772	03E0  80 FB 03		     cmp bl, 00000011b ; dx is ax
    773	03E3  75 06		     jne xchgnotbx
    774	03E5  BA 00FAr		     mov dx, offset mod11w1reg + 9
    775	03E8  EB 28 90		     jmp xchgprint
    776
    777	03EB			     xchgnotbx:
    778	03EB  80 FB 03		     cmp bl, 00000011b ; sp is ax
    779	03EE  75 06		     jne xchgnotsp
    780	03F0  BA 00FDr		     mov dx, offset mod11w1reg + 12
    781	03F3  EB 1D 90		     jmp xchgprint
    782
    783	03F6			     xchgnotsp:
    784	03F6  80 FB 04		     cmp bl, 00000100b
    785	03F9  75 06		     jne xchgnotbp
    786	03FB  BA 0100r		     mov dx, offset mod11w1reg + 15
    787	03FE  EB 12 90		     jmp xchgprint
    788
    789	0401			     xchgnotbp:
    790	0401  80 FB 05		     cmp bl, 00000101b
    791	0404  75 06		     jne xchgnotsi
    792	0406  BA 0103r		     mov dx, offset mod11w1reg + 18
    793	0409  EB 07 90		     jmp xchgprint
    794
    795	040C			     xchgnotsi:
    796	040C  BA 0106r		     mov dx, offset mod11w1reg + 21
    797	040F  EB 01 90		     jmp xchgprint
    798
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 15
dis.ASM



    799
    800	0412			     xchgprint:
    801	0412  52		     push dx
    802
    803	0413  51		     push cx
    804	0414  B9 0004		     mov cx, 4
    805	0417  B4 40		     mov ah, 40h
    806	0419  8B 1E 0161r	     mov bx, destFHandle
    807	041D  BA 00CFr		     mov dx, offset com_names +	25
    808	0420  CD 21		     int 21h
    809	0422  59		     pop cx
    810
    811
    812	0423  E8 03F0		     call printDoubleTab
    813
    814
    815	0426  BA 00F1r		     mov dx, offset mod11w1reg + 0
    816	0429  51		     push cx
    817	042A  B9 0002		     mov cx, 2
    818	042D  B4 40		     mov ah, 40h
    819	042F  8B 1E 0161r	     mov bx, destFHandle
    820
    821	0433  CD 21		     int 21h
    822	0435  59		     pop cx
    823
    824
    825	0436  E8 0487		     call printOperandSeparator
    826
    827	0439  5A		     pop dx
    828	043A  51		     push cx
    829	043B  B9 0002		     mov cx, 2
    830	043E  B4 40		     mov ah, 40h
    831	0440  8B 1E 0161r	     mov bx, destFHandle
    832				     ;mov dx, offset mod11w1reg	+ 0
    833				     ;mov dx, offset com_names
    834	0444  CD 21		     int 21h
    835	0446  59		     pop cx
    836	0447  E8 03F0		     call printNewline
    837	044A  E9 FD06		     jmp inc_lineCount
    838
    839	044D  C3		     ret
    840	044E			     com_xchg ENDP
    841
    842				     ; ------------------------------ TEST!
    843
    844	044E			     com_test1 proc
    845	044E  E8 FE2F		     call printHexByte
    846
    847	0451  8A D8		     mov bl, al
    848	0453  80 E3 01		     and bl, 00000001b
    849	0456  80 FB 01		     cmp bl, 00000001b
    850	0459  74 08		     je	w1
    851	045B  C6 06 0232r 00	     mov [wFlag], 0
    852	0460  EB 06 90		     jmp continue1
    853	0463			     w1:
    854	0463  C6 06 0232r 01	     mov [wFlag], 1
    855	0468			     continue1:
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 16
dis.ASM



    856
    857	0468  83 F9 01		     cmp cx, 1
    858	046B  75 03		     jne skipRefilldiv
    859	046D  E8 FDFC		     call readToBuff
    860	0470			     skipRefilldiv:
    861	0470  E8 0668		     call keyboard_hex
    862	0473  49		     dec cx
    863
    864	0474  E8 FE09		     call printHexByte
    865	0477  E8 FDBF		     call incLineNumber
    866
    867	047A  56		     push si
    868	047B  B7 05		     mov bh, 5
    869	047D  BE 00D4r		     mov si, offset com_names +	30
    870	0480  E8 044E		     call fillRegBuffer
    871	0483  5E		     pop si
    872
    873
    874	0484  E8 0461		     call modregrm
    875
    876
    877	0487  C6 06 022Br 00	     mov [regBufferCount], 0
    878	048C  C3		     ret
    879	048D			     com_test1	ENDP
    880
    881
    882				     ; ------------------------------ DIV
    883	048D			     com_div proc
    884	048D  E8 FDF0		     call printHexByte
    885
    886	0490  8A D8		     mov bl, al
    887	0492  80 E3 01		     and bl, 00000001b
    888	0495  80 FB 01		     cmp bl, 00000001b
    889	0498  74 08		     je	w1DIV
    890	049A  C6 06 0232r 00	     mov [wFlag], 0
    891	049F  EB 06 90		     jmp continue1DIV
    892	04A2			     w1DIV:
    893	04A2  C6 06 0232r 01	     mov [wFlag], 1
    894	04A7			     continue1DIV:
    895
    896	04A7  83 F9 01		     cmp cx, 1
    897	04AA  75 03		     jne skipRefilldiv5
    898	04AC  E8 FDBD		     call readToBuff
    899	04AF			     skipRefilldiv5:
    900	04AF  E8 0629		     call keyboard_hex
    901	04B2  49		     dec cx
    902
    903
    904
    905	04B3  E8 FDCA		     call printHexByte
    906	04B6  E8 FD80		     call incLineNumber
    907
    908				     ; ziurim DIV ar IDIV
    909	04B9  8A D8		     mov bl, al
    910	04BB  80 E3 38		     and bl, 00111000b
    911	04BE  80 FB 30		     cmp bl, 00110000b
    912	04C1  75 0D		     jne itsIDIV
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 17
dis.ASM



    913				     ;its div ->
    914	04C3  56		     push si
    915	04C4  B7 04		     mov bh, 4
    916	04C6  BE 00B6r		     mov si, offset com_names +	0
    917	04C9  E8 0405		     call fillRegBuffer
    918	04CC  5E		     pop si
    919	04CD  EB 22 90		     jmp continue2
    920	04D0			     itsIDIV:
    921				     ;idiv
    922
    923	04D0  8A D8		     mov bl, al
    924	04D2  80 E3 38		     and bl, 00111000b
    925	04D5  80 FB 00		     cmp bl, 00000000b
    926	04D8  75 0D		     jne itsTest
    927				     ;test
    928	04DA  56		     push si
    929	04DB  B7 05		     mov bh, 5
    930	04DD  BE 00D4r		     mov si, offset com_names +	30
    931
    932
    933
    934	04E0  E8 03EE		     call fillRegBuffer
    935	04E3  5E		     pop si
    936	04E4  EB 0B 90		     jmp cont117
    937
    938	04E7			     itsTest:
    939	04E7  56		     push si
    940	04E8  B7 05		     mov bh, 5
    941	04EA  BE 00BAr		     mov si, offset com_names +	4
    942	04ED  E8 03E1		     call fillRegBuffer
    943	04F0  5E		     pop si
    944	04F1			     continue2:
    945
    946
    947	04F1			     cont117:
    948				     ;;;;;;------------tikrinamMod
    949	04F1  8A D8		     mov bl, al
    950	04F3  80 E3 C0		     and bl, 11000000b
    951	04F6  80 FB C0		     cmp bl, 11000000b
    952	04F9  75 1B		     jne DIVmodnot11
    953
    954				     ;-------------------mod11
    955				     ; ziurim w0 ar w1
    956	04FB  8A 1E 0232r	     mov bl, [wFlag]
    957	04FF  80 FB 01		     cmp bl, 1
    958	0502  75 06		     jne not1
    959	0504  E8 011E		     call scanRM00w1
    960	0507  EB 04 90		     jmp continue3
    961	050A			     not1:
    962	050A  E8 01AB		     call scanRM00w0
    963	050D			     continue3:
    964
    965	050D  E8 0306		     call printDoubleTab
    966	0510  E8 0394		     call printDIstring
    967	0513  E8 0324		     call printNewline
    968				     ;-------------------
    969	0516			     DIVmodnot11:
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 18
dis.ASM



    970
    971				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;; mod 10
    972	0516  8A D8		     mov bl, al
    973	0518  80 E3 C0		     and bl, 11000000b
    974	051B  80 FB 80		     cmp bl, 10000000b
    975	051E  75 12		     jne DIVmodnot10
    976
    977	0520  83 F9 01		     cmp cx, 1
    978	0523  75 03		     jne skipRefilldiv2
    979	0525  E8 FD44		     call readToBuff
    980	0528			     skipRefilldiv2:
    981	0528  E8 05B0		     call keyboard_hex
    982	052B  49		     dec cx
    983
    984	052C  E8 FD51		     call printHexByte
    985	052F  E8 FD07		     call incLineNumber
    986
    987	0532			     DIVmodnot10:
    988
    989				     ;;;;;;;;;;;;;;;;;;;;; mod00
    990	0532  8A D8		     mov bl, al
    991	0534  80 E3 C0		     and bl, 11000000b
    992	0537  80 FB 00		     cmp bl, 00000000b
    993	053A  75 20		     jne DIVmodnot00
    994
    995	053C  8A D8		     mov bl, al
    996	053E  80 FB 01		     cmp bl, 00000001b
    997	0541  75 0C		     jne cont112
    998
    999	0543  E8 00DF		     call scanRM00w1
   1000	0546  E8 02CD		     call printDoubleTab
   1001	0549  E8 035B		     call printDIstring
   1002	054C  E8 02EB		     call printNewline
   1003
   1004	054F			     cont112:
   1005				     ;nuskaitome reg, cia kai w=1
   1006	054F  E8 01F9		     call scanRM
   1007
   1008	0552  8A D8		     mov bl, al
   1009	0554  80 E3 07		     and bl, 00000111b
   1010	0557  80 FB 06		     cmp bl, 00000110b
   1011	055A  75 00		     jne DIVrmNot110
   1012
   1013
   1014	055C			     DIVrmNot110:
   1015	055C			     DIVmodnot00:
   1016
   1017
   1018	055C  C6 06 022Br 00	     mov [regBufferCount], 0
   1019	0561  C3		     ret
   1020	0562			     com_div endp
   1021
   1022	0562			     com_les PROC
   1023
   1024	0562  E8 FD1B		     call printHexByte
   1025	0565  83 F9 01		     cmp cx, 1
   1026	0568  75 03		     jne skipRefillLes
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 19
dis.ASM



   1027	056A  E8 FCFF		     call readToBuff
   1028	056D			     skipRefillLes:
   1029	056D  E8 056B		     call keyboard_hex
   1030	0570  49		     dec cx
   1031
   1032	0571  E8 FD0C		     call printHexByte
   1033	0574  E8 FCC2		     call incLineNumber
   1034
   1035				     ; i rbuff idedu komandos pav.
   1036	0577  56		     push si
   1037	0578  B7 04		     mov bh, 4
   1038	057A  BE 00CBr		     mov si, offset com_names +	21
   1039	057D  E8 0351		     call fillRegBuffer
   1040	0580  5E		     pop si
   1041
   1042	0581  E8 0364		     call modregrm
   1043
   1044
   1045	0584  C6 06 022Br 00	     mov [regBufferCount], 0
   1046	0589  C3		     ret
   1047	058A			     com_les ENDP
   1048
   1049
   1050	058A			     scanREG PROC
   1051	058A  56		     push si
   1052
   1053	058B  8A D8		     mov bl, al
   1054	058D  80 E3 38		     and bl, 00111000b
   1055	0590  80 FB 38		     cmp bl, 00111000b
   1056	0593  75 08		     jne LESregnot111
   1057	0595  B7 02		     mov bh, 2 ; nusakom kiek simboliu
   1058	0597  BE 0106r		     mov si, offset mod11w1reg + 21 ; di bus nukreipta i bufferReg
   1059	059A  E8 0334		     call fillRegBuffer
   1060	059D			     LESregnot111:
   1061
   1062	059D  8A D8		     mov bl, al
   1063	059F  80 E3 38		     and bl, 00111000b
   1064	05A2  80 FB 30		     cmp bl, 00110000b
   1065	05A5  75 08		     jne LESregnot110
   1066	05A7  B7 02		     mov bh, 2
   1067	05A9  BE 0103r		     mov si, offset mod11w1reg + 18
   1068	05AC  E8 0322		     call fillRegBuffer
   1069	05AF			     LESregnot110:
   1070
   1071	05AF  8A D8		     mov bl, al
   1072	05B1  80 E3 38		     and bl, 00111000b
   1073	05B4  80 FB 28		     cmp bl, 00101000b
   1074	05B7  75 08		     jne LESregnot101
   1075	05B9  B7 02		     mov bh, 2
   1076	05BB  BE 0100r		     mov si, offset mod11w1reg + 15
   1077	05BE  E8 0310		     call fillRegBuffer
   1078	05C1			     LESregnot101:
   1079
   1080	05C1  8A D8		     mov bl, al
   1081	05C3  80 E3 38		     and bl, 00111000b
   1082	05C6  80 FB 20		     cmp bl, 00100000b
   1083	05C9  75 08		     jne LESregnot100
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 20
dis.ASM



   1084	05CB  B7 02		     mov bh, 2
   1085	05CD  BE 00FDr		     mov si, offset mod11w1reg + 12
   1086	05D0  E8 02FE		     call fillRegBuffer
   1087	05D3			     LESregnot100:
   1088
   1089	05D3  8A D8		     mov bl, al
   1090	05D5  80 E3 38		     and bl, 00111000b
   1091	05D8  80 FB 18		     cmp bl, 00011000b
   1092	05DB  75 08		     jne LESregnot011
   1093	05DD  B7 02		     mov bh, 2
   1094	05DF  BE 00FAr		     mov si, offset mod11w1reg + 9
   1095	05E2  E8 02EC		     call fillRegBuffer
   1096	05E5			     LESregnot011:
   1097
   1098	05E5  8A D8		     mov bl, al
   1099	05E7  80 E3 38		     and bl, 00111000b
   1100	05EA  80 FB 10		     cmp bl, 00010000b
   1101	05ED  75 08		     jne LESregnot010
   1102	05EF  B7 02		     mov bh, 2
   1103	05F1  BE 00F7r		     mov si, offset mod11w1reg + 6
   1104	05F4  E8 02DA		     call fillRegBuffer
   1105	05F7			     LESregnot010:
   1106
   1107	05F7  8A D8		     mov bl, al
   1108	05F9  80 E3 38		     and bl, 00111000b
   1109	05FC  80 FB 08		     cmp bl, 00001000b
   1110	05FF  75 08		     jne LESregnot001
   1111	0601  B7 02		     mov bh, 2
   1112	0603  BE 00F4r		     mov si, offset mod11w1reg + 3
   1113	0606  E8 02C8		     call fillRegBuffer
   1114	0609			     LESregnot001:
   1115
   1116	0609  8A D8		     mov bl, al
   1117	060B  80 E3 38		     and bl, 00111000b
   1118	060E  80 FB 00		     cmp bl, 00000000b
   1119	0611  75 08		     jne LESregnot000
   1120	0613  B7 02		     mov bh, 2
   1121	0615  BE 00F1r		     mov si, offset mod11w1reg + 0
   1122	0618  E8 02B6		     call fillRegBuffer
   1123	061B			     LESregnot000:
   1124
   1125	061B  B7 02		     mov bh, 2
   1126	061D  BE 0109r		     mov si, offset mod11w1reg + 24
   1127	0620  E8 02AE		     call fillRegBuffer
   1128
   1129	0623  5E		     pop si
   1130	0624  C3		     ret
   1131	0625			     scanREG ENDP
   1132
   1133	0625			     scanRM00w1	proc
   1134
   1135	0625  56		     push si
   1136
   1137	0626  8A D8		     mov bl, al
   1138	0628  80 E3 07		     and bl, 00000111b
   1139	062B  80 FB 00		     cmp bl, 00000000b
   1140	062E  75 08		     jne w0rmNot000
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 21
dis.ASM



   1141	0630  B7 02		     mov bh, 2
   1142	0632  BE 00F1r		     mov si, offset mod11w1reg + 0
   1143	0635  E8 0299		     call fillRegBuffer
   1144	0638			     w0rmNot000:
   1145
   1146	0638  8A D8		     mov bl, al
   1147	063A  80 E3 07		     and bl, 00000111b
   1148	063D  80 FB 01		     cmp bl, 00000001b
   1149	0640  75 08		     jne w0rmNot001
   1150	0642  B7 02		     mov bh, 2
   1151	0644  BE 00F4r		     mov si, offset mod11w1reg + 3
   1152	0647  E8 0287		     call fillRegBuffer
   1153	064A			     w0rmNot001:
   1154
   1155	064A  8A D8		     mov bl, al
   1156	064C  80 E3 07		     and bl, 00000111b
   1157	064F  80 FB 02		     cmp bl, 00000010b
   1158	0652  75 08		     jne w0rmNot010
   1159	0654  B7 02		     mov bh, 2
   1160	0656  BE 00F7r		     mov si, offset mod11w1reg + 6
   1161	0659  E8 0275		     call fillRegBuffer
   1162	065C			     w0rmNot010:
   1163
   1164	065C  8A D8		     mov bl, al
   1165	065E  80 E3 07		     and bl, 00000111b
   1166	0661  80 FB 03		     cmp bl, 00000011b
   1167	0664  75 08		     jne w0rmNot011
   1168	0666  B7 02		     mov bh, 2
   1169	0668  BE 00FAr		     mov si, offset mod11w1reg + 9
   1170	066B  E8 0263		     call fillRegBuffer
   1171	066E			     w0rmNot011:
   1172
   1173	066E  8A D8		     mov bl, al
   1174	0670  80 E3 07		     and bl, 00000111b
   1175	0673  80 FB 04		     cmp bl, 00000100b
   1176	0676  75 08		     jne w0rmNot100
   1177	0678  B7 02		     mov bh, 2
   1178	067A  BE 00FDr		     mov si, offset mod11w1reg + 12
   1179	067D  E8 0251		     call fillRegBuffer
   1180	0680			     w0rmNot100:
   1181
   1182	0680  8A D8		     mov bl, al
   1183	0682  80 E3 07		     and bl, 00000111b
   1184	0685  80 FB 05		     cmp bl, 00000101b
   1185	0688  75 08		     jne w0rmNot101
   1186	068A  B7 02		     mov bh, 2
   1187	068C  BE 0100r		     mov si, offset mod11w1reg + 15
   1188	068F  E8 023F		     call fillRegBuffer
   1189	0692			     w0rmNot101:
   1190
   1191	0692  8A D8		     mov bl, al
   1192	0694  80 E3 07		     and bl, 00000111b
   1193	0697  80 FB 06		     cmp bl, 00000110b
   1194	069A  75 08		     jne w0rmNot110
   1195	069C  B7 02		     mov bh, 2
   1196	069E  BE 0103r		     mov si, offset mod11w1reg + 18
   1197	06A1  E8 022D		     call fillRegBuffer
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 22
dis.ASM



   1198	06A4			     w0rmNot110:
   1199
   1200	06A4  8A D8		     mov bl, al
   1201	06A6  80 E3 07		     and bl, 00000111b
   1202	06A9  80 FB 07		     cmp bl, 00000111b
   1203	06AC  75 08		     jne w0rmNot111
   1204	06AE  B7 02		     mov bh, 2
   1205	06B0  BE 0106r		     mov si, offset mod11w1reg + 21
   1206	06B3  E8 021B		     call fillRegBuffer
   1207	06B6			     w0rmNot111:
   1208
   1209	06B6  5E		     pop si
   1210
   1211	06B7  C3		     ret
   1212	06B8			     scanRM00w1	ENDP
   1213
   1214	06B8			     scanRM00w0	proc
   1215
   1216	06B8  56		     push si
   1217
   1218	06B9  8A D8		     mov bl, al
   1219	06BB  80 E3 07		     and bl, 00000111b
   1220	06BE  80 FB 00		     cmp bl, 00000000b
   1221	06C1  75 08		     jne w0rmNot000w0
   1222	06C3  B7 02		     mov bh, 2
   1223	06C5  BE 00D9r		     mov si, offset mod11w0reg + 0
   1224	06C8  E8 0206		     call fillRegBuffer
   1225	06CB			     w0rmNot000w0:
   1226
   1227	06CB  8A D8		     mov bl, al
   1228	06CD  80 E3 07		     and bl, 00000111b
   1229	06D0  80 FB 01		     cmp bl, 00000001b
   1230	06D3  75 08		     jne w0rmNot001w0
   1231	06D5  B7 02		     mov bh, 2
   1232	06D7  BE 00DCr		     mov si, offset mod11w0reg + 3
   1233	06DA  E8 01F4		     call fillRegBuffer
   1234	06DD			     w0rmNot001w0:
   1235
   1236	06DD  8A D8		     mov bl, al
   1237	06DF  80 E3 07		     and bl, 00000111b
   1238	06E2  80 FB 02		     cmp bl, 00000010b
   1239	06E5  75 08		     jne w0rmNot010w0
   1240	06E7  B7 02		     mov bh, 2
   1241	06E9  BE 00DFr		     mov si, offset mod11w0reg + 6
   1242	06EC  E8 01E2		     call fillRegBuffer
   1243	06EF			     w0rmNot010w0:
   1244
   1245	06EF  8A D8		     mov bl, al
   1246	06F1  80 E3 07		     and bl, 00000111b
   1247	06F4  80 FB 03		     cmp bl, 00000011b
   1248	06F7  75 08		     jne w0rmNot011w0
   1249	06F9  B7 02		     mov bh, 2
   1250	06FB  BE 00E2r		     mov si, offset mod11w0reg + 9
   1251	06FE  E8 01D0		     call fillRegBuffer
   1252	0701			     w0rmNot011w0:
   1253
   1254	0701  8A D8		     mov bl, al
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 23
dis.ASM



   1255	0703  80 E3 07		     and bl, 00000111b
   1256	0706  80 FB 04		     cmp bl, 00000100b
   1257	0709  75 08		     jne w0rmNot100w0
   1258	070B  B7 02		     mov bh, 2
   1259	070D  BE 00E5r		     mov si, offset mod11w0reg + 12
   1260	0710  E8 01BE		     call fillRegBuffer
   1261	0713			     w0rmNot100w0:
   1262
   1263	0713  8A D8		     mov bl, al
   1264	0715  80 E3 07		     and bl, 00000111b
   1265	0718  80 FB 05		     cmp bl, 00000101b
   1266	071B  75 08		     jne w0rmNot101w0
   1267	071D  B7 02		     mov bh, 2
   1268	071F  BE 00E8r		     mov si, offset mod11w0reg + 15
   1269	0722  E8 01AC		     call fillRegBuffer
   1270	0725			     w0rmNot101w0:
   1271
   1272	0725  8A D8		     mov bl, al
   1273	0727  80 E3 07		     and bl, 00000111b
   1274	072A  80 FB 06		     cmp bl, 00000110b
   1275	072D  75 08		     jne w0rmNot110w0
   1276	072F  B7 02		     mov bh, 2
   1277	0731  BE 00EBr		     mov si, offset mod11w0reg + 18
   1278	0734  E8 019A		     call fillRegBuffer
   1279	0737			     w0rmNot110w0:
   1280
   1281	0737  8A D8		     mov bl, al
   1282	0739  80 E3 07		     and bl, 00000111b
   1283	073C  80 FB 07		     cmp bl, 00000111b
   1284	073F  75 08		     jne w0rmNot111w0
   1285	0741  B7 02		     mov bh, 2
   1286	0743  BE 00EEr		     mov si, offset mod11w0reg + 21
   1287	0746  E8 0188		     call fillRegBuffer
   1288	0749			     w0rmNot111w0:
   1289
   1290	0749  5E		     pop si
   1291
   1292	074A  C3		     ret
   1293	074B			     scanRM00w0	ENDP
   1294
   1295				     ; cia be 110 rm, nes ten keicias logika nuo mod
   1296	074B			     scanRM PROC
   1297
   1298	074B  56		     push si
   1299	074C  8A D8		     mov bl, al
   1300	074E  80 E3 07		     and bl, 00000111b
   1301	0751  80 FB 00		     cmp bl, 00000000b
   1302	0754  75 08		     jne rmNot000
   1303	0756  B7 06		     mov bh, 6
   1304	0758  BE 010Cr		     mov si, offset EAdress + 0
   1305	075B  E8 0173		     call fillRegBuffer
   1306	075E			     rmNot000:
   1307
   1308	075E  8A D8		     mov bl, al
   1309	0760  80 E3 07		     and bl, 00000111b
   1310	0763  80 FB 01		     cmp bl, 00000001b
   1311	0766  75 08		     jne rmNot001
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 24
dis.ASM



   1312	0768  B7 06		     mov bh, 6
   1313	076A  BE 0113r		     mov si, offset EAdress + 7
   1314	076D  E8 0161		     call fillRegBuffer
   1315	0770			     rmNot001:
   1316
   1317	0770  8A D8		     mov bl, al
   1318	0772  80 E3 07		     and bl, 00000111b
   1319	0775  80 FB 02		     cmp bl, 00000010b
   1320	0778  75 08		     jne rmNot010
   1321	077A  B7 06		     mov bh, 6
   1322	077C  BE 011Ar		     mov si, offset EAdress + 14
   1323	077F  E8 014F		     call fillRegBuffer
   1324	0782			     rmNot010:
   1325
   1326	0782  8A D8		     mov bl, al
   1327	0784  80 E3 07		     and bl, 00000111b
   1328	0787  80 FB 03		     cmp bl, 00000011b
   1329	078A  75 08		     jne rmNot011
   1330	078C  B7 06		     mov bh, 6
   1331	078E  BE 0121r		     mov si, offset EAdress + 21
   1332	0791  E8 013D		     call fillRegBuffer
   1333	0794			     rmNot011:
   1334
   1335	0794  8A D8		     mov bl, al
   1336	0796  80 E3 07		     and bl, 00000111b
   1337	0799  80 FB 04		     cmp bl, 00000100b
   1338	079C  75 08		     jne rmNot100
   1339	079E  B7 06		     mov bh, 6
   1340	07A0  BE 0128r		     mov si, offset EAdress + 28
   1341	07A3  E8 012B		     call fillRegBuffer
   1342	07A6			     rmNot100:
   1343
   1344	07A6  8A D8		     mov bl, al
   1345	07A8  80 E3 07		     and bl, 00000111b
   1346	07AB  80 FB 05		     cmp bl, 00000101b
   1347	07AE  75 08		     jne rmNot101
   1348	07B0  B7 06		     mov bh, 6
   1349	07B2  BE 012Fr		     mov si, offset EAdress + 35
   1350	07B5  E8 0119		     call fillRegBuffer
   1351	07B8			     rmNot101:
   1352
   1353	07B8  8A D8		     mov bl, al
   1354	07BA  80 E3 07		     and bl, 00000111b
   1355	07BD  80 FB 07		     cmp bl, 00000111b
   1356	07C0  75 08		     jne rmNot111
   1357	07C2  B7 06		     mov bh, 6
   1358	07C4  BE 013Dr		     mov si, offset EAdress + 49
   1359	07C7  E8 0107		     call fillRegBuffer
   1360	07CA			     rmNot111:
   1361
   1362	07CA  5E		     pop si
   1363	07CB  C3		     ret
   1364	07CC			     scanRM ENDP
   1365
   1366
   1367	07CC			     scanRMwhenMod00 PROC
   1368
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 25
dis.ASM



   1369	07CC  8A D8		     mov bl, al
   1370	07CE  80 E3 07		     and bl, 00000111b
   1371	07D1  80 FB 06		     cmp bl, 00000110b
   1372	07D4  75 3F		     jne rmNot110
   1373
   1374
   1375				     ; skaitom poslinkio LowByte
   1376	07D6  83 F9 01		     cmp cx, 1
   1377	07D9  75 03		     jne skipRefillLes2
   1378	07DB  E8 FA8E		     call readToBuff
   1379	07DE			     skipRefillLes2:
   1380	07DE  E8 02FA		     call keyboard_hex
   1381	07E1  A2 022Dr		     mov [dLow], al
   1382	07E4  49		     dec cx
   1383	07E5  E8 FA51		     call incLineNumber
   1384
   1385				     ;Skaitom poslinkio	HighByte
   1386	07E8  83 F9 01		     cmp cx, 1
   1387	07EB  75 03		     jne skipRefillLes3
   1388	07ED  E8 FA7C		     call readToBuff
   1389	07F0			     skipRefillLes3:
   1390	07F0  E8 02E8		     call keyboard_hex
   1391	07F3  A2 022Er		     mov [dHigh], al
   1392	07F6  49		     dec cx
   1393	07F7  E8 FA3F		     call incLineNumber
   1394
   1395	07FA  A0 022Dr		     mov al, [dLow]
   1396	07FD  E8 FA80		     call printHexByte
   1397	0800  A0 022Er		     mov al, [dHigh]
   1398	0803  E8 FA7A		     call printHexByte
   1399
   1400
   1401
   1402	0806  E8 000D		     call printDoubleTab
   1403	0809  E8 009B		     call printDIstring
   1404	080C  E8 003C		     call PrintLeftBracket
   1405	080F  E8 006C		     call printWordInBrackets
   1406	0812  E8 0047		     call PrintRightBracket
   1407
   1408	0815			     rmNot110:
   1409
   1410	0815  C3		     ret
   1411	0816			     scanRMwhenMod00 ENDP
   1412
   1413
   1414
   1415
   1416				     ;---------
   1417
   1418				     ;formatavimo proceduros
   1419	0816			     printDoubleTab PROC
   1420	0816  51		     push cx
   1421	0817  50		     push ax
   1422
   1423	0818  B9 0002		     mov cx, 2
   1424	081B  B4 40		     mov ah, 40h
   1425	081D  8B 1E 0161r	     mov bx, destFHandle
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 26
dis.ASM



   1426	0821  BA 008Cr		     lea dx, line_doubleTab
   1427	0824  CD 21		     int 21h
   1428
   1429	0826  58		     pop ax
   1430	0827  59		     pop cx
   1431	0828  C3		     ret
   1432	0829			     printDoubleTab ENDP
   1433
   1434	0829			     printHNewline PROC
   1435	0829  51		     push cx
   1436	082A  B9 0003		     mov cx, 3
   1437	082D  B4 40		     mov ah, 40h
   1438	082F  8B 1E 0161r	     mov bx, destFHandle
   1439	0833  BA 008Fr		     lea dx, line_hNewLine
   1440	0836  CD 21		     int 21h
   1441	0838  59		     pop cx
   1442	0839  C3		     ret
   1443	083A			     printHNewline ENDP
   1444
   1445	083A			     printNewline PROC
   1446	083A  51		     push cx
   1447	083B  B9 0002		     mov cx, 2
   1448	083E  B4 40		     mov ah, 40h
   1449	0840  8B 1E 0161r	     mov bx, destFHandle
   1450	0844  BA 0093r		     lea dx, line_NewLine
   1451	0847  CD 21		     int 21h
   1452	0849  59		     pop cx
   1453	084A  C3		     ret
   1454	084B			     printNewline ENDP
   1455
   1456	084B			     PrintLeftBracket PROC
   1457	084B  51		     push cx
   1458	084C  B9 0001		     mov cx, 1
   1459	084F  B4 40		     mov ah, 40h
   1460	0851  8B 1E 0161r	     mov bx, destFHandle
   1461	0855  BA 0144r		     lea dx, format
   1462	0858  CD 21		     int 21h
   1463	085A  59		     pop cx
   1464	085B  C3		     ret
   1465	085C			     PrintLeftBracket ENDP
   1466
   1467	085C			     PrintRightBracket PROC
   1468	085C  51		     push cx
   1469	085D  B9 0001		     mov cx, 1
   1470	0860  B4 40		     mov ah, 40h
   1471	0862  8B 1E 0161r	     mov bx, destFHandle
   1472	0866  BA 0145r		     lea dx, format +1
   1473	0869  CD 21		     int 21h
   1474	086B  59		     pop cx
   1475	086C  C3		     ret
   1476
   1477	086D			     PrintRightBracket ENDP
   1478	086D  51		     push cx
   1479	086E  B9 0001		     mov cx, 1
   1480	0871  B4 40		     mov ah, 40h
   1481	0873  8B 1E 0161r	     mov bx, destFHandle
   1482	0877  BA 0145r		     lea dx, format+1
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 27
dis.ASM



   1483	087A  CD 21		     int 21h
   1484	087C  59		     pop cx
   1485	087D  C3		     ret
   1486
   1487	087E			     printWordInBrackets PROC
   1488
   1489	087E  A0 022Er		     mov al, [dHigh]
   1490	0881  E8 F9FC		     call printHexByte
   1491
   1492	0884  A0 022Dr		     mov al, [dLow]
   1493	0887  E8 F9F6		     call printHexByte
   1494
   1495	088A  C3		     ret
   1496	088B			     printWordInBrackets ENDP
   1497
   1498	088B			     printByteInBrackets PROC
   1499	088B  51		     push cx
   1500
   1501	088C  B0 00		     mov al, 0
   1502	088E  E8 F9EF		     call printHexByte
   1503
   1504	0891  A0 022Dr		     mov al, [dLow]
   1505	0894  E8 F9E9		     call printHexByte
   1506
   1507	0897  B9 0001		     mov cx, 1
   1508	089A  BA 0145r		     lea dx, format + 1
   1509	089D  B4 40		     mov ah, 40h
   1510	089F  8B 1E 0161r	     mov bx, destFHandle
   1511	08A3  CD 21		     int 21h
   1512
   1513	08A5  59		     pop cx
   1514
   1515	08A6  C3		     ret
   1516	08A7			     printByteInBrackets ENDP
   1517
   1518	08A7			     printDIstring PROC
   1519	08A7  51		     push cx
   1520	08A8  50		     push ax
   1521
   1522	08A9  A0 022Br		     mov al, [regBufferCount]
   1523
   1524	08AC  B5 00		     mov ch, 0
   1525	08AE  8A 0E 022Br	     mov cl, [regBufferCount]
   1526
   1527
   1528	08B2  B4 40		     mov ah, 40h
   1529	08B4  8B 1E 0161r	     mov bx, destFHandle
   1530	08B8  BA 01C7r		     lea dx, regBuffer
   1531	08BB  CD 21		     int 21h
   1532
   1533	08BD  58		     pop ax
   1534	08BE  59		     pop cx
   1535	08BF  C3		     ret
   1536	08C0			     printDIstring ENDP
   1537
   1538	08C0			     printOperandSeparator PROC
   1539	08C0  51		     push cx
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 28
dis.ASM



   1540	08C1  B9 0002		     mov cx, 2
   1541	08C4  B4 40		     mov ah, 40h
   1542	08C6  8B 1E 0161r	     mov bx, destFHandle
   1543	08CA  BA 0096r		     lea dx, line_OperandSeparator
   1544	08CD  CD 21		     int 21h
   1545	08CF  59		     pop cx
   1546	08D0  C3		     ret
   1547	08D1			     printOperandSeparator ENDP
   1548
   1549	08D1			     fillRegBuffer PROC
   1550
   1551				     ;aprasysiu	tai pradzioj scan ciklo
   1552				     ;lea di, regBuffer
   1553	08D1  51		     push cx
   1554	08D2  56		     push si
   1555
   1556	08D3  B5 00		     mov ch, 0
   1557	08D5  8A CF		     mov cl, bh
   1558
   1559	08D7			     pushToBuffer2:
   1560	08D7  53		     push bx
   1561	08D8  8A 1C		     mov bl, [si]
   1562	08DA  88 1D		     mov [di], bl
   1563	08DC  5B		     pop bx
   1564	08DD  46		     inc si
   1565	08DE  47		     inc di
   1566	08DF  FE 06 022Br	     inc [regBufferCount]
   1567	08E3  E2 F2		     loop pushToBuffer2
   1568
   1569	08E5  5E		     pop si
   1570	08E6  59		     pop cx
   1571
   1572	08E7  C3		     ret
   1573	08E8			     fillRegBuffer ENDP
   1574
   1575
   1576
   1577	08E8			     modregrm proc
   1578
   1579
   1580	08E8  8A D8		     mov bl, al
   1581	08EA  80 E3 C0		     and bl, 11000000b
   1582	08ED  80 FB 00		     cmp bl, 00000000b
   1583	08F0  75 09		     jne LESmodnot00
   1584
   1585				     ;nuskaitome reg, cia kai w=1
   1586	08F2  E8 FC95		     call scanREG
   1587	08F5  E8 FE53		     call scanRM
   1588
   1589	08F8  E8 FED1		     call scanRMwhenMod00
   1590
   1591	08FB			     LESmodnot00:
   1592
   1593	08FB  8A D8		     mov bl, al
   1594	08FD  80 E3 C0		     and bl, 11000000b
   1595	0900  80 FB 80		     cmp bl, 10000000b
   1596	0903  75 5B		     jne modNot10
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 29
dis.ASM
=======
    463	01CC  56				     push si
    464	01CD  57				     push di
    465
    466	01CE  BE 0071r			 mov si, OFFSET	Hex_Map		 ; Pointer to hex-character table
    467
    468	01D1  8B D8			 mov bx, ax			 ; BX =	argument AX
    469	01D3  81 E3 00FF		 and bx, 00FFh			 ; Clear BH (just to be	on the safe side)
    470	01D7  D1 EB D1 EB D1 EB	D1+	 shr bx, 4			 ; Isolate high	nibble (i.e. 4 bits)
    471	      EB
    472	01DF  8A 10			 mov dl, [si+bx]		 ; Read	hex-character from the table
    473	01E1  88 15			 mov [di+0], dl			 ; Store character at the first	place in the output string
    474
    475	01E3  8B D8			 mov bx, ax			 ; BX =	argument AX (just to be	on the safe side)
    476	01E5  81 E3 00FF		 and bx, 00FFh			 ; Clear BH (just to be	on the safe side)
    477	01E9  80 E3 0F			 and bl, 0Fh			 ; Isolate low nibble (i.e. 4 bits)
    478	01EC  8A 10			 mov dl, [si+bx]		 ; Read	hex-character from the table
    479	01EE  88 55 01			 mov [di+1], dl			 ; Store character at the second place in the output string
    480
    481	01F1  5F				     pop di
    482	01F2  5E				     pop si
    483	01F3  C3			 ret
    484	01F4			     IntegerToHexFromMap ENDP
    485
    486	01F4			     printLineNumber PROC
    487
    488	01F4  51		       push cx
    489	01F5  56		       push si
    490	01F6  50			     push ax
    491	01F7  57			     push di
    492
    493	01F8  BF 0081r		       mov di, OFFSET HEX_Out	       ; First argument: pointer
    494	01FB  A1 006Fr		       mov ax, lineCountH		; Second argument: Integer
    495	01FE  E8 FFCB		       call IntegerToHexFromMap
    496
    497	0201  B9 0002		       mov cx, 2
    498	0204  B4 40		       mov   ah, 40h
    499	0206  8B 1E 0161r	       mov bx, destFHandle
    500	020A  BA 0081r		       lea dx, HEX_Out
    501	020D  CD 21		       int 21h
    502
    503	020F  BF 0081r		       mov di, OFFSET HEX_Out	       ; First argument: pointer
    504	0212  A1 006Dr		       mov ax, lineCount	       ; Second	argument: Integer
    505	0215  E8 FFB4		       call IntegerToHexFromMap
    506
    507	0218  B9 0002		       mov cx, 2
    508	021B  B4 40		       mov   ah, 40h
    509	021D  8B 1E 0161r	       mov bx, destFHandle
    510	0221  BA 0081r		       lea dx, HEX_Out
    511	0224  CD 21		       int 21h
    512
    513	0226  B9 0003		       mov cx, 3
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 10
dis.asm



    514	0229  B4 40		       mov ah, 40h
    515	022B  8B 1E 0161r	       mov bx, destFHandle
    516	022F  BA 0086r		       lea dx, lineStringAdd
    517	0232  CD 21		       int 21h
    518
    519	0234  5F			     pop di
    520	0235  58			     pop ax
    521	0236  5E		       pop si
    522	0237  59		       pop cx
    523	0238  C3		       ret
    524	0239			     printLineNumber ENDP
    525
    526	0239			     incLineNumber PROC
    527					     ; --- jei lineCount=255 ir	norim INC, reikia ji prilygint 0 ir lineCountH ++
    528	0239  81 3E 006Dr 00FF		     cmp [lineCount], 255
    529	023F  75 0E			     jne nereikTvarkytiDidelioHex
    530	0241  C7 06 006Dr 0000		     mov [lineCount], 0
    531	0247  FF 06 006Fr		     inc [lineCountH]
    532	024B  FF 0E 006Dr		     dec [lineCount]
    533	024F				     nereikTvarkytiDidelioHex:
    534	024F  FF 06 006Dr		     inc [lineCount]
    535					     ; ---
    536	0253  C3			     ret
    537	0254			     incLineNumber ENDP
    538
    539
    540	0254			     com_unk PROC
    541	0254  57		     push di
    542	0255  E8 0028		     call printHexByte
    543	0258  51		     push cx
    544	0259  50		     push ax
    545
    546	025A  B9 0017		      mov cx, 23
    547	025D  B4 40		      mov ah, 40h
    548	025F  8B 1E 0161r	      mov bx, destFHandle
    549	0263  BA 0099r		      lea dx, line_unkn
    550	0266  CD 21		      int 21h
    551
    552	0268  58		      pop ax
    553	0269  59		      pop cx
    554	026A  5F		      pop di
    555	026B  C3		      ret
    556	026C			     com_unk ENDP
    557
    558	026C			     readToBuff	PROC
    559	026C  8B 1E 0153r	     mov     bx, sourceFHandle
    560	0270  BA 0163r		     mov     dx, offset	buffer	     ; address of buffer in dx
    561	0273  B9 0064		     mov     cx, 100			     ; kiek baitu nuskaitysim
    562	0276  B4 3F		     mov     ah, 3fh		     ; function	3Fh - read from	file
    563	0278  CD 21		     int     21h
    564
    565	027A  8B C8		     mov     cx, ax		     ; bytes actually read
    566	027C  3D 0000		     cmp     ax, 0
    567	027F  C3		     ret
    568	0280			     readToBuff	ENDP
    569
    570	0280			     printHexByte PROC
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 11
dis.asm



    571	0280  51		     push cx
    572	0281  50		     push ax
    573	0282  57		     push di
    574	0283  53		     push bx
    575
    576	0284  BF 0081r		     mov di, OFFSET HEX_Out
    577	0287  E8 FF42		     call IntegerToHexFromMap
    578	028A  B9 0002		     mov cx, 2
    579	028D  B4 40		     mov ah, 40h
    580	028F  8B 1E 0161r	     mov bx, destFHandle
    581	0293  BA 0081r		     lea dx, HEX_Out
    582	0296  CD 21		     int 21h
    583
    584	0298  5B		     pop bx
    585	0299  5F		     pop di
    586	029A  58		     pop ax
    587	029B  59		     pop cx
    588	029C  C3		     ret
    589	029D			     printHexByte ENDP
    590
    591
    592				     ;------------- IN su portu
    593	029D			     com_in2 PROC
    594	029D  E8 FFE0		     call printHexByte
    595	02A0  83 F9 01		     cmp cx, 1
    596	02A3  75 03		     jne skipRefillin2
    597	02A5  E8 FFC4		     call readToBuff
    598	02A8			     skipRefillin2:
    599	02A8  E8 0806		     call keyboard_hex
    600	02AB  50		     push ax
    601	02AC  49		     dec cx
    602	02AD  E8 FFD0		     call printHexByte
    603	02B0  E8 FF86		     call incLineNumber
    604	02B3  E8 0536		     call printDoubleTab
    605				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    606	02B6  51		     push cx
    607	02B7  B9 0002		     mov cx, 2
    608	02BA  B4 40		     mov ah, 40h
    609	02BC  8B 1E 0161r	     mov bx, destFHandle
    610	02C0  BA 00BFr		     mov dx, offset com_names +	9
    611	02C3  CD 21		     int 21h
    612	02C5  59		     pop cx
    613
    614	02C6  E8 0523		     call printDoubleTab
    615
    616	02C9  51		     push cx
    617	02CA  B9 0002		     mov cx, 2
    618	02CD  B4 40		     mov ah, 40h
    619	02CF  8B 1E 0161r	     mov bx, destFHandle
    620	02D3  BA 00D9r		     mov dx, offset mod11w0reg + 0
    621	02D6  CD 21		     int 21h
    622	02D8  59		     pop cx
    623
    624	02D9  E8 05BA		     call printOperandSeparator
    625
    626	02DC  58		     pop ax
    627	02DD  E8 FFA0		     call printHexByte
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 12
dis.asm



    628	02E0  E8 051C		     call printHNewline
    629	02E3  E9 FE6D		     jmp inc_lineCount
    630	02E6			     com_in2 ENDP
    631				     ;---------
    632
    633				     ;------------- INT	su kodu
    634	02E6			     com_int2 PROC
    635	02E6  E8 FF97		     call printHexByte
    636	02E9  83 F9 01		     cmp cx, 1
    637	02EC  75 03		     jne skipRefillint2
    638	02EE  E8 FF7B		     call readToBuff
    639	02F1			     skipRefillint2:
    640	02F1  E8 07BD		     call keyboard_hex
    641	02F4  50		     push ax
    642	02F5  49		     dec cx
    643	02F6  E8 FF87		     call printHexByte
    644	02F9  E8 FF3D		     call incLineNumber
    645	02FC  E8 04ED		     call printDoubleTab
    646				     ;TODO normalia printString	funkcija, suskaiciuot cx fja
    647	02FF  51		     push cx
    648	0300  B9 0003		     mov cx, 3
    649	0303  B4 40		     mov ah, 40h
    650	0305  8B 1E 0161r	     mov bx, destFHandle
    651	0309  BA 00C7r		     mov dx, offset com_names +	17
    652	030C  CD 21		     int 21h
    653	030E  59		     pop cx
    654
    655	030F  E8 04DA		     call printDoubleTab
    656	0312  58		     pop ax
    657	0313  E8 FF6A		     call printHexByte
    658	0316  E8 04E6		     call printHNewline
    659	0319  E9 FE37		     jmp inc_lineCount
    660	031C  C3		     ret
    661	031D			     com_int2 ENDP
    662				     ;---------
    663
    664				     ;----------------------IRET
    665	031D			     com_iret PROC
    666	031D  E8 FF60		      call printHexByte
    667	0320  E8 04C9		      call printDoubleTab
    668	0323  51		      push cx
    669	0324  B9 0004		      mov cx, 4
    670	0327  B4 40		      mov ah, 40h
    671	0329  8B 1E 0161r	      mov bx, destFHandle
    672	032D  BA 00C2r		      mov dx, offset com_names + 12
    673	0330  CD 21		      int 21h
    674	0332  59		      pop cx
    675	0333  E8 04DA		      call printNewline
    676	0336  E9 FE1A		      jmp inc_lineCount
    677	0339  C3		      ret
    678	033A			     com_iret ENDP
    679				     ;---------
    680
    681				     ;----------------------INT	3
    682	033A			     com_int PROC
    683	033A  E8 FF43		      call printHexByte
    684	033D  E8 04AC		      call printDoubleTab
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 13
dis.asm



    685	0340  51		      push cx
    686	0341  B9 0003		      mov cx, 3
    687	0344  B4 40		      mov ah, 40h
    688	0346  8B 1E 0161r	      mov bx, destFHandle
    689	034A  BA 00C7r		      mov dx, offset com_names + 17
    690	034D  CD 21		      int 21h
    691	034F  59		      pop cx
    692	0350  E8 0499		      call printDoubleTab
    693	0353  B0 03		      mov al, 03h
    694	0355  E8 FF28		      call printHexByte
    695	0358  E8 04B5		      call printNewline
    696	035B  E9 FDF5		      jmp inc_lineCount
    697	035E  C3		      ret
    698	035F			     com_int ENDP
    699				     ;---------
    700
    701				     ;----------------------IN
    702	035F			     com_in PROC
    703	035F  80 E3 01		      and bl, 00000001b
    704	0362  80 FB 00		      cmp bl, 0
    705	0365  75 06		      jne in_ax
    706	0367  BA 00D9r		      mov dx, offset mod11w0reg+0
    707	036A  EB 04 90		      jmp print_in
    708	036D			      in_ax:
    709	036D  BA 00F1r		      mov dx, offset mod11w1reg+0
    710	0370			      print_in:
    711	0370  52		      push dx
    712	0371  E8 FF0C		      call printHexByte
    713	0374  E8 0475		      call printDoubleTab
    714	0377  51		      push cx
    715	0378  B9 0002		      mov cx, 2
    716	037B  B4 40		      mov ah, 40h
    717	037D  8B 1E 0161r	      mov bx, destFHandle
    718	0381  BA 00BFr		      mov dx, offset com_names + 9
    719	0384  CD 21		      int 21h
    720	0386  59		      pop cx
    721	0387  E8 0462		      call printDoubleTab
    722
    723	038A  5A		     pop dx
    724	038B  51		     push cx
    725	038C  B9 0002		     mov cx, 2
    726	038F  B4 40		     mov ah, 40h
    727	0391  8B 1E 0161r	     mov bx, destFHandle
    728	0395  CD 21		     int 21h
    729	0397  59		     pop cx
    730	0398  E8 04FB		     call printOperandSeparator
    731	039B  51		     push cx
    732	039C  B9 0002		     mov cx, 2
    733	039F  B4 40		     mov ah, 40h
    734	03A1  8B 1E 0161r	     mov bx, destFHandle
    735	03A5  BA 00F7r		     mov dx, offset mod11w1reg + 6
    736	03A8  CD 21		     int 21h
    737	03AA  59		     pop cx
    738
    739	03AB  E8 0462		      call printNewline
    740	03AE  E9 FDA2		      jmp inc_lineCount
    741	03B1  C3		      ret
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 14
dis.asm



    742	03B2			     com_in ENDP
    743				     ;---------
    744
    745				     ;----------------------XCHG
    746	03B2			     com_xchg PROC
    747	03B2  50		     push ax
    748	03B3  E8 FECA		     call printHexByte
    749	03B6  E8 0433		     call printDoubleTab
    750	03B9  58		     pop ax
    751	03BA  8A D8		     mov bl, al
    752	03BC  80 E3 07		     and bl, 00000111b
    753	03BF  80 FB 00		     cmp bl, 00000000b ; ax is ax
    754	03C2  75 06		     jne xchgnotax
    755	03C4  BA 00F1r		     mov dx, offset mod11w1reg + 0
    756	03C7  EB 49 90		     jmp xchgprint
    757	03CA			     xchgnotax:
    758	03CA  80 FB 01		     cmp bl, 00000001b ; cx is ax
    759	03CD  75 06		     jne xchgnotcx
    760	03CF  BA 00F4r		     mov dx, offset mod11w1reg + 3
    761	03D2  EB 3E 90		     jmp xchgprint
    762
    763	03D5			     xchgnotcx:
    764	03D5  80 FB 02		     cmp bl, 00000010b ; dx is ax
    765	03D8  75 06		     jne xchgnotdx
    766	03DA  BA 00F7r		     mov dx, offset mod11w1reg + 6
    767	03DD  EB 33 90		     jmp xchgprint
    768
    769	03E0			     xchgnotdx:	; bx is	ax
    770	03E0  80 FB 03		     cmp bl, 00000011b ; dx is ax
    771	03E3  75 06		     jne xchgnotbx
    772	03E5  BA 00FAr		     mov dx, offset mod11w1reg + 9
    773	03E8  EB 28 90		     jmp xchgprint
    774
    775	03EB			     xchgnotbx:
    776	03EB  80 FB 03		     cmp bl, 00000011b ; sp is ax
    777	03EE  75 06		     jne xchgnotsp
    778	03F0  BA 00FDr		     mov dx, offset mod11w1reg + 12
    779	03F3  EB 1D 90		     jmp xchgprint
    780
    781	03F6			     xchgnotsp:
    782	03F6  80 FB 04		     cmp bl, 00000100b
    783	03F9  75 06		     jne xchgnotbp
    784	03FB  BA 0100r		     mov dx, offset mod11w1reg + 15
    785	03FE  EB 12 90		     jmp xchgprint
    786
    787	0401			     xchgnotbp:
    788	0401  80 FB 05		     cmp bl, 00000101b
    789	0404  75 06		     jne xchgnotsi
    790	0406  BA 0103r		     mov dx, offset mod11w1reg + 18
    791	0409  EB 07 90		     jmp xchgprint
    792
    793	040C			     xchgnotsi:
    794	040C  BA 0106r		     mov dx, offset mod11w1reg + 21
    795	040F  EB 01 90		     jmp xchgprint
    796
    797
    798	0412			     xchgprint:
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 15
dis.asm



    799	0412  52		     push dx
    800
    801	0413  51		     push cx
    802	0414  B9 0004		     mov cx, 4
    803	0417  B4 40		     mov ah, 40h
    804	0419  8B 1E 0161r	     mov bx, destFHandle
    805	041D  BA 00CFr		     mov dx, offset com_names +	25
    806	0420  CD 21		     int 21h
    807	0422  59		     pop cx
    808
    809
    810	0423  E8 03C6		     call printDoubleTab
    811
    812
    813	0426  BA 00F1r		     mov dx, offset mod11w1reg + 0
    814	0429  51		     push cx
    815	042A  B9 0002		     mov cx, 2
    816	042D  B4 40		     mov ah, 40h
    817	042F  8B 1E 0161r	     mov bx, destFHandle
    818
    819	0433  CD 21		     int 21h
    820	0435  59		     pop cx
    821
    822
    823	0436  E8 045D		     call printOperandSeparator
    824
    825	0439  5A		     pop dx
    826	043A  51		     push cx
    827	043B  B9 0002		     mov cx, 2
    828	043E  B4 40		     mov ah, 40h
    829	0440  8B 1E 0161r	     mov bx, destFHandle
    830				     ;mov dx, offset mod11w1reg	+ 0
    831				     ;mov dx, offset com_names
    832	0444  CD 21		     int 21h
    833	0446  59		     pop cx
    834	0447  E8 03C6		     call printNewline
    835	044A  E9 FD06		     jmp inc_lineCount
    836
    837	044D  C3		     ret
    838	044E			     com_xchg ENDP
    839
    840				     ; ------------------------------ TEST!
    841
    842	044E			     com_test1 proc
    843	044E  E8 FE2F		     call printHexByte
    844
    845	0451  8A D8		     mov bl, al
    846	0453  80 E3 01		     and bl, 00000001b
    847	0456  80 FB 01		     cmp bl, 00000001b
    848	0459  74 08		     je	w1
    849	045B  C6 06 0232r 00	     mov [wFlag], 0
    850	0460  EB 06 90		     jmp continue1
    851	0463			     w1:
    852	0463  C6 06 0232r 01	     mov [wFlag], 1
    853	0468			     continue1:
    854
    855	0468  83 F9 01		     cmp cx, 1
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 16
dis.asm



    856	046B  75 03		     jne skipRefilldiv
    857	046D  E8 FDFC		     call readToBuff
    858	0470			     skipRefilldiv:
    859	0470  E8 063E		     call keyboard_hex
    860	0473  49		     dec cx
    861
    862	0474  E8 FE09		     call printHexByte
    863	0477  E8 FDBF		     call incLineNumber
    864
    865	047A  56		     push si
    866	047B  B7 05		     mov bh, 5
    867	047D  BE 00D4r		     mov si, offset com_names +	30
    868	0480  E8 0424		     call fillRegBuffer
    869	0483  5E		     pop si
    870
    871
    872	0484  E8 0437		     call modregrm
    873
    874
    875	0487  C6 06 022Br 00	     mov [regBufferCount], 0
    876	048C  C3		     ret
    877	048D			     com_test1	ENDP
    878
    879
    880				     ; ------------------------------ DIV
    881	048D			     com_div proc
    882	048D  E8 FDF0		     call printHexByte
    883
    884	0490  8A D8		     mov bl, al
    885	0492  80 E3 01		     and bl, 00000001b
    886	0495  80 FB 01		     cmp bl, 00000001b
    887	0498  74 08		     je	w1DIV
    888	049A  C6 06 0232r 00	     mov [wFlag], 0
    889	049F  EB 06 90		     jmp continue1DIV
    890	04A2			     w1DIV:
    891	04A2  C6 06 0232r 01	     mov [wFlag], 1
    892	04A7			     continue1DIV:
    893
    894	04A7  83 F9 01		     cmp cx, 1
    895	04AA  75 03		     jne skipRefilldiv5
    896	04AC  E8 FDBD		     call readToBuff
    897	04AF			     skipRefilldiv5:
    898	04AF  E8 05FF		     call keyboard_hex
    899	04B2  49		     dec cx
    900
    901	04B3  E8 FDCA		     call printHexByte
    902	04B6  E8 FD80		     call incLineNumber
    903
    904				     ; ziurim DIV ar IDIV
    905	04B9  8A D8		     mov bl, al
    906	04BB  80 E3 38		     and bl, 00111000b
    907	04BE  80 FB 30		     cmp bl, 00110000b
    908	04C1  75 0D		     jne itsIDIV
    909				     ;its div ->
    910	04C3  56		     push si
    911	04C4  B7 04		     mov bh, 4
    912	04C6  BE 00B6r		     mov si, offset com_names +	0
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 17
dis.asm



    913	04C9  E8 03DB		     call fillRegBuffer
    914	04CC  5E		     pop si
    915	04CD  EB 0B 90		     jmp continue2
    916	04D0			     itsIDIV:
    917				     ;idiv
    918	04D0  56		     push si
    919	04D1  B7 05		     mov bh, 5
    920	04D3  BE 00BAr		     mov si, offset com_names +	4
    921	04D6  E8 03CE		     call fillRegBuffer
    922	04D9  5E		     pop si
    923	04DA			     continue2:
    924
    925
    926				     ;;;;;;------------tikrinamMod
    927	04DA  8A D8		     mov bl, al
    928	04DC  80 E3 C0		     and bl, 11000000b
    929	04DF  80 FB C0		     cmp bl, 11000000b
    930	04E2  75 1B		     jne DIVmodnot11
    931
    932				     ;-------------------mod11
    933				     ; ziurim w0 ar w1
    934	04E4  8A 1E 0232r	     mov bl, [wFlag]
    935	04E8  80 FB 01		     cmp bl, 1
    936	04EB  75 06		     jne not1
    937	04ED  E8 010B		     call scanRM00w1
    938	04F0  EB 04 90		     jmp continue3
    939	04F3			     not1:
    940	04F3  E8 0198		     call scanRM00w0
    941	04F6			     continue3:
    942
    943	04F6  E8 02F3		     call printDoubleTab
    944	04F9  E8 0381		     call printDIstring
    945	04FC  E8 0311		     call printNewline
    946				     ;-------------------
    947	04FF			     DIVmodnot11:
    948
    949				     ;;;;;;;;;;;;;;;;;;;;;;;;;;;; mod 10
    950	04FF  8A D8		     mov bl, al
    951	0501  80 E3 C0		     and bl, 11000000b
    952	0504  80 FB 80		     cmp bl, 10000000b
    953	0507  75 12		     jne DIVmodnot10
    954
    955	0509  83 F9 01		     cmp cx, 1
    956	050C  75 03		     jne skipRefilldiv2
    957	050E  E8 FD5B		     call readToBuff
    958	0511			     skipRefilldiv2:
    959	0511  E8 059D		     call keyboard_hex
    960	0514  49		     dec cx
    961
    962	0515  E8 FD68		     call printHexByte
    963	0518  E8 FD1E		     call incLineNumber
    964
    965	051B			     DIVmodnot10:
    966
    967				     ;;;;;;;;;;;;;;;;;;;;; mod00
    968	051B  8A D8		     mov bl, al
    969	051D  80 E3 C0		     and bl, 11000000b
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 18
dis.asm



    970	0520  80 FB 00		     cmp bl, 00000000b
    971	0523  75 0D		     jne DIVmodnot00
    972
    973				     ;nuskaitome reg, cia kai w=1
    974	0525  E8 01F9		     call scanRM
    975
    976	0528  8A D8		     mov bl, al
    977	052A  80 E3 07		     and bl, 00000111b
    978	052D  80 FB 06		     cmp bl, 00000110b
    979	0530  75 00		     jne DIVrmNot110
    980
    981
    982
    983	0532			     DIVrmNot110:
    984	0532			     DIVmodnot00:
    985
    986
    987	0532  C6 06 022Br 00	     mov [regBufferCount], 0
    988	0537  C3		     ret
    989	0538			     com_div endp
    990
    991	0538			     com_les PROC
    992
    993	0538  E8 FD45		     call printHexByte
    994	053B  83 F9 01		     cmp cx, 1
    995	053E  75 03		     jne skipRefillLes
    996	0540  E8 FD29		     call readToBuff
    997	0543			     skipRefillLes:
    998	0543  E8 056B		     call keyboard_hex
    999	0546  49		     dec cx
   1000
   1001	0547  E8 FD36		     call printHexByte
   1002	054A  E8 FCEC		     call incLineNumber
   1003
   1004				     ; i rbuff idedu komandos pav.
   1005	054D  56		     push si
   1006	054E  B7 04		     mov bh, 4
   1007	0550  BE 00CBr		     mov si, offset com_names +	21
   1008	0553  E8 0351		     call fillRegBuffer
   1009	0556  5E		     pop si
   1010
   1011	0557  E8 0364		     call modregrm
   1012
   1013
   1014	055A  C6 06 022Br 00	     mov [regBufferCount], 0
   1015	055F  C3		     ret
   1016	0560			     com_les ENDP
   1017
   1018
   1019	0560			     scanREG PROC
   1020	0560  56		     push si
   1021
   1022	0561  8A D8		     mov bl, al
   1023	0563  80 E3 38		     and bl, 00111000b
   1024	0566  80 FB 38		     cmp bl, 00111000b
   1025	0569  75 08		     jne LESregnot111
   1026	056B  B7 02		     mov bh, 2 ; nusakom kiek simboliu
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 19
dis.asm



   1027	056D  BE 0106r		     mov si, offset mod11w1reg + 21 ; di bus nukreipta i bufferReg
   1028	0570  E8 0334		     call fillRegBuffer
   1029	0573			     LESregnot111:
   1030
   1031	0573  8A D8		     mov bl, al
   1032	0575  80 E3 38		     and bl, 00111000b
   1033	0578  80 FB 30		     cmp bl, 00110000b
   1034	057B  75 08		     jne LESregnot110
   1035	057D  B7 02		     mov bh, 2
   1036	057F  BE 0103r		     mov si, offset mod11w1reg + 18
   1037	0582  E8 0322		     call fillRegBuffer
   1038	0585			     LESregnot110:
   1039
   1040	0585  8A D8		     mov bl, al
   1041	0587  80 E3 38		     and bl, 00111000b
   1042	058A  80 FB 28		     cmp bl, 00101000b
   1043	058D  75 08		     jne LESregnot101
   1044	058F  B7 02		     mov bh, 2
   1045	0591  BE 0100r		     mov si, offset mod11w1reg + 15
   1046	0594  E8 0310		     call fillRegBuffer
   1047	0597			     LESregnot101:
   1048
   1049	0597  8A D8		     mov bl, al
   1050	0599  80 E3 38		     and bl, 00111000b
   1051	059C  80 FB 20		     cmp bl, 00100000b
   1052	059F  75 08		     jne LESregnot100
   1053	05A1  B7 02		     mov bh, 2
   1054	05A3  BE 00FDr		     mov si, offset mod11w1reg + 12
   1055	05A6  E8 02FE		     call fillRegBuffer
   1056	05A9			     LESregnot100:
   1057
   1058	05A9  8A D8		     mov bl, al
   1059	05AB  80 E3 38		     and bl, 00111000b
   1060	05AE  80 FB 18		     cmp bl, 00011000b
   1061	05B1  75 08		     jne LESregnot011
   1062	05B3  B7 02		     mov bh, 2
   1063	05B5  BE 00FAr		     mov si, offset mod11w1reg + 9
   1064	05B8  E8 02EC		     call fillRegBuffer
   1065	05BB			     LESregnot011:
   1066
   1067	05BB  8A D8		     mov bl, al
   1068	05BD  80 E3 38		     and bl, 00111000b
   1069	05C0  80 FB 10		     cmp bl, 00010000b
   1070	05C3  75 08		     jne LESregnot010
   1071	05C5  B7 02		     mov bh, 2
   1072	05C7  BE 00F7r		     mov si, offset mod11w1reg + 6
   1073	05CA  E8 02DA		     call fillRegBuffer
   1074	05CD			     LESregnot010:
   1075
   1076	05CD  8A D8		     mov bl, al
   1077	05CF  80 E3 38		     and bl, 00111000b
   1078	05D2  80 FB 08		     cmp bl, 00001000b
   1079	05D5  75 08		     jne LESregnot001
   1080	05D7  B7 02		     mov bh, 2
   1081	05D9  BE 00F4r		     mov si, offset mod11w1reg + 3
   1082	05DC  E8 02C8		     call fillRegBuffer
   1083	05DF			     LESregnot001:
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 20
dis.asm



   1084
   1085	05DF  8A D8		     mov bl, al
   1086	05E1  80 E3 38		     and bl, 00111000b
   1087	05E4  80 FB 00		     cmp bl, 00000000b
   1088	05E7  75 08		     jne LESregnot000
   1089	05E9  B7 02		     mov bh, 2
   1090	05EB  BE 00F1r		     mov si, offset mod11w1reg + 0
   1091	05EE  E8 02B6		     call fillRegBuffer
   1092	05F1			     LESregnot000:
   1093
   1094	05F1  B7 02		     mov bh, 2
   1095	05F3  BE 0109r		     mov si, offset mod11w1reg + 24
   1096	05F6  E8 02AE		     call fillRegBuffer
   1097
   1098	05F9  5E		     pop si
   1099	05FA  C3		     ret
   1100	05FB			     scanREG ENDP
   1101
   1102	05FB			     scanRM00w1	proc
   1103
   1104	05FB  56		     push si
   1105
   1106	05FC  8A D8		     mov bl, al
   1107	05FE  80 E3 07		     and bl, 00000111b
   1108	0601  80 FB 00		     cmp bl, 00000000b
   1109	0604  75 08		     jne w0rmNot000
   1110	0606  B7 02		     mov bh, 2
   1111	0608  BE 00F1r		     mov si, offset mod11w1reg + 0
   1112	060B  E8 0299		     call fillRegBuffer
   1113	060E			     w0rmNot000:
   1114
   1115	060E  8A D8		     mov bl, al
   1116	0610  80 E3 07		     and bl, 00000111b
   1117	0613  80 FB 01		     cmp bl, 00000001b
   1118	0616  75 08		     jne w0rmNot001
   1119	0618  B7 02		     mov bh, 2
   1120	061A  BE 00F4r		     mov si, offset mod11w1reg + 3
   1121	061D  E8 0287		     call fillRegBuffer
   1122	0620			     w0rmNot001:
   1123
   1124	0620  8A D8		     mov bl, al
   1125	0622  80 E3 07		     and bl, 00000111b
   1126	0625  80 FB 02		     cmp bl, 00000010b
   1127	0628  75 08		     jne w0rmNot010
   1128	062A  B7 02		     mov bh, 2
   1129	062C  BE 00F7r		     mov si, offset mod11w1reg + 6
   1130	062F  E8 0275		     call fillRegBuffer
   1131	0632			     w0rmNot010:
   1132
   1133	0632  8A D8		     mov bl, al
   1134	0634  80 E3 07		     and bl, 00000111b
   1135	0637  80 FB 03		     cmp bl, 00000011b
   1136	063A  75 08		     jne w0rmNot011
   1137	063C  B7 02		     mov bh, 2
   1138	063E  BE 00FAr		     mov si, offset mod11w1reg + 9
   1139	0641  E8 0263		     call fillRegBuffer
   1140	0644			     w0rmNot011:
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 21
dis.asm



   1141
   1142	0644  8A D8		     mov bl, al
   1143	0646  80 E3 07		     and bl, 00000111b
   1144	0649  80 FB 04		     cmp bl, 00000100b
   1145	064C  75 08		     jne w0rmNot100
   1146	064E  B7 02		     mov bh, 2
   1147	0650  BE 00FDr		     mov si, offset mod11w1reg + 12
   1148	0653  E8 0251		     call fillRegBuffer
   1149	0656			     w0rmNot100:
   1150
   1151	0656  8A D8		     mov bl, al
   1152	0658  80 E3 07		     and bl, 00000111b
   1153	065B  80 FB 05		     cmp bl, 00000101b
   1154	065E  75 08		     jne w0rmNot101
   1155	0660  B7 02		     mov bh, 2
   1156	0662  BE 0100r		     mov si, offset mod11w1reg + 15
   1157	0665  E8 023F		     call fillRegBuffer
   1158	0668			     w0rmNot101:
   1159
   1160	0668  8A D8		     mov bl, al
   1161	066A  80 E3 07		     and bl, 00000111b
   1162	066D  80 FB 06		     cmp bl, 00000110b
   1163	0670  75 08		     jne w0rmNot110
   1164	0672  B7 02		     mov bh, 2
   1165	0674  BE 0103r		     mov si, offset mod11w1reg + 18
   1166	0677  E8 022D		     call fillRegBuffer
   1167	067A			     w0rmNot110:
   1168
   1169	067A  8A D8		     mov bl, al
   1170	067C  80 E3 07		     and bl, 00000111b
   1171	067F  80 FB 07		     cmp bl, 00000111b
   1172	0682  75 08		     jne w0rmNot111
   1173	0684  B7 02		     mov bh, 2
   1174	0686  BE 0106r		     mov si, offset mod11w1reg + 21
   1175	0689  E8 021B		     call fillRegBuffer
   1176	068C			     w0rmNot111:
   1177
   1178	068C  5E		     pop si
   1179
   1180	068D  C3		     ret
   1181	068E			     scanRM00w1	ENDP
   1182
   1183	068E			     scanRM00w0	proc
   1184
   1185	068E  56		     push si
   1186
   1187	068F  8A D8		     mov bl, al
   1188	0691  80 E3 07		     and bl, 00000111b
   1189	0694  80 FB 00		     cmp bl, 00000000b
   1190	0697  75 08		     jne w0rmNot000w0
   1191	0699  B7 02		     mov bh, 2
   1192	069B  BE 00D9r		     mov si, offset mod11w0reg + 0
   1193	069E  E8 0206		     call fillRegBuffer
   1194	06A1			     w0rmNot000w0:
   1195
   1196	06A1  8A D8		     mov bl, al
   1197	06A3  80 E3 07		     and bl, 00000111b
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 22
dis.asm



   1198	06A6  80 FB 01		     cmp bl, 00000001b
   1199	06A9  75 08		     jne w0rmNot001w0
   1200	06AB  B7 02		     mov bh, 2
   1201	06AD  BE 00DCr		     mov si, offset mod11w0reg + 3
   1202	06B0  E8 01F4		     call fillRegBuffer
   1203	06B3			     w0rmNot001w0:
   1204
   1205	06B3  8A D8		     mov bl, al
   1206	06B5  80 E3 07		     and bl, 00000111b
   1207	06B8  80 FB 02		     cmp bl, 00000010b
   1208	06BB  75 08		     jne w0rmNot010w0
   1209	06BD  B7 02		     mov bh, 2
   1210	06BF  BE 00DFr		     mov si, offset mod11w0reg + 6
   1211	06C2  E8 01E2		     call fillRegBuffer
   1212	06C5			     w0rmNot010w0:
   1213
   1214	06C5  8A D8		     mov bl, al
   1215	06C7  80 E3 07		     and bl, 00000111b
   1216	06CA  80 FB 03		     cmp bl, 00000011b
   1217	06CD  75 08		     jne w0rmNot011w0
   1218	06CF  B7 02		     mov bh, 2
   1219	06D1  BE 00E2r		     mov si, offset mod11w0reg + 9
   1220	06D4  E8 01D0		     call fillRegBuffer
   1221	06D7			     w0rmNot011w0:
   1222
   1223	06D7  8A D8		     mov bl, al
   1224	06D9  80 E3 07		     and bl, 00000111b
   1225	06DC  80 FB 04		     cmp bl, 00000100b
   1226	06DF  75 08		     jne w0rmNot100w0
   1227	06E1  B7 02		     mov bh, 2
   1228	06E3  BE 00E5r		     mov si, offset mod11w0reg + 12
   1229	06E6  E8 01BE		     call fillRegBuffer
   1230	06E9			     w0rmNot100w0:
   1231
   1232	06E9  8A D8		     mov bl, al
   1233	06EB  80 E3 07		     and bl, 00000111b
   1234	06EE  80 FB 05		     cmp bl, 00000101b
   1235	06F1  75 08		     jne w0rmNot101w0
   1236	06F3  B7 02		     mov bh, 2
   1237	06F5  BE 00E8r		     mov si, offset mod11w0reg + 15
   1238	06F8  E8 01AC		     call fillRegBuffer
   1239	06FB			     w0rmNot101w0:
   1240
   1241	06FB  8A D8		     mov bl, al
   1242	06FD  80 E3 07		     and bl, 00000111b
   1243	0700  80 FB 06		     cmp bl, 00000110b
   1244	0703  75 08		     jne w0rmNot110w0
   1245	0705  B7 02		     mov bh, 2
   1246	0707  BE 00EBr		     mov si, offset mod11w0reg + 18
   1247	070A  E8 019A		     call fillRegBuffer
   1248	070D			     w0rmNot110w0:
   1249
   1250	070D  8A D8		     mov bl, al
   1251	070F  80 E3 07		     and bl, 00000111b
   1252	0712  80 FB 07		     cmp bl, 00000111b
   1253	0715  75 08		     jne w0rmNot111w0
   1254	0717  B7 02		     mov bh, 2
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 23
dis.asm



   1255	0719  BE 00EEr		     mov si, offset mod11w0reg + 21
   1256	071C  E8 0188		     call fillRegBuffer
   1257	071F			     w0rmNot111w0:
   1258
   1259	071F  5E		     pop si
   1260
   1261	0720  C3		     ret
   1262	0721			     scanRM00w0	ENDP
   1263
   1264				     ; cia be 110 rm, nes ten keicias logika nuo mod
   1265	0721			     scanRM PROC
   1266
   1267	0721  56		     push si
   1268	0722  8A D8		     mov bl, al
   1269	0724  80 E3 07		     and bl, 00000111b
   1270	0727  80 FB 00		     cmp bl, 00000000b
   1271	072A  75 08		     jne rmNot000
   1272	072C  B7 06		     mov bh, 6
   1273	072E  BE 010Cr		     mov si, offset EAdress + 0
   1274	0731  E8 0173		     call fillRegBuffer
   1275	0734			     rmNot000:
   1276
   1277	0734  8A D8		     mov bl, al
   1278	0736  80 E3 07		     and bl, 00000111b
   1279	0739  80 FB 01		     cmp bl, 00000001b
   1280	073C  75 08		     jne rmNot001
   1281	073E  B7 06		     mov bh, 6
   1282	0740  BE 0113r		     mov si, offset EAdress + 7
   1283	0743  E8 0161		     call fillRegBuffer
   1284	0746			     rmNot001:
   1285
   1286	0746  8A D8		     mov bl, al
   1287	0748  80 E3 07		     and bl, 00000111b
   1288	074B  80 FB 02		     cmp bl, 00000010b
   1289	074E  75 08		     jne rmNot010
   1290	0750  B7 06		     mov bh, 6
   1291	0752  BE 011Ar		     mov si, offset EAdress + 14
   1292	0755  E8 014F		     call fillRegBuffer
   1293	0758			     rmNot010:
   1294
   1295	0758  8A D8		     mov bl, al
   1296	075A  80 E3 07		     and bl, 00000111b
   1297	075D  80 FB 03		     cmp bl, 00000011b
   1298	0760  75 08		     jne rmNot011
   1299	0762  B7 06		     mov bh, 6
   1300	0764  BE 0121r		     mov si, offset EAdress + 21
   1301	0767  E8 013D		     call fillRegBuffer
   1302	076A			     rmNot011:
   1303
   1304	076A  8A D8		     mov bl, al
   1305	076C  80 E3 07		     and bl, 00000111b
   1306	076F  80 FB 04		     cmp bl, 00000100b
   1307	0772  75 08		     jne rmNot100
   1308	0774  B7 06		     mov bh, 6
   1309	0776  BE 0128r		     mov si, offset EAdress + 28
   1310	0779  E8 012B		     call fillRegBuffer
   1311	077C			     rmNot100:
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 24
dis.asm



   1312
   1313	077C  8A D8		     mov bl, al
   1314	077E  80 E3 07		     and bl, 00000111b
   1315	0781  80 FB 05		     cmp bl, 00000101b
   1316	0784  75 08		     jne rmNot101
   1317	0786  B7 06		     mov bh, 6
   1318	0788  BE 012Fr		     mov si, offset EAdress + 35
   1319	078B  E8 0119		     call fillRegBuffer
   1320	078E			     rmNot101:
   1321
   1322	078E  8A D8		     mov bl, al
   1323	0790  80 E3 07		     and bl, 00000111b
   1324	0793  80 FB 07		     cmp bl, 00000111b
   1325	0796  75 08		     jne rmNot111
   1326	0798  B7 06		     mov bh, 6
   1327	079A  BE 013Dr		     mov si, offset EAdress + 49
   1328	079D  E8 0107		     call fillRegBuffer
   1329	07A0			     rmNot111:
   1330
   1331	07A0  5E		     pop si
   1332	07A1  C3		     ret
   1333	07A2			     scanRM ENDP
   1334
   1335
   1336	07A2			     scanRMwhenMod00 PROC
   1337
   1338	07A2  8A D8		     mov bl, al
   1339	07A4  80 E3 07		     and bl, 00000111b
   1340	07A7  80 FB 06		     cmp bl, 00000110b
   1341	07AA  75 3F		     jne rmNot110
   1342
   1343
   1344				     ; skaitom poslinkio LowByte
   1345	07AC  83 F9 01		     cmp cx, 1
   1346	07AF  75 03		     jne skipRefillLes2
   1347	07B1  E8 FAB8		     call readToBuff
   1348	07B4			     skipRefillLes2:
   1349	07B4  E8 02FA		     call keyboard_hex
   1350	07B7  A2 022Dr		     mov [dLow], al
   1351	07BA  49		     dec cx
   1352	07BB  E8 FA7B		     call incLineNumber
   1353
   1354				     ;Skaitom poslinkio	HighByte
   1355	07BE  83 F9 01		     cmp cx, 1
   1356	07C1  75 03		     jne skipRefillLes3
   1357	07C3  E8 FAA6		     call readToBuff
   1358	07C6			     skipRefillLes3:
   1359	07C6  E8 02E8		     call keyboard_hex
   1360	07C9  A2 022Er		     mov [dHigh], al
   1361	07CC  49		     dec cx
   1362	07CD  E8 FA69		     call incLineNumber
   1363
   1364	07D0  A0 022Dr		     mov al, [dLow]
   1365	07D3  E8 FAAA		     call printHexByte
   1366	07D6  A0 022Er		     mov al, [dHigh]
   1367	07D9  E8 FAA4		     call printHexByte
   1368
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 25
dis.asm



   1369
   1370
   1371	07DC  E8 000D		     call printDoubleTab
   1372	07DF  E8 009B		     call printDIstring
   1373	07E2  E8 003C		     call PrintLeftBracket
   1374	07E5  E8 006C		     call printWordInBrackets
   1375	07E8  E8 0047		     call PrintRightBracket
   1376
   1377	07EB			     rmNot110:
   1378
   1379	07EB  C3		     ret
   1380	07EC			     scanRMwhenMod00 ENDP
   1381
   1382
   1383
   1384
   1385				     ;---------
   1386
   1387				     ;formatavimo proceduros
   1388	07EC			     printDoubleTab PROC
   1389	07EC  51		      push cx
   1390	07ED  50		      push ax
   1391
   1392	07EE  B9 0002		      mov cx, 2
   1393	07F1  B4 40		      mov ah, 40h
   1394	07F3  8B 1E 0161r	      mov bx, destFHandle
   1395	07F7  BA 008Cr		      lea dx, line_doubleTab
   1396	07FA  CD 21		      int 21h
   1397
   1398	07FC  58		      pop ax
   1399	07FD  59		      pop cx
   1400	07FE  C3		      ret
   1401	07FF			     printDoubleTab ENDP
   1402
   1403	07FF			     printHNewline PROC
   1404	07FF  51		      push cx
   1405	0800  B9 0003		      mov cx, 3
   1406	0803  B4 40		      mov ah, 40h
   1407	0805  8B 1E 0161r	      mov bx, destFHandle
   1408	0809  BA 008Fr		      lea dx, line_hNewLine
   1409	080C  CD 21		      int 21h
   1410	080E  59		      pop cx
   1411	080F  C3		      ret
   1412	0810			     printHNewline ENDP
   1413
   1414	0810			     printNewline PROC
   1415	0810  51		      push cx
   1416	0811  B9 0002		      mov cx, 2
   1417	0814  B4 40		      mov ah, 40h
   1418	0816  8B 1E 0161r	      mov bx, destFHandle
   1419	081A  BA 0093r		      lea dx, line_NewLine
   1420	081D  CD 21		      int 21h
   1421	081F  59		      pop cx
   1422	0820  C3		      ret
   1423	0821			     printNewline ENDP
   1424
   1425	0821			     PrintLeftBracket PROC
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 26
dis.asm



   1426	0821  51		     push cx
   1427	0822  B9 0001		     mov cx, 1
   1428	0825  B4 40		     mov ah, 40h
   1429	0827  8B 1E 0161r	     mov bx, destFHandle
   1430	082B  BA 0144r		     lea dx, format
   1431	082E  CD 21		     int 21h
   1432	0830  59		     pop cx
   1433	0831  C3		     ret
   1434	0832			     PrintLeftBracket ENDP
   1435
   1436	0832			     PrintRightBracket PROC
   1437	0832  51		     push cx
   1438	0833  B9 0001		     mov cx, 1
   1439	0836  B4 40		     mov ah, 40h
   1440	0838  8B 1E 0161r	     mov bx, destFHandle
   1441	083C  BA 0145r		     lea dx, format +1
   1442	083F  CD 21		     int 21h
   1443	0841  59		     pop cx
   1444	0842  C3		     ret
   1445
   1446	0843			     PrintRightBracket ENDP
   1447	0843  51		     push cx
   1448	0844  B9 0001		     mov cx, 1
   1449	0847  B4 40		     mov ah, 40h
   1450	0849  8B 1E 0161r	     mov bx, destFHandle
   1451	084D  BA 0145r		     lea dx, format+1
   1452	0850  CD 21		     int 21h
   1453	0852  59		     pop cx
   1454	0853  C3		     ret
   1455
   1456	0854			     printWordInBrackets PROC
   1457
   1458	0854  A0 022Er		     mov al, [dHigh]
   1459	0857  E8 FA26		     call printHexByte
   1460
   1461	085A  A0 022Dr		     mov al, [dLow]
   1462	085D  E8 FA20		     call printHexByte
   1463
   1464	0860  C3		     ret
   1465	0861			     printWordInBrackets ENDP
   1466
   1467	0861			     printByteInBrackets PROC
   1468	0861  51		     push cx
   1469
   1470	0862  B0 00		     mov al, 0
   1471	0864  E8 FA19		     call printHexByte
   1472
   1473	0867  A0 022Dr		     mov al, [dLow]
   1474	086A  E8 FA13		     call printHexByte
   1475
   1476	086D  B9 0001		     mov cx, 1
   1477	0870  BA 0145r		     lea dx, format + 1
   1478	0873  B4 40		     mov ah, 40h
   1479	0875  8B 1E 0161r	     mov bx, destFHandle
   1480	0879  CD 21		     int 21h
   1481
   1482	087B  59		     pop cx
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 27
dis.asm



   1483
   1484	087C  C3		     ret
   1485	087D			     printByteInBrackets ENDP
   1486
   1487	087D			     printDIstring PROC
   1488	087D  51		      push cx
   1489	087E  50		      push ax
   1490
   1491	087F  A0 022Br		      mov al, [regBufferCount]
   1492
   1493	0882  B5 00		      mov ch, 0
   1494	0884  8A 0E 022Br	      mov cl, [regBufferCount]
   1495
   1496
   1497	0888  B4 40		      mov ah, 40h
   1498	088A  8B 1E 0161r	      mov bx, destFHandle
   1499	088E  BA 01C7r		      lea dx, regBuffer
   1500	0891  CD 21		      int 21h
   1501
   1502	0893  58		     pop ax
   1503	0894  59		      pop cx
   1504	0895  C3		      ret
   1505	0896			     printDIstring ENDP
   1506
   1507	0896			     printOperandSeparator PROC
   1508	0896  51		      push cx
   1509	0897  B9 0002		      mov cx, 2
   1510	089A  B4 40		      mov ah, 40h
   1511	089C  8B 1E 0161r	      mov bx, destFHandle
   1512	08A0  BA 0096r		      lea dx, line_OperandSeparator
   1513	08A3  CD 21		      int 21h
   1514	08A5  59		      pop cx
   1515	08A6  C3		      ret
   1516	08A7			     printOperandSeparator ENDP
   1517
   1518	08A7			     fillRegBuffer PROC
   1519
   1520				     ;aprasysiu	tai pradzioj scan ciklo
   1521					     ;lea di, regBuffer
   1522	08A7  51			     push cx
   1523	08A8  56			     push si
   1524
   1525	08A9  B5 00			     mov ch, 0
   1526	08AB  8A CF			     mov cl, bh
   1527
   1528	08AD				     pushToBuffer2:
   1529	08AD  53			     push bx
   1530	08AE  8A 1C			     mov bl, [si]
   1531	08B0  88 1D			     mov [di], bl
   1532	08B2  5B			     pop bx
   1533	08B3  46			     inc si
   1534	08B4  47			     inc di
   1535	08B5  FE 06 022Br		     inc [regBufferCount]
   1536	08B9  E2 F2			     loop pushToBuffer2
   1537
   1538	08BB  5E			     pop si
   1539	08BC  59			     pop cx
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 28
dis.asm



   1540
   1541	08BD  C3			     ret
   1542	08BE			     fillRegBuffer ENDP
   1543
   1544
   1545
   1546	08BE			     modregrm proc
   1547
   1548
   1549	08BE  8A D8		     mov bl, al
   1550	08C0  80 E3 C0		     and bl, 11000000b
   1551	08C3  80 FB 00		     cmp bl, 00000000b
   1552	08C6  75 09		     jne LESmodnot00
   1553
   1554				     ;nuskaitome reg, cia kai w=1
   1555	08C8  E8 FC95		     call scanREG
   1556	08CB  E8 FE53		     call scanRM
   1557
   1558	08CE  E8 FED1		     call scanRMwhenMod00
   1559
   1560	08D1			     LESmodnot00:
   1561
   1562	08D1  8A D8		     mov bl, al
   1563	08D3  80 E3 C0		     and bl, 11000000b
   1564	08D6  80 FB 80		     cmp bl, 10000000b
   1565	08D9  75 5B		     jne modNot10
   1566
   1567	08DB  E8 FC82		     call scanREG
   1568	08DE  E8 FE40		     call scanRM
   1569
   1570	08E1  8A D8		     mov bl, al
   1571	08E3  80 E3 07		     and bl, 00000111b
   1572	08E6  80 FB 06		     cmp bl, 00000110b
   1573	08E9  75 08		     jne rmNot110v2
   1574	08EB  B7 06		     mov bh, 6
   1575	08ED  BE 0136r		     mov si, offset EAdress + 42
   1576	08F0  E8 FFB4		     call fillRegBuffer
   1577	08F3			     rmNot110v2:
   1578
   1579				     ; skaitom poslinkio LowByte
   1580	08F3  83 F9 01		     cmp cx, 1
   1581	08F6  75 03		     jne skipRefillLes4
   1582	08F8  E8 F971		     call readToBuff
   1583	08FB			     skipRefillLes4:
   1584	08FB  E8 01B3		     call keyboard_hex
   1585	08FE  A2 022Dr		     mov [dLow], al
   1586	0901  49		     dec cx
   1587	0902  E8 F934		     call incLineNumber
   1588
   1589	0905  83 F9 01		     cmp cx, 1
   1590	0908  75 03		     jne skipRefillLes5
   1591	090A  E8 F95F		     call readToBuff
   1592	090D			     skipRefillLes5:
   1593	090D  E8 01A1		     call keyboard_hex
   1594	0910  A2 022Er		     mov [dHigh], al
   1595	0913  49		     dec cx
   1596	0914  E8 F922		     call incLineNumber
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 29
dis.asm
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091



   1597
<<<<<<< HEAD
   1598	0905  E8 FC82		     call scanREG
   1599	0908  E8 FE40		     call scanRM
   1600
   1601	090B  8A D8		     mov bl, al
   1602	090D  80 E3 07		     and bl, 00000111b
   1603	0910  80 FB 06		     cmp bl, 00000110b
   1604	0913  75 08		     jne rmNot110v2
   1605	0915  B7 06		     mov bh, 6
   1606	0917  BE 0136r		     mov si, offset EAdress + 42
   1607	091A  E8 FFB4		     call fillRegBuffer
   1608	091D			     rmNot110v2:
   1609
   1610				     ; skaitom poslinkio LowByte
   1611	091D  83 F9 01		     cmp cx, 1
   1612	0920  75 03		     jne skipRefillLes4
   1613	0922  E8 F947		     call readToBuff
   1614	0925			     skipRefillLes4:
   1615	0925  E8 01B3		     call keyboard_hex
   1616	0928  A2 022Dr		     mov [dLow], al
   1617	092B  49		     dec cx
   1618	092C  E8 F90A		     call incLineNumber
   1619
   1620	092F  83 F9 01		     cmp cx, 1
   1621	0932  75 03		     jne skipRefillLes5
   1622	0934  E8 F935		     call readToBuff
   1623	0937			     skipRefillLes5:
   1624	0937  E8 01A1		     call keyboard_hex
   1625	093A  A2 022Er		     mov [dHigh], al
   1626	093D  49		     dec cx
   1627	093E  E8 F8F8		     call incLineNumber
   1628
   1629	0941  E8 F93C		     call printHexByte
   1630	0944  A0 022Dr		     mov al, [dLow]
   1631	0947  E8 F936		     call printHexByte
   1632
   1633	094A  E8 FEC9		     call printDoubleTab
   1634
   1635	094D  56		     push si
   1636	094E  B7 01		     mov bh, 1
   1637	0950  BE 0146r		     mov si, offset format + 2
   1638	0953  E8 FF7B		     call fillRegBuffer
   1639	0956  5E		     pop si
   1640
   1641	0957  E8 FF4D		     call printDIstring
   1642	095A  E8 FF21		     call printWordInBrackets
   1643	095D  E8 FEFC		     call PrintRightBracket
   1644	0960			     modNot10:
   1645
   1646	0960  8A D8		     mov bl, al
   1647	0962  80 E3 C0		     and bl, 11000000b
   1648	0965  80 FB 40		     cmp bl, 01000000b
   1649	0968  75 50		     jne modNot01
   1650
   1651				     ;;----------------------------- 1byte
   1652	096A  E8 FC1D		     call scanREG
   1653	096D  E8 FDDB		     call scanRM
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 30
dis.ASM



   1654
   1655	0970  8A D8		     mov bl, al
   1656	0972  80 E3 07		     and bl, 00000111b
   1657	0975  80 FB 06		     cmp bl, 00000110b
   1658	0978  75 08		     jne rmNot110v3
   1659	097A  B7 06		     mov bh, 6
   1660	097C  BE 0136r		     mov si, offset EAdress + 42
   1661	097F  E8 FF4F		     call fillRegBuffer
   1662	0982			     rmNot110v3:
   1663
   1664				     ; skaitom poslinkio LowByte
   1665	0982  83 F9 01		     cmp cx, 1
   1666	0985  75 03		     jne skipRefillLes6
   1667	0987  E8 F8E2		     call readToBuff
   1668	098A			     skipRefillLes6:
   1669	098A  E8 014E		     call keyboard_hex
   1670	098D  A2 022Dr		     mov [dLow], al
   1671	0990  49		     dec cx
   1672	0991  E8 F8A5		     call incLineNumber
   1673
   1674	0994  C6 06 022Er 00	     mov [dHigh], 0
   1675	0999  B0 00		     mov al, 0
   1676
   1677	099B  E8 F8E2		     call printHexByte
   1678	099E  A0 022Dr		     mov al, [dLow]
   1679	09A1  E8 F8DC		     call printHexByte
   1680
   1681	09A4  E8 FE6F		     call printDoubleTab
   1682
   1683	09A7  56		     push si
   1684	09A8  B7 01		     mov bh, 1
   1685	09AA  BE 0146r		     mov si, offset format + 2
   1686	09AD  E8 FF21		     call fillRegBuffer
   1687	09B0  5E		     pop si
   1688
   1689	09B1  E8 FEF3		     call printDIstring
   1690	09B4  E8 FEC7		     call printWordInBrackets
   1691	09B7  E8 FEA2		     call PrintRightBracket
   1692	09BA			     modNot01:
   1693
   1694	09BA  8A D8		     mov bl, al
   1695	09BC  80 E3 C0		     and bl, 11000000b
   1696	09BF  80 FB C0		     cmp bl, 11000000b
   1697	09C2  75 1B		     jne modNot11
   1698
   1699	09C4  E8 FBC3		     call scanREG
   1700
   1701				     ;-------------------mod11
   1702				     ; ziurim w0 ar w1
   1703	09C7  8A 1E 0232r	     mov bl, [wFlag]
   1704	09CB  80 FB 01		     cmp bl, 1
   1705	09CE  75 06		     jne LESnot1
   1706	09D0  E8 FC52		     call scanRM00w1
   1707	09D3  EB 04 90		     jmp LEScontinue3
   1708	09D6			     LESnot1:
   1709	09D6  E8 FCDF		     call scanRM00w0
   1710	09D9			     LEScontinue3:
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 31
dis.ASM



   1711
   1712	09D9  E8 FE3A		     call printDoubleTab
   1713	09DC  E8 FEC8		     call printDIstring
   1714
   1715	09DF			     modNot11:
   1716
   1717	09DF  E8 FE58		     call printNewline
   1718
   1719	09E2  C3		     ret
   1720	09E3			     modregrm ENDP
   1721
   1722	09E3			     com_xchg2 PROC
   1723	09E3  E8 F89A		     call printHexByte
   1724
   1725	09E6  8A D8		     mov bl, al
   1726	09E8  80 E3 01		     and bl, 00000001b
   1727	09EB  80 FB 01		     cmp bl, 00000001b
   1728	09EE  74 08		     je	w11
   1729	09F0  C6 06 0232r 00	     mov [wFlag], 0
   1730	09F5  EB 06 90		     jmp continue11
   1731	09F8			     w11:
   1732	09F8  C6 06 0232r 01	     mov [wFlag], 1
   1733	09FD			     continue11:
   1734
   1735	09FD  83 F9 01		     cmp cx, 1
   1736	0A00  75 03		     jne skipRefilldiv1
   1737	0A02  E8 F867		     call readToBuff
   1738	0A05			     skipRefilldiv1:
   1739	0A05  E8 00D3		     call keyboard_hex
   1740	0A08  49		     dec cx
   1741
   1742	0A09  E8 F874		     call printHexByte
   1743	0A0C  E8 F82A		     call incLineNumber
   1744
   1745	0A0F  56		     push si
   1746	0A10  B7 05		     mov bh, 5
   1747	0A12  BE 00CFr		     mov si, offset com_names +	25
   1748	0A15  E8 FEB9		     call fillRegBuffer
   1749	0A18  5E		     pop si
   1750
   1751
   1752	0A19  E8 FECC		     call modregrm
   1753
   1754
   1755	0A1C  C6 06 022Br 00	     mov [regBufferCount], 0
   1756
   1757
   1758	0A21  C3		     ret
   1759	0A22			     com_xchg2	ENDP
   1760
   1761				     ; ------------------------------ test2
   1762	0A22			     com_test2 proc
   1763	0A22  3C A8		     cmp al, 10101000b
   1764	0A24  74 03		     je	test2w0
   1765	0A26  EB 4B 90		     jmp test2w1
   1766	0A29			     test2w0:
   1767
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 32
dis.ASM



   1768	0A29  E8 F854		     call printHexByte
   1769	0A2C  83 F9 01		     cmp cx, 1
   1770	0A2F  75 03		     jne skipRefilltest2w0
   1771	0A31  E8 F838		     call readToBuff
   1772	0A34			     skipRefilltest2w0:
   1773	0A34  E8 00A4		     call keyboard_hex
   1774	0A37  50		     push ax
   1775	0A38  49		     dec cx
   1776	0A39  E8 F844		     call printHexByte
   1777	0A3C  E8 F7FA		     call incLineNumber
   1778	0A3F  E8 FDD4		     call printDoubleTab
   1779	0A42  51		     push cx
   1780	0A43  B9 0004		     mov cx, 4
   1781	0A46  B4 40		     mov ah, 40h
   1782	0A48  8B 1E 0161r	     mov bx, destFHandle
   1783	0A4C  BA 00D4r		     mov dx, offset com_names +	30
   1784	0A4F  CD 21		     int 21h
   1785	0A51  59		     pop cx
   1786
   1787	0A52  E8 FDC1		     call printDoubleTab
   1788
   1789	0A55  51		     push cx
   1790	0A56  B9 0002		     mov cx, 2
   1791	0A59  B4 40		     mov ah, 40h
   1792	0A5B  8B 1E 0161r	     mov bx, destFHandle
   1793	0A5F  BA 00D9r		     mov dx, offset mod11w0reg
   1794	0A62  CD 21		     int 21h
   1795	0A64  59		     pop cx
   1796	0A65  E8 FE58		     call printOperandSeparator
   1797	0A68  58		     pop ax
   1798	0A69  E8 F814		     call printHexByte
   1799	0A6C  E8 FDBA		     call printHNewline
   1800	0A6F  E9 F6E1		     jmp inc_lineCount
   1801	0A72  C3		     ret
   1802
   1803	0A73			     test2w1:
   1804	0A73  E8 F80A		     call printHexByte
   1805	0A76  83 F9 01		     cmp cx, 1
   1806	0A79  75 03		     jne skipRefilltest2w1
   1807	0A7B  E8 F7EE		     call readToBuff
   1808	0A7E			     skipRefilltest2w1:
   1809	0A7E  E8 005A		     call keyboard_hex
   1810	0A81  50		     push ax
   1811	0A82  49		     dec cx
   1812	0A83  E8 F7FA		     call printHexByte
   1813	0A86  E8 F7B0		     call incLineNumber
   1814	0A89  83 F9 01		     cmp cx, 1
   1815	0A8C  75 03		     jne skipRefilltest2w12
   1816	0A8E  E8 F7DB		     call readToBuff
   1817	0A91			     skipRefilltest2w12:
   1818	0A91  58		     pop ax
   1819	0A92  8B D8		     mov bx, ax
   1820	0A94  E8 0044		     call keyboard_hex
   1821	0A97  53		     push bx
   1822	0A98  50		     push ax
   1823	0A99  E8 F7E4		     call printHexByte
   1824	0A9C  E8 F79A		     call incLineNumber
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 33
dis.ASM



   1825	0A9F  E8 FD74		     call printDoubleTab
   1826	0AA2  51		     push cx
   1827	0AA3  B9 0004		     mov cx, 4
   1828	0AA6  B4 40		     mov ah, 40h
   1829	0AA8  8B 1E 0161r	     mov bx, destFHandle
   1830	0AAC  BA 00D4r		     mov dx, offset com_names +	30
   1831	0AAF  CD 21		     int 21h
   1832	0AB1  59		     pop cx
   1833	0AB2  E8 FD61		     call printDoubleTab
   1834
   1835	0AB5  51		     push cx
   1836	0AB6  B9 0002		     mov cx, 2
   1837	0AB9  B4 40		     mov ah, 40h
   1838	0ABB  8B 1E 0161r	     mov bx, destFHandle
   1839	0ABF  BA 00F1r		     mov dx, offset mod11w1reg
   1840	0AC2  CD 21		     int 21h
   1841	0AC4  59		     pop cx
   1842	0AC5  E8 FDF8		     call printOperandSeparator
   1843
   1844	0AC8  58		     pop ax
   1845	0AC9  5B		     pop bx
   1846				     ;xchg ax, bx
   1847	0ACA  53		     push bx
   1848	0ACB  E8 F7B2		     call printHexByte
   1849	0ACE  5B		     pop bx
   1850	0ACF  8B C3		     mov ax, bx
   1851	0AD1  E8 F7AC		     call printHexByte
   1852	0AD4  E8 FD52		     call printHNewline
   1853	0AD7  E9 F679		     jmp inc_lineCount
   1854	0ADA  C3		     ret
   1855
   1856	0ADB			     com_test2 ENDP
   1857
   1858				     ;--------------
   1859	0ADB			     keyboard_hex PROC
   1860	0ADB  80 3E 022Cr 01	     cmp keyFlag, 1
   1861	0AE0  74 02		     je	makeHex
   1862	0AE2  AC		     lodsb
   1863	0AE3  C3		     ret
   1864	0AE4			     makeHex:
   1865	0AE4  AC		     lodsb
   1866	0AE5  8B D8		     mov bx, ax
   1867	0AE7  AC		     lodsb
   1868				     ;0-9
   1869				     ;A-F
   1870	0AE8			     key_al:
   1871	0AE8  3C 30		     cmp al, '0'
   1872	0AEA  7C 40		     jl	key_error_al
   1873	0AEC  3C 46		     cmp al, 'F'
   1874	0AEE  7F 3C		     jg	key_error_al
   1875	0AF0  3C 39		     cmp al, '9'
   1876	0AF2  7F 05		     jg	key_letter_al
   1877	0AF4  2C 30		     sub al, '0'
   1878	0AF6  EB 09 90		     jmp key_bl
   1879	0AF9			     key_letter_al:
   1880	0AF9  3C 41		     cmp al, 'A'
   1881	0AFB  7C 2F		     jl	key_error_al
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 34
dis.ASM



   1882	0AFD  2C 41		     sub al, 'A'
   1883	0AFF  04 0A		     add al, 10
   1884	0B01			     key_bl:
   1885
   1886	0B01  80 FB 30		     cmp bl, '0'
   1887	0B04  7C 26		     jl	key_error_bl
   1888	0B06  80 FB 46		     cmp bl, 'F'
   1889	0B09  7F 21		     jg	key_error_bl
   1890	0B0B  80 FB 39		     cmp bl, '9'
   1891	0B0E  7F 06		     jg	key_letter_bl
   1892	0B10  80 EB 30		     sub bl, '0'
   1893	0B13  EB 0C 90		     jmp endhexkey
   1894	0B16			     key_letter_bl:
   1895	0B16  80 FB 41		     cmp bl, 'A'
   1896	0B19  7C 11		     jl	key_error_al
   1897	0B1B  80 EB 41		     sub bl, 'A'
   1898	0B1E  80 C3 0A		     add bl, 10
   1899
   1900
   1901	0B21			     endhexkey:
   1902
   1903	0B21  52		     push dx
   1904	0B22  86 C3		     xchg al, bl
   1905	0B24  B2 10		     mov dl, 16
   1906	0B26  F6 E2		     mul dl
   1907	0B28  5A		     pop dx
   1908	0B29  02 C3		     add al, bl
   1909	0B2B  C3		     ret
   1910
   1911	0B2C			     key_error_al:
   1912	0B2C			     key_error_bl:
   1913	0B2C  E9 F642		     jmp closeF
   1914
   1915
   1916	0B2F			     keyboard_hex ENDP
   1917				     ;------------------
   1918
   1919
   1920				     end START
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 35
=======
   1598	0917  E8 F966		     call printHexByte
   1599	091A  A0 022Dr		     mov al, [dLow]
   1600	091D  E8 F960		     call printHexByte
   1601
   1602	0920  E8 FEC9		     call printDoubleTab
   1603
   1604	0923  56		     push si
   1605	0924  B7 01		     mov bh, 1
   1606	0926  BE 0146r		     mov si, offset format + 2
   1607	0929  E8 FF7B		     call fillRegBuffer
   1608	092C  5E		     pop si
   1609
   1610	092D  E8 FF4D		     call printDIstring
   1611	0930  E8 FF21		     call printWordInBrackets
   1612	0933  E8 FEFC		     call PrintRightBracket
   1613	0936			     modNot10:
   1614
   1615	0936  8A D8		     mov bl, al
   1616	0938  80 E3 C0		     and bl, 11000000b
   1617	093B  80 FB 40		     cmp bl, 01000000b
   1618	093E  75 50		     jne modNot01
   1619
   1620				     ;;----------------------------- 1byte
   1621	0940  E8 FC1D		     call scanREG
   1622	0943  E8 FDDB		     call scanRM
   1623
   1624	0946  8A D8		     mov bl, al
   1625	0948  80 E3 07		     and bl, 00000111b
   1626	094B  80 FB 06		     cmp bl, 00000110b
   1627	094E  75 08		     jne rmNot110v3
   1628	0950  B7 06		     mov bh, 6
   1629	0952  BE 0136r		     mov si, offset EAdress + 42
   1630	0955  E8 FF4F		     call fillRegBuffer
   1631	0958			     rmNot110v3:
   1632
   1633				     ; skaitom poslinkio LowByte
   1634	0958  83 F9 01		     cmp cx, 1
   1635	095B  75 03		     jne skipRefillLes6
   1636	095D  E8 F90C		     call readToBuff
   1637	0960			     skipRefillLes6:
   1638	0960  E8 014E		     call keyboard_hex
   1639	0963  A2 022Dr		     mov [dLow], al
   1640	0966  49		     dec cx
   1641	0967  E8 F8CF		     call incLineNumber
   1642
   1643	096A  C6 06 022Er 00	     mov [dHigh], 0
   1644	096F  B0 00		     mov al, 0
   1645
   1646	0971  E8 F90C		     call printHexByte
   1647	0974  A0 022Dr		     mov al, [dLow]
   1648	0977  E8 F906		     call printHexByte
   1649
   1650	097A  E8 FE6F		     call printDoubleTab
   1651
   1652	097D  56		     push si
   1653	097E  B7 01		     mov bh, 1
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 30
dis.asm



   1654	0980  BE 0146r		     mov si, offset format + 2
   1655	0983  E8 FF21		     call fillRegBuffer
   1656	0986  5E		     pop si
   1657
   1658	0987  E8 FEF3		     call printDIstring
   1659	098A  E8 FEC7		     call printWordInBrackets
   1660	098D  E8 FEA2		     call PrintRightBracket
   1661	0990			     modNot01:
   1662
   1663	0990  8A D8		     mov bl, al
   1664	0992  80 E3 C0		     and bl, 11000000b
   1665	0995  80 FB C0		     cmp bl, 11000000b
   1666	0998  75 1B		     jne modNot11
   1667
   1668	099A  E8 FBC3		     call scanREG
   1669
   1670				     ;-------------------mod11
   1671				     ; ziurim w0 ar w1
   1672	099D  8A 1E 0232r	     mov bl, [wFlag]
   1673	09A1  80 FB 01		     cmp bl, 1
   1674	09A4  75 06		     jne LESnot1
   1675	09A6  E8 FC52		     call scanRM00w1
   1676	09A9  EB 04 90		     jmp LEScontinue3
   1677	09AC			     LESnot1:
   1678	09AC  E8 FCDF		     call scanRM00w0
   1679	09AF			     LEScontinue3:
   1680
   1681	09AF  E8 FE3A		     call printDoubleTab
   1682	09B2  E8 FEC8		     call printDIstring
   1683
   1684	09B5			     modNot11:
   1685
   1686	09B5  E8 FE58		     call printNewline
   1687
   1688	09B8  C3		     ret
   1689	09B9			     modregrm ENDP
   1690
   1691	09B9			     com_xchg2 PROC
   1692	09B9  E8 F8C4		     call printHexByte
   1693
   1694	09BC  8A D8		     mov bl, al
   1695	09BE  80 E3 01		     and bl, 00000001b
   1696	09C1  80 FB 01		     cmp bl, 00000001b
   1697	09C4  74 08		     je	w11
   1698	09C6  C6 06 0232r 00	     mov [wFlag], 0
   1699	09CB  EB 06 90		     jmp continue11
   1700	09CE			     w11:
   1701	09CE  C6 06 0232r 01	     mov [wFlag], 1
   1702	09D3			     continue11:
   1703
   1704	09D3  83 F9 01		     cmp cx, 1
   1705	09D6  75 03		     jne skipRefilldiv1
   1706	09D8  E8 F891		     call readToBuff
   1707	09DB			     skipRefilldiv1:
   1708	09DB  E8 00D3		     call keyboard_hex
   1709	09DE  49		     dec cx
   1710
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 31
dis.asm



   1711	09DF  E8 F89E		     call printHexByte
   1712	09E2  E8 F854		     call incLineNumber
   1713
   1714	09E5  56		     push si
   1715	09E6  B7 05		     mov bh, 5
   1716	09E8  BE 00CFr		     mov si, offset com_names +	25
   1717	09EB  E8 FEB9		     call fillRegBuffer
   1718	09EE  5E		     pop si
   1719
   1720
   1721	09EF  E8 FECC		     call modregrm
   1722
   1723
   1724	09F2  C6 06 022Br 00	     mov [regBufferCount], 0
   1725
   1726
   1727	09F7  C3		     ret
   1728	09F8			     com_xchg2	ENDP
   1729
   1730				     ; ------------------------------ test2
   1731	09F8			     com_test2 proc
   1732	09F8  3C A8		     cmp al, 10101000b
   1733	09FA  74 03		     je	test2w0
   1734	09FC  EB 4B 90		     jmp test2w1
   1735	09FF			     test2w0:
   1736
   1737	09FF  E8 F87E		     call printHexByte
   1738	0A02  83 F9 01		     cmp cx, 1
   1739	0A05  75 03		     jne skipRefilltest2w0
   1740	0A07  E8 F862		     call readToBuff
   1741	0A0A			     skipRefilltest2w0:
   1742	0A0A  E8 00A4		     call keyboard_hex
   1743	0A0D  50		     push ax
   1744	0A0E  49		     dec cx
   1745	0A0F  E8 F86E		     call printHexByte
   1746	0A12  E8 F824		     call incLineNumber
   1747	0A15  E8 FDD4		     call printDoubleTab
   1748	0A18  51		     push cx
   1749	0A19  B9 0004		     mov cx, 4
   1750	0A1C  B4 40		     mov ah, 40h
   1751	0A1E  8B 1E 0161r	     mov bx, destFHandle
   1752	0A22  BA 00D4r		     mov dx, offset com_names +	30
   1753	0A25  CD 21		     int 21h
   1754	0A27  59		     pop cx
   1755
   1756	0A28  E8 FDC1		     call printDoubleTab
   1757
   1758	0A2B  51		     push cx
   1759	0A2C  B9 0002		     mov cx, 2
   1760	0A2F  B4 40		     mov ah, 40h
   1761	0A31  8B 1E 0161r	     mov bx, destFHandle
   1762	0A35  BA 00D9r		     mov dx, offset mod11w0reg
   1763	0A38  CD 21		     int 21h
   1764	0A3A  59		     pop cx
   1765	0A3B  E8 FE58		     call printOperandSeparator
   1766	0A3E  58		     pop ax
   1767	0A3F  E8 F83E		     call printHexByte
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 32
dis.asm



   1768	0A42  E8 FDBA		     call printHNewline
   1769	0A45  E9 F70B		     jmp inc_lineCount
   1770	0A48  C3		     ret
   1771
   1772	0A49			     test2w1:
   1773	0A49  E8 F834		     call printHexByte
   1774	0A4C  83 F9 01		     cmp cx, 1
   1775	0A4F  75 03		     jne skipRefilltest2w1
   1776	0A51  E8 F818		     call readToBuff
   1777	0A54			     skipRefilltest2w1:
   1778	0A54  E8 005A		     call keyboard_hex
   1779	0A57  50		     push ax
   1780	0A58  49		     dec cx
   1781	0A59  E8 F824		     call printHexByte
   1782	0A5C  E8 F7DA		     call incLineNumber
   1783	0A5F  83 F9 01		     cmp cx, 1
   1784	0A62  75 03		     jne skipRefilltest2w12
   1785	0A64  E8 F805		     call readToBuff
   1786	0A67			     skipRefilltest2w12:
   1787	0A67  58		     pop ax
   1788	0A68  8B D8		     mov bx, ax
   1789	0A6A  E8 0044		     call keyboard_hex
   1790	0A6D  53		     push bx
   1791	0A6E  50		     push ax
   1792	0A6F  E8 F80E		     call printHexByte
   1793	0A72  E8 F7C4		     call incLineNumber
   1794	0A75  E8 FD74		     call printDoubleTab
   1795	0A78  51		     push cx
   1796	0A79  B9 0004		     mov cx, 4
   1797	0A7C  B4 40		     mov ah, 40h
   1798	0A7E  8B 1E 0161r	     mov bx, destFHandle
   1799	0A82  BA 00D4r		     mov dx, offset com_names +	30
   1800	0A85  CD 21		     int 21h
   1801	0A87  59		     pop cx
   1802	0A88  E8 FD61		     call printDoubleTab
   1803
   1804	0A8B  51		     push cx
   1805	0A8C  B9 0002		     mov cx, 2
   1806	0A8F  B4 40		     mov ah, 40h
   1807	0A91  8B 1E 0161r	     mov bx, destFHandle
   1808	0A95  BA 00F1r		     mov dx, offset mod11w1reg
   1809	0A98  CD 21		     int 21h
   1810	0A9A  59		     pop cx
   1811	0A9B  E8 FDF8		     call printOperandSeparator
   1812
   1813	0A9E  58		     pop ax
   1814	0A9F  5B		     pop bx
   1815				     ;xchg ax, bx
   1816	0AA0  53		     push bx
   1817	0AA1  E8 F7DC		     call printHexByte
   1818	0AA4  5B		     pop bx
   1819	0AA5  8B C3		     mov ax, bx
   1820	0AA7  E8 F7D6		     call printHexByte
   1821	0AAA  E8 FD52		     call printHNewline
   1822	0AAD  E9 F6A3		     jmp inc_lineCount
   1823	0AB0  C3		     ret
   1824
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 33
dis.asm



   1825	0AB1			     com_test2 ENDP
   1826
   1827				     ;--------------
   1828	0AB1			     keyboard_hex PROC
   1829	0AB1  80 3E 022Cr 01	     cmp keyFlag, 1
   1830	0AB6  74 02		     je	makeHex
   1831	0AB8  AC		     lodsb
   1832	0AB9  C3		     ret
   1833	0ABA			     makeHex:
   1834	0ABA  AC		     lodsb
   1835	0ABB  8B D8		     mov bx, ax
   1836	0ABD  AC		     lodsb
   1837				     ;0-9
   1838				     ;A-F
   1839	0ABE			     key_al:
   1840	0ABE  3C 30		     cmp al, '0'
   1841	0AC0  7C 40		     jl	key_error_al
   1842	0AC2  3C 46		     cmp al, 'F'
   1843	0AC4  7F 3C		     jg	key_error_al
   1844	0AC6  3C 39		     cmp al, '9'
   1845	0AC8  7F 05		     jg	key_letter_al
   1846	0ACA  2C 30		     sub al, '0'
   1847	0ACC  EB 09 90		     jmp key_bl
   1848	0ACF			     key_letter_al:
   1849	0ACF  3C 41		     cmp al, 'A'
   1850	0AD1  7C 2F		     jl	key_error_al
   1851	0AD3  2C 41		     sub al, 'A'
   1852	0AD5  04 0A		     add al, 10
   1853	0AD7			     key_bl:
   1854
   1855	0AD7  80 FB 30		     cmp bl, '0'
   1856	0ADA  7C 26		     jl	key_error_bl
   1857	0ADC  80 FB 46		     cmp bl, 'F'
   1858	0ADF  7F 21		     jg	key_error_bl
   1859	0AE1  80 FB 39		     cmp bl, '9'
   1860	0AE4  7F 06		     jg	key_letter_bl
   1861	0AE6  80 EB 30		     sub bl, '0'
   1862	0AE9  EB 0C 90		     jmp endhexkey
   1863	0AEC			     key_letter_bl:
   1864	0AEC  80 FB 41		     cmp bl, 'A'
   1865	0AEF  7C 11		     jl	key_error_al
   1866	0AF1  80 EB 41		     sub bl, 'A'
   1867	0AF4  80 C3 0A		     add bl, 10
   1868
   1869
   1870	0AF7			     endhexkey:
   1871
   1872	0AF7  52		     push dx
   1873	0AF8  86 C3		     xchg al, bl
   1874	0AFA  B2 10		     mov dl, 16
   1875	0AFC  F6 E2		     mul dl
   1876	0AFE  5A		     pop dx
   1877	0AFF  02 C3		     add al, bl
   1878	0B01  C3		     ret
   1879
   1880	0B02			     key_error_al:
   1881	0B02			     key_error_bl:
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 34
dis.asm



   1882	0B02  E9 F66C		     jmp closeF
   1883
   1884
   1885	0B05			     keyboard_hex ENDP
   1886				     ;------------------
   1887
   1888
   1889				     end START
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 35
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "12/21/15"
??FILENAME			  Text	 "dis	  "
<<<<<<< HEAD
??TIME				  Text	 "23:31:47"
=======
??TIME				  Text	 "21:28:04"
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 DIS
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
APIE				  Byte	 DGROUP:0000
ATRENKA				  Near	 _TEXT:00B2
BAIGEMLOOP			  Near	 _TEXT:015F
BUFFER				  Byte	 DGROUP:0163
CLOSEF				  Near	 _TEXT:0171
COM_DIV				  Near	 _TEXT:048D
COM_IN				  Near	 _TEXT:035F
COM_IN2				  Near	 _TEXT:029D
COM_INT				  Near	 _TEXT:033A
COM_INT2			  Near	 _TEXT:02E6
COM_IRET			  Near	 _TEXT:031D
<<<<<<< HEAD
COM_LES				  Near	 _TEXT:0562
COM_NAMES			  Byte	 DGROUP:00B6
COM_RECOGNIZED			  Near	 _TEXT:0153
COM_TEST1			  Near	 _TEXT:044E
COM_TEST2			  Near	 _TEXT:0A22
COM_UNK				  Near	 _TEXT:0254
COM_XCHG			  Near	 _TEXT:03B2
COM_XCHG2			  Near	 _TEXT:09E3
CONT112				  Near	 _TEXT:054F
CONT117				  Near	 _TEXT:04F1
CONTINUE1			  Near	 _TEXT:0468
CONTINUE11			  Near	 _TEXT:09FD
CONTINUE1DIV			  Near	 _TEXT:04A7
CONTINUE2			  Near	 _TEXT:04F1
CONTINUE3			  Near	 _TEXT:050D
DESTF				  Byte	 DGROUP:0155
DESTFHANDLE			  Word	 DGROUP:0161
DHIGH				  Byte	 DGROUP:022E
DIVMODNOT00			  Near	 _TEXT:055C
DIVMODNOT10			  Near	 _TEXT:0532
DIVMODNOT11			  Near	 _TEXT:0516
DIVRMNOT110			  Near	 _TEXT:055C
DLOW				  Byte	 DGROUP:022D
EADRESS				  Byte	 DGROUP:010C
ENDHEXKEY			  Near	 _TEXT:0B21
ERR_D				  Byte	 DGROUP:0012
ERR_DESTINATION			  Near	 _TEXT:0194
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 36
=======
COM_LES				  Near	 _TEXT:0538
COM_NAMES			  Byte	 DGROUP:00B6
COM_RECOGNIZED			  Near	 _TEXT:0153
COM_TEST1			  Near	 _TEXT:044E
COM_TEST2			  Near	 _TEXT:09F8
COM_UNK				  Near	 _TEXT:0254
COM_XCHG			  Near	 _TEXT:03B2
COM_XCHG2			  Near	 _TEXT:09B9
CONTINUE1			  Near	 _TEXT:0468
CONTINUE11			  Near	 _TEXT:09D3
CONTINUE1DIV			  Near	 _TEXT:04A7
CONTINUE2			  Near	 _TEXT:04DA
CONTINUE3			  Near	 _TEXT:04F6
DESTF				  Byte	 DGROUP:0155
DESTFHANDLE			  Word	 DGROUP:0161
DHIGH				  Byte	 DGROUP:022E
DIVMODNOT00			  Near	 _TEXT:0532
DIVMODNOT10			  Near	 _TEXT:051B
DIVMODNOT11			  Near	 _TEXT:04FF
DIVRMNOT110			  Near	 _TEXT:0532
DLOW				  Byte	 DGROUP:022D
EADRESS				  Byte	 DGROUP:010C
ENDHEXKEY			  Near	 _TEXT:0AF7
ERR_D				  Byte	 DGROUP:0012
ERR_DESTINATION			  Near	 _TEXT:0194
ERR_S				  Byte	 DGROUP:0041
ERR_SOURCE			  Near	 _TEXT:017E
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 36
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
Symbol Table



<<<<<<< HEAD
ERR_S				  Byte	 DGROUP:0041
ERR_SOURCE			  Near	 _TEXT:017E
FILLREGBUFFER			  Near	 _TEXT:08D1
=======
FILLREGBUFFER			  Near	 _TEXT:08A7
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
FORMAT				  Byte	 DGROUP:0144
HELP				  Near	 _TEXT:0162
HEXBUFFER			  Byte	 DGROUP:008A
HEX_MAP				  Byte	 DGROUP:0071
HEX_OUT				  Byte	 DGROUP:0081
INCLINENUMBER			  Near	 _TEXT:0239
INC_LINECOUNT			  Near	 _TEXT:0153
INTEGERTOHEXFROMMAP		  Near	 _TEXT:01CC
IN_AX				  Near	 _TEXT:036D
ITSIDIV				  Near	 _TEXT:04D0
<<<<<<< HEAD
ITSTEST				  Near	 _TEXT:04E7
KEYBOARD_HEX			  Near	 _TEXT:0ADB
KEYFLAG				  Byte	 DGROUP:022C
KEY_AL				  Near	 _TEXT:0AE8
KEY_BL				  Near	 _TEXT:0B01
KEY_ERROR_AL			  Near	 _TEXT:0B2C
KEY_ERROR_BL			  Near	 _TEXT:0B2C
KEY_LETTER_AL			  Near	 _TEXT:0AF9
KEY_LETTER_BL			  Near	 _TEXT:0B16
LESCONTINUE3			  Near	 _TEXT:09D9
LESMODNOT00			  Near	 _TEXT:08FB
LESNOT1				  Near	 _TEXT:09D6
LESREGNOT000			  Near	 _TEXT:061B
LESREGNOT001			  Near	 _TEXT:0609
LESREGNOT010			  Near	 _TEXT:05F7
LESREGNOT011			  Near	 _TEXT:05E5
LESREGNOT100			  Near	 _TEXT:05D3
LESREGNOT101			  Near	 _TEXT:05C1
LESREGNOT110			  Near	 _TEXT:05AF
LESREGNOT111			  Near	 _TEXT:059D
=======
KEYBOARD_HEX			  Near	 _TEXT:0AB1
KEYFLAG				  Byte	 DGROUP:022C
KEY_AL				  Near	 _TEXT:0ABE
KEY_BL				  Near	 _TEXT:0AD7
KEY_ERROR_AL			  Near	 _TEXT:0B02
KEY_ERROR_BL			  Near	 _TEXT:0B02
KEY_LETTER_AL			  Near	 _TEXT:0ACF
KEY_LETTER_BL			  Near	 _TEXT:0AEC
LESCONTINUE3			  Near	 _TEXT:09AF
LESMODNOT00			  Near	 _TEXT:08D1
LESNOT1				  Near	 _TEXT:09AC
LESREGNOT000			  Near	 _TEXT:05F1
LESREGNOT001			  Near	 _TEXT:05DF
LESREGNOT010			  Near	 _TEXT:05CD
LESREGNOT011			  Near	 _TEXT:05BB
LESREGNOT100			  Near	 _TEXT:05A9
LESREGNOT101			  Near	 _TEXT:0597
LESREGNOT110			  Near	 _TEXT:0585
LESREGNOT111			  Near	 _TEXT:0573
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
LINECOUNT			  Word	 DGROUP:006D
LINECOUNTH			  Word	 DGROUP:006F
LINESTRINGADD			  Byte	 DGROUP:0086
LINE_DOUBLETAB			  Byte	 DGROUP:008C
LINE_HNEWLINE			  Byte	 DGROUP:008F
LINE_IN				  Byte	 DGROUP:00B1
LINE_NEWLINE			  Byte	 DGROUP:0093
LINE_OPERANDSEPARATOR		  Byte	 DGROUP:0096
LINE_UNKN			  Byte	 DGROUP:0099
<<<<<<< HEAD
MAKEHEX				  Near	 _TEXT:0AE4
MOD11W0REG			  Byte	 DGROUP:00D9
MOD11W1REG			  Byte	 DGROUP:00F1
MODNOT01			  Near	 _TEXT:09BA
MODNOT10			  Near	 _TEXT:0960
MODNOT11			  Near	 _TEXT:09DF
MODREGRM			  Near	 _TEXT:08E8
NEREIKTVARKYTIDIDELIOHEX	  Near	 _TEXT:024F
NOT1				  Near	 _TEXT:050A
=======
MAKEHEX				  Near	 _TEXT:0ABA
MOD11W0REG			  Byte	 DGROUP:00D9
MOD11W1REG			  Byte	 DGROUP:00F1
MODNOT01			  Near	 _TEXT:0990
MODNOT10			  Near	 _TEXT:0936
MODNOT11			  Near	 _TEXT:09B5
MODREGRM			  Near	 _TEXT:08BE
NEREIKTVARKYTIDIDELIOHEX	  Near	 _TEXT:024F
NOT1				  Near	 _TEXT:04F3
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
NOT_DIV				  Near	 _TEXT:0120
NOT_ERR_SOURCE			  Near	 _TEXT:0098
NOT_IN				  Near	 _TEXT:00D8
NOT_IN2				  Near	 _TEXT:00CB
NOT_INT				  Near	 _TEXT:0106
NOT_INT2			  Near	 _TEXT:00FC
<<<<<<< HEAD
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 37
=======
NOT_IRET			  Near	 _TEXT:00F2
NOT_LES				  Near	 _TEXT:0110
NOT_TEST1			  Near	 _TEXT:0130
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 37
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
Symbol Table



<<<<<<< HEAD
NOT_IRET			  Near	 _TEXT:00F2
NOT_LES				  Near	 _TEXT:0110
NOT_TEST1			  Near	 _TEXT:0130
NOT_TEST2			  Near	 _TEXT:0140
NOT_XCHG			  Near	 _TEXT:00E8
NOT_XCHG2			  Near	 _TEXT:0150
PRINTBYTEINBRACKETS		  Near	 _TEXT:088B
PRINTDISTRING			  Near	 _TEXT:08A7
PRINTDOUBLETAB			  Near	 _TEXT:0816
PRINTHEXBYTE			  Near	 _TEXT:0280
PRINTHNEWLINE			  Near	 _TEXT:0829
PRINTLEFTBRACKET		  Near	 _TEXT:084B
PRINTLINENUMBER			  Near	 _TEXT:01F4
PRINTNEWLINE			  Near	 _TEXT:083A
PRINTOPERANDSEPARATOR		  Near	 _TEXT:08C0
PRINTRIGHTBRACKET		  Near	 _TEXT:085C
PRINTWORDINBRACKETS		  Near	 _TEXT:087E
PRINT_IN			  Near	 _TEXT:0370
PUSHTOBUFFER2			  Near	 _TEXT:08D7
=======
NOT_TEST2			  Near	 _TEXT:0140
NOT_XCHG			  Near	 _TEXT:00E8
NOT_XCHG2			  Near	 _TEXT:0150
PRINTBYTEINBRACKETS		  Near	 _TEXT:0861
PRINTDISTRING			  Near	 _TEXT:087D
PRINTDOUBLETAB			  Near	 _TEXT:07EC
PRINTHEXBYTE			  Near	 _TEXT:0280
PRINTHNEWLINE			  Near	 _TEXT:07FF
PRINTLEFTBRACKET		  Near	 _TEXT:0821
PRINTLINENUMBER			  Near	 _TEXT:01F4
PRINTNEWLINE			  Near	 _TEXT:0810
PRINTOPERANDSEPARATOR		  Near	 _TEXT:0896
PRINTRIGHTBRACKET		  Near	 _TEXT:0832
PRINTWORDINBRACKETS		  Near	 _TEXT:0854
PRINT_IN			  Near	 _TEXT:0370
PUSHTOBUFFER2			  Near	 _TEXT:08AD
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
READSOURCEFILE			  Near	 _TEXT:005C
READTOBUFF			  Near	 _TEXT:026C
READ_FILENAME			  Near	 _TEXT:01B3
READ_FILENAME_END		  Near	 _TEXT:01C1
READ_FILENAME_NEXT		  Near	 _TEXT:01C6
READ_FILENAME_START		  Near	 _TEXT:01B7
REGBUFFER			  Byte	 DGROUP:01C7
REGBUFFERCOUNT			  Byte	 DGROUP:022B
<<<<<<< HEAD
RMNOT000			  Near	 _TEXT:075E
RMNOT001			  Near	 _TEXT:0770
RMNOT010			  Near	 _TEXT:0782
RMNOT011			  Near	 _TEXT:0794
RMNOT100			  Near	 _TEXT:07A6
RMNOT101			  Near	 _TEXT:07B8
RMNOT110			  Near	 _TEXT:0815
RMNOT110V2			  Near	 _TEXT:091D
RMNOT110V3			  Near	 _TEXT:0982
RMNOT111			  Near	 _TEXT:07CA
SCANREG				  Near	 _TEXT:058A
SCANRM				  Near	 _TEXT:074B
SCANRM00W0			  Near	 _TEXT:06B8
SCANRM00W1			  Near	 _TEXT:0625
SCANRMWHENMOD00			  Near	 _TEXT:07CC
SKAITOM				  Near	 _TEXT:009B
SKIPREFILLDIV			  Near	 _TEXT:0470
SKIPREFILLDIV1			  Near	 _TEXT:0A05
SKIPREFILLDIV2			  Near	 _TEXT:0528
SKIPREFILLDIV5			  Near	 _TEXT:04AF
SKIPREFILLIN2			  Near	 _TEXT:02A8
SKIPREFILLINT2			  Near	 _TEXT:02F1
SKIPREFILLLES			  Near	 _TEXT:056D
SKIPREFILLLES2			  Near	 _TEXT:07DE
SKIPREFILLLES3			  Near	 _TEXT:07F0
SKIPREFILLLES4			  Near	 _TEXT:0925
SKIPREFILLLES5			  Near	 _TEXT:0937
SKIPREFILLLES6			  Near	 _TEXT:098A
SKIPREFILLTEST2W0		  Near	 _TEXT:0A34
SKIPREFILLTEST2W1		  Near	 _TEXT:0A7E
Turbo Assembler	 Version 3.2	    12/21/15 23:31:48	    Page 38
=======
RMNOT000			  Near	 _TEXT:0734
RMNOT001			  Near	 _TEXT:0746
RMNOT010			  Near	 _TEXT:0758
RMNOT011			  Near	 _TEXT:076A
RMNOT100			  Near	 _TEXT:077C
RMNOT101			  Near	 _TEXT:078E
RMNOT110			  Near	 _TEXT:07EB
RMNOT110V2			  Near	 _TEXT:08F3
RMNOT110V3			  Near	 _TEXT:0958
RMNOT111			  Near	 _TEXT:07A0
SCANREG				  Near	 _TEXT:0560
SCANRM				  Near	 _TEXT:0721
SCANRM00W0			  Near	 _TEXT:068E
SCANRM00W1			  Near	 _TEXT:05FB
SCANRMWHENMOD00			  Near	 _TEXT:07A2
SKAITOM				  Near	 _TEXT:009B
SKIPREFILLDIV			  Near	 _TEXT:0470
SKIPREFILLDIV1			  Near	 _TEXT:09DB
SKIPREFILLDIV2			  Near	 _TEXT:0511
SKIPREFILLDIV5			  Near	 _TEXT:04AF
SKIPREFILLIN2			  Near	 _TEXT:02A8
SKIPREFILLINT2			  Near	 _TEXT:02F1
SKIPREFILLLES			  Near	 _TEXT:0543
SKIPREFILLLES2			  Near	 _TEXT:07B4
SKIPREFILLLES3			  Near	 _TEXT:07C6
SKIPREFILLLES4			  Near	 _TEXT:08FB
SKIPREFILLLES5			  Near	 _TEXT:090D
SKIPREFILLLES6			  Near	 _TEXT:0960
SKIPREFILLTEST2W0		  Near	 _TEXT:0A0A
SKIPREFILLTEST2W1		  Near	 _TEXT:0A54
SKIPREFILLTEST2W12		  Near	 _TEXT:0A67
SKIP_SPACES			  Near	 _TEXT:01AA
SKIP_SPACES_END			  Near	 _TEXT:01B2
Turbo Assembler	 Version 3.2	    12/21/15 21:28:05	    Page 38
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
Symbol Table



<<<<<<< HEAD
SKIPREFILLTEST2W12		  Near	 _TEXT:0A91
SKIP_SPACES			  Near	 _TEXT:01AA
SKIP_SPACES_END			  Near	 _TEXT:01B2
=======
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
SKIP_SPACES_LOOP		  Near	 _TEXT:01AA
SOURCEF				  Byte	 DGROUP:0147
SOURCEFHANDLE			  Word	 DGROUP:0153
SOURCE_FROM_FILE		  Near	 _TEXT:008A
START				  Near	 _TEXT:0000
STARTCONVERTING			  Near	 _TEXT:0075
TEMP				  Byte	 DGROUP:022F
<<<<<<< HEAD
TEST2W0				  Near	 _TEXT:0A29
TEST2W1				  Near	 _TEXT:0A73
W0RMNOT000			  Near	 _TEXT:0638
W0RMNOT000W0			  Near	 _TEXT:06CB
W0RMNOT001			  Near	 _TEXT:064A
W0RMNOT001W0			  Near	 _TEXT:06DD
W0RMNOT010			  Near	 _TEXT:065C
W0RMNOT010W0			  Near	 _TEXT:06EF
W0RMNOT011			  Near	 _TEXT:066E
W0RMNOT011W0			  Near	 _TEXT:0701
W0RMNOT100			  Near	 _TEXT:0680
W0RMNOT100W0			  Near	 _TEXT:0713
W0RMNOT101			  Near	 _TEXT:0692
W0RMNOT101W0			  Near	 _TEXT:0725
W0RMNOT110			  Near	 _TEXT:06A4
W0RMNOT110W0			  Near	 _TEXT:0737
W0RMNOT111			  Near	 _TEXT:06B6
W0RMNOT111W0			  Near	 _TEXT:0749
W1				  Near	 _TEXT:0463
W11				  Near	 _TEXT:09F8
=======
TEST2W0				  Near	 _TEXT:09FF
TEST2W1				  Near	 _TEXT:0A49
W0RMNOT000			  Near	 _TEXT:060E
W0RMNOT000W0			  Near	 _TEXT:06A1
W0RMNOT001			  Near	 _TEXT:0620
W0RMNOT001W0			  Near	 _TEXT:06B3
W0RMNOT010			  Near	 _TEXT:0632
W0RMNOT010W0			  Near	 _TEXT:06C5
W0RMNOT011			  Near	 _TEXT:0644
W0RMNOT011W0			  Near	 _TEXT:06D7
W0RMNOT100			  Near	 _TEXT:0656
W0RMNOT100W0			  Near	 _TEXT:06E9
W0RMNOT101			  Near	 _TEXT:0668
W0RMNOT101W0			  Near	 _TEXT:06FB
W0RMNOT110			  Near	 _TEXT:067A
W0RMNOT110W0			  Near	 _TEXT:070D
W0RMNOT111			  Near	 _TEXT:068C
W0RMNOT111W0			  Near	 _TEXT:071F
W1				  Near	 _TEXT:0463
W11				  Near	 _TEXT:09CE
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
W1DIV				  Near	 _TEXT:04A2
WFLAG				  Byte	 DGROUP:0232
XCHGNOTAX			  Near	 _TEXT:03CA
XCHGNOTBP			  Near	 _TEXT:0401
XCHGNOTBX			  Near	 _TEXT:03EB
XCHGNOTCX			  Near	 _TEXT:03D5
XCHGNOTDX			  Near	 _TEXT:03E0
XCHGNOTSI			  Near	 _TEXT:040C
XCHGNOTSP			  Near	 _TEXT:03F6
XCHGPRINT			  Near	 _TEXT:0412
_1				  Near	 _TEXT:0014
_2				  Near	 _TEXT:001E
_3				  Near	 _TEXT:002F
_4				  Near	 _TEXT:004B
_5				  Near	 _TEXT:0056
_6				  Near	 _TEXT:00AB
_END				  Near	 _TEXT:0179

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  0233 Word	  Public  DATA
<<<<<<< HEAD
_TEXT				  16  0B2F Word	  Public  CODE
=======
_TEXT				  16  0B05 Word	  Public  CODE
>>>>>>> e1b299d58182e7f81010d8de463116cbe7e77091
