Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 1
antra2.ASM



      1				     ;;	Programa reaguoja i perduodamus	parametrus
      2				     ;;	isveda pagalba,	jei nera nurodyti reikiami parametrai
      3				     ;;	source failas skaitomas	dalimis
      4				     ;;	destination failas rasomas dalimis
      5				     ;;	jei destination	failas jau egzistuoja, jis yra isvalomas
      6				     ;;	jei source failas nenurodytas -	skaito iš stdin iki tuščios naujos eilutės
      7				     ;;	galima nurodyti	daugiau	nei vieną source failą - juos	sujungia
      8	0000			     .model small
      9	0000			     .stack 100H
     10
     11	0000			     .data
     12
     13	0000			     apie	     db	''
     14	0000			     err_s	     db	''
     15	0000			     err_d	     db	''
     16	0000  41 42 43		     testui    db 'ABC'
     17
     18	0003  3C 21 44 4F 43 54	59+  html1		     db	'<!DOCTYPE html> <html>',13,'<head>',13,'<title> </title>',13,	    +
     19	      50 45 20 68 74 6D	6C+  '</head>',13,'<body> <code>',13,10,'$'
     20	      3E 20 3C 68 74 6D	6C+
     21	      3E 0D 3C 68 65 61	64+
     22	      3E 0D 3C 74 69 74	6C+
     23	      65 3E 20 3C 2F 74	69+
     24	      74 6C 65 3E 0D 3C	2F+
     25	      68 65 61 64 3E 0D	3C+
     26	      62 6F 64 79 3E 20	3C+
     27	      63 6F 64 65 3E 0D	0A+
     28	      24
     29	004A  3C 2F 63 6F 64 65	3E+  html2     db '</code> </body>',13,'</html>',13
     30	      20 3C 2F 62 6F 64	79+
     31	      3E 0D 3C 2F 68 74	6D+
     32	      6C 3E 0D
     33
     34	0062  61 32 2E 61 73 6D	24   sourceF	     db	'a2.asm$'
     35	0069  ????		     sourceFHandle   dw	?
     36
     37	006B  61 6E 74 72 61 32	2E+  destF	     db	'antra2.html$'
     38	      68 74 6D 6C 24
     39	0077  ????		     destFHandle     dw	?
     40
     41	0079  C8*(??)		     buffer    db 200 dup (?)
     42	0141  ????		     bufferStart dw ?
     43	0143  14*(??)		     buffer2   db 20 dup (?)
     44	0157  0000		     counter   dw 0   ;skaiciuos kelintas simbolis is .data->info apie sintakse	dalies
     45	0159  0001		     matchTest dw 1   ;
     46	015B  ??		     simbolis	     db	?
     47	015C  00		     handler   db 0
     48	015D  00		     sum			     db	0
     49	015E  00		     flag1		     db	0
     50
     51
     52	015F  3C 62 72 3E 0A	     newline	      db '<br>',10
     53	0164  3C 63 6F 64 65 20	73+  commentD	      db '<code	style=color:grey>',3bh
     54	      74 79 6C 65 3D 63	6F+
     55	      6C 6F 72 3A 67 72	65+
     56	      79 3E 3B
     57	017C  3C 2F 63 6F 64 65	3E   endcodeD	db '</code>'
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 2
antra2.ASM



     58
     59	0183  61 78 20 62 78 20	0D+  red			      db 'ax bx	', 13, 13
     60	      0D
     61
     62	018B			     .code
     63
     64	0000			     START:
     65	0000  B8 0000s		     mov     ax, @data
     66	0003  8E C0		     mov     es, ax		     ; es kad galetume naudot stosb funkcija: Store AL at address   +
     67				     ES:(E)DI
     68
     69				     ;;	destination failo pavadinimas
     70	0005  BF 006Br		     lea     di, destF
     71
     72				     ;;	source failo pavadinimas
     73	0008  BF 0062r		     lea     di, sourceF
     74
     75	000B  1E		     push    ds	; duom is .data
     76	000C  56		     push    si	; duom is komandine eilute
     77
     78	000D  B8 0000s		     mov     ax, @data
     79	0010  8E D8		     mov     ds, ax
     80
     81				     ;;	rasymui
     82	0012  BA 006Br		     mov     dx, offset	destF	     ; ikelti i	dx destF - failo pavadinima
     83	0015  B4 3C		     mov     ah, 3ch		     ; isvalo/sukuria faila - komandos kodas
     84	0017  B9 0000		     mov     cx, 0		     ; normal -	no attributes
     85	001A  CD 21		     int     21h		     ; INT 21h / AH= 3Ch - create or truncate file.
     86								     ;	 Jei nebus isvalytas - tai perrasines senaji,
     87								     ;	 t.y. jei pries	tai buves failas ilgesnis - like simboliai  +
     88				     isliks.
     89
     90	001C  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
     91	001E  B0 01		     mov     al, 1		     ; rasymui
     92	0020  CD 21		     int     21h		     ; INT 21h / AH= 3Dh - open	existing file.
     93
     94	0022  A3 0077r		     mov     destFHandle, ax	     ; issaugom	handle
     95
     96
     97				     ; parasom pradzia i html ----
     98	0025  8B 1E 0077r	     mov bx, destFHandle
     99	0029  B9 0046		     mov cx, 70
    100	002C  B4 40		     mov ah, 40h
    101	002E  BA 0003r		     mov dx, offset html1
    102	0031  CD 21		     int 21h;
    103				     ; ---------------------------
    104
    105	0033  EB 01 90		     jmp     startConverting
    106
    107	0036			     startConverting:
    108	0036  BA 0062r		     mov     dx, offset	sourceF	     ; failo pavadinimas
    109	0039  B4 3D		     mov     ah, 3dh		     ; atidaro faila - komandos	kodas
    110	003B  B0 00		     mov     al, 0		     ; 0 - reading, 1-writing, 2-abu
    111	003D  CD 21		     int     21h		     ; INT 21h / AH= 3Dh - open	existing file
    112
    113	003F  A3 0069r		     mov     sourceFHandle, ax	     ; issaugojam filehandle
    114
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 3
antra2.ASM



    115	0042			     skaitom:
    116	0042  8B 1E 0069r	     mov     bx, sourceFHandle
    117	0046  BA 0079r		     mov     dx, offset	buffer	     ; address of buffer in dx
    118	0049  B9 0014		     mov     cx, 20					     ; kiek baitu nuskaitysim
    119	004C  B4 3F		     mov     ah, 3fh					     ; function	3Fh - read from	file
    120	004E  CD 21		     int     21h
    121
    122	0050  8B C8		     mov     cx, ax				     ; bytes actually read
    123	0052  3D 0000		     cmp     ax, 0									     ; jei  +
    124				     nenuskaite
    125	0055  75 0B		     jne     _6											    +
    126				     ; tai ne pabaiga
    127
    128
    129				     ;;;;; kai jau nebenuskaito	nieko
    130	0057  8B 1E 0069r	     mov     bx, sourceFHandle				     ; pabaiga skaitomo	failo
    131	005B  B4 3E		     mov     ah, 3eh								     ; uzdaryti
    132	005D  CD 21		     int     21h
    133	005F  E9 00B5		     jmp closeF
    134
    135
    136	0062			     _6:
    137	0062  BE 0079r		     mov     si, offset	buffer				     ; skaitoma	is cia
    138	0065  8B 1E 0077r	     mov     bx, destFHandle				     ; rasoma i	cia
    139
    140	0069  83 3E 0069r 00	     cmp     sourceFHandle, 0
    141	006E  75 08		     jne     _7
    142	0070  80 3C 0D		     cmp     byte ptr ds:[si], 13
    143	0073  75 03		     jne     _7
    144	0075  E9 009F		     jmp closeF
    145
    146	0078			     _7:
    147
    148	0078  89 36 0141r	     mov bufferStart, si
    149	007C			     atrenka:
    150	007C  AC		     lodsb			     ; Load byte at address DS:(E)SI into AL
    151	007D  51		     push    cx			     ; pasidedam cx;
    152
    153	007E  E8 00FD		     call    replace
    154
    155				     ;mov    ah, 40h		     ; INT 21h / AH= 40h - write to file
    156				     ;int    21h
    157
    158	0081  59		     pop     cx
    159	0082  83 3E 0159r 00	     cmp matchTest, 0
    160	0087  74 0E		     je	reset
    161
    162	0089			     continue:
    163	0089  C6 06 015Er 00	     mov flag1,	0
    164				     ;jc     help		     ; CF set on error;	AX = error code.
    165
    166
    167	008E  C6 06 015Dr 00	     mov sum, 0
    168	0093  E2 E7		     loop    atrenka
    169	0095  E2 AB		     loop    skaitom
    170
    171	0097			     reset:
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 4
antra2.ASM



    172	0097  80 3E 015Dr 01	     cmp sum, 1
    173	009C  74 04		     je	sum_ne_1
    174	009E  8B 36 0141r	     mov si, bufferStart
    175	00A2			     sum_ne_1:
    176				     ; syntax buffery praleisti	tarpus
    177	00A2  53		     push bx
    178
    179	00A3			     next_command_loop:
    180	00A3  8B 1E 0157r	     mov bx, counter
    181	00A7  80 BF 0183r 20	     cmp [red+bx], ' '
    182	00AC  74 0D		     je	next_command_end
    183	00AE  FF 06 0157r	     inc [counter]
    184	00B2  80 BF 0183r 0D	     cmp [red+bx], 13
    185	00B7  74 11		     je	loopforbuffer
    186	00B9  EB E8		     jmp next_command_loop
    187	00BB			     next_command_end:
    188	00BB  FF 06 0157r	     inc [counter]
    189
    190	00BF  8B 1E 0157r	     mov bx, counter
    191	00C3  80 BF 0183r 0D	     cmp [red+bx], 13
    192	00C8  75 3B		     jne cont
    193
    194	00CA			     loopforbuffer:
    195				     ; reikes http://stackoverflow.com/questions/9617877/assembly-jg-jnle-jl-jnge-after-cmp panaudot
    196	00CA  C7 06 0157r 0000	     mov [counter], 0
    197	00D0  AC		     lodsb
    198
    199				     ;tikrinam ar al yra raidziu intervale, jas	praleidziam
    200
    201	00D1  80 3E 015Er 01	     cmp flag1,	1
    202	00D6  74 13		     je	next_char
    203
    204	00D8  3C 41		     cmp al, 41h	       ; compare al with "A"
    205	00DA  7C 0F		     jl	next_char		; jump to next character if less
    206	00DC  3C 5A		     cmp al, 5Ah	       ; compare al with "Z"
    207	00DE  7E 08		     jle found_letter		; if al	is >= "A" && <=	"Z" -> found a letter
    208	00E0  3C 61		     cmp al, 61h	       ; compare al with "a"
    209	00E2  7C 07		     jl	next_char		; jump to next character if less (since	it's between "Z" & "a")
    210	00E4  3C 7A		     cmp al, 7Ah	       ; compare al with "z"
    211	00E6  7F 03		     jg	next_char		; above	"Z" -> not a character
    212	00E8			     found_letter:
    213	00E8  EB 11 90		     jmp loopas
    214	00EB			     next_char:
    215	00EB  C6 06 015Er 01	     mov flag1,	1
    216
    217	00F0  3C 20		     cmp al, ' '
    218	00F2  74 07		     je	loopas
    219	00F4  3C 2C		     cmp al, ','
    220	00F6  74 03		     je	loopas
    221	00F8  EB 03 90		     jmp exit
    222	00FB			     loopas:
    223	00FB  E2 CD		     loop loopforbuffer
    224
    225	00FD			     exit:
    226	00FD  4E		     dec si
    227	00FE  89 36 0141r	     mov bufferStart, si
    228
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 5
antra2.ASM



    229	0102  5B		     pop bx
    230	0103  EB 84		     jmp continue
    231
    232	0105			     cont: ; (syntax)  TODO next word from buffer
    233	0105  5B		     pop bx
    234	0106  EB 81		     jmp continue
    235
    236	0108			     help:
    237	0108  B8 0000s		     mov     ax, @data
    238	010B  8E D8		     mov     ds, ax
    239
    240	010D  BA 0000r		     mov     dx, offset	apie
    241	0110  B4 09		     mov     ah, 09h
    242	0112  CD 21		     int     21h
    243
    244	0114  EB 17 90		     jmp     _end
    245
    246	0117			     closeF:
    247				     ;;	uzdaryti dest
    248	0117  8B 1E 0077r	     mov bx, destFHandle
    249	011B  B4 40		     mov ah, 40h
    250	011D  B9 0010		     mov cx, 16
    251	0120  BA 004Ar		     mov dx, offset html2
    252	0123  CD 21		     int 21h
    253
    254
    255	0125  B4 3E		     mov     ah, 3eh		     ; uzdaryti
    256	0127  8B 1E 0077r	     mov     bx, destFHandle
    257	012B  CD 21		     int     21h
    258
    259	012D			     _end:
    260	012D  B8 4C00		     mov     ax, 4c00h
    261	0130  CD 21		     int     21h
    262
    263	0132			     err_source:
    264	0132  B8 0000s		     mov     ax, @data
    265	0135  8E D8		     mov     ds, ax
    266
    267	0137  BA 0000r		     mov     dx, offset	err_s
    268	013A  B4 09		     mov     ah, 09h
    269	013C  CD 21		     int     21h
    270
    271	013E  BA 0062r		     mov     dx, offset	sourceF
    272	0141  CD 21		     int     21h
    273
    274	0143  B8 4C01		     mov     ax, 4c01h
    275	0146  CD 21		     int     21h
    276
    277	0148			     err_destination:
    278	0148  B8 0000s		     mov     ax, @data
    279	014B  8E D8		     mov     ds, ax
    280
    281	014D  BA 0000r		     mov     dx, offset	err_d
    282	0150  B4 09		     mov     ah, 09h
    283	0152  CD 21		     int     21h
    284
    285	0154  BA 006Br		     mov     dx, offset	destF
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 6
antra2.ASM



    286	0157  CD 21		     int     21h
    287
    288	0159  B8 4C02		     mov     ax, 4c02h
    289	015C  CD 21		     int     21h
    290
    291
    292				     ;;	procedures
    293
    294	015E			     skip_spaces PROC near
    295
    296	015E			     skip_spaces_loop:
    297	015E  80 3C 20		     cmp byte ptr ds:[si], ' '
    298	0161  75 03		     jne skip_spaces_end
    299	0163  46		     inc si
    300	0164  EB F8		     jmp skip_spaces_loop
    301	0166			     skip_spaces_end:
    302	0166  C3		     ret
    303
    304	0167			     skip_spaces ENDP
    305
    306	0167			     read_filename PROC	near
    307
    308	0167  50		     push    ax
    309	0168  E8 FFF3		     call    skip_spaces
    310	016B			     read_filename_start:
    311	016B  80 3C 0D		     cmp     byte ptr ds:[si], 13    ; jei nera	parametru
    312	016E  74 05		     je	     read_filename_end	     ; tai taip, tai baigtas failo vedimas
    313	0170  80 3C 20		     cmp     byte ptr ds:[si], ' '   ; jei tarpas
    314	0173  75 05		     jne     read_filename_next	     ; tai praleisti visus tarpus, ir sokti prie kito parametro
    315	0175			     read_filename_end:
    316	0175  B0 24		     mov     al, '$'		     ; irasyti '$' gale
    317	0177  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    318	0178  58		     pop     ax
    319	0179  C3		     ret
    320	017A			     read_filename_next:
    321	017A  AC		     lodsb			     ; uzkrauna	kita simboli
    322	017B  AA		     stosb			     ; Store AL	at address ES:(E)DI, di	= di + 1
    323	017C  EB ED		     jmp read_filename_start
    324
    325	017E			     read_filename ENDP
    326	017E			     replace PROC near
    327
    328				     ;push dx
    329				     ;lea dx red
    330
    331				     ;tikrinam simboli is bufferio su sintakses	buferiu
    332	017E  53		     push bx
    333	017F  8B 1E 0157r	     mov bx, counter
    334	0183  FF 06 0157r	     inc [counter]
    335	0187  3A 87 0183r	     cmp al, [red+bx]
    336	018B  75 79		     jne setMTzero
    337	018D  FF 06 0159r	     inc [matchTest]
    338
    339				     ; dvigubas	cmp
    340	0191  3C 20		     cmp al, ' '
    341	0193  75 13		     jne compareNext
    342	0195  80 BF 0183r 20	     cmp [red+bx], ' '
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 7
antra2.ASM



    343	019A  75 0C		     jne compareNext
    344				     ;cmp al, ','
    345				     ;jne compareNext
    346
    347	019C  C6 06 015Dr 01	     mov sum, 1
    348	01A1  4E		     dec si ;(jei bugins) ->loop for buffer lodsb
    349
    350	01A2  C7 06 0159r 0000	     mov matchTest, 0
    351
    352
    353
    354	01A8			     compareNext:
    355				     ;jei rastas endline zenklas
    356	01A8  5B		     pop bx
    357	01A9  3C 0A		     cmp al, 10
    358	01AB  74 0E		     je	newl
    359
    360				     ;jei rastas comment zenklas
    361	01AD  3C 3B		     cmp al, 3bh
    362	01AF  74 3B		     je	cmt
    363
    364				     ;atspausdina simboli (al) atejusi i funkcija replace
    365	01B1			     symbol:
    366	01B1  B9 0001		     mov cx, 1
    367	01B4  A2 015Br		     mov simbolis, al
    368	01B7  BA 015Br		     lea dx, simbolis
    369	01BA  C3		     ret
    370
    371				     ;;	newline	detected
    372	01BB			     newl:
    373	01BB  80 3E 015Cr 01	     cmp handler, 1 ; jei komentaro eilutei rastas endline
    374	01C0  74 1C		     je	endcode	; dedam, </code> (komentarui)
    375	01C2  BA 015Fr		     lea dx, newline ; dedam br
    376	01C5  B9 0005		     mov cx, 5
    377	01C8  C6 06 015Cr 00	     mov handler, 0 ; baigiasi eilute tuo paciu	ir komentaras
    378	01CD  C3		     ret
    379
    380	01CE			     newl_next:	; kai ateinam su "</code>" dx'e
    381	01CE  B4 40		     mov ah, 40h ; atspausdinam	"</code>"
    382	01D0  CD 21		     int 21h
    383
    384	01D2  BA 015Fr		     lea dx,newline  ;atspausdinam <br>
    385	01D5  B9 0005		     mov cx, 5
    386	01D8  C6 06 015Cr 00	     mov handler, 0 ;isjungiam komentaro handler
    387	01DD  C3		     ret
    388
    389				     ;isvedam </code>
    390	01DE			     endcode:
    391	01DE  BA 017Cr		     lea dx, endcodeD
    392	01E1  B9 0007		     mov cx, 7
    393	01E4  80 3E 015Cr 01	     cmp handler, 1 ;jei komentaro eilutes pabaigoj newline
    394	01E9  74 E3		     je	newl_next
    395	01EB  C3		     ret
    396
    397				     ;jei rastas komentaro simbolis
    398	01EC			     cmt:
    399	01EC  80 3E 015Cr 01	     cmp handler, 1 ;jeigu is eiles keli komentaro simboliai
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 8
antra2.ASM



    400	01F1  74 BE		     je	symbol
    401	01F3  BA 0164r		     lea dx, commentD ;dedam komentaro tag'a
    402	01F6  B9 0018		     mov cx, 24
    403	01F9  C6 06 015Cr 01	     mov handler, 1 ; isimenam kad komentaras jau naudotas
    404	01FE  C3		     ret
    405
    406
    407	01FF			     testing:
    408	01FF  B9 0003		     mov cx, 3
    409	0202  BA 0000r		     lea dx, testui
    410	0205  C3		     ret
    411
    412	0206			     setMTzero:
    413	0206  C7 06 0159r 0000	     mov matchTest, 0 ;	if al != buffer
    414	020C  EB 9A		     jmp compareNext
    415
    416	020E			     replace ENDP
    417
    418				     end START
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "11/15/15"
??FILENAME			  Text	 "antra2  "
??TIME				  Text	 "15:08:50"
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 ANTRA2
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
APIE				  Byte	 DGROUP:0000
ATRENKA				  Near	 _TEXT:007C
BUFFER				  Byte	 DGROUP:0079
BUFFER2				  Byte	 DGROUP:0143
BUFFERSTART			  Word	 DGROUP:0141
CLOSEF				  Near	 _TEXT:0117
CMT				  Near	 _TEXT:01EC
COMMENTD			  Byte	 DGROUP:0164
COMPARENEXT			  Near	 _TEXT:01A8
CONT				  Near	 _TEXT:0105
CONTINUE			  Near	 _TEXT:0089
COUNTER				  Word	 DGROUP:0157
DESTF				  Byte	 DGROUP:006B
DESTFHANDLE			  Word	 DGROUP:0077
ENDCODE				  Near	 _TEXT:01DE
ENDCODED			  Byte	 DGROUP:017C
ERR_D				  Byte	 DGROUP:0000
ERR_DESTINATION			  Near	 _TEXT:0148
ERR_S				  Byte	 DGROUP:0000
ERR_SOURCE			  Near	 _TEXT:0132
EXIT				  Near	 _TEXT:00FD
FLAG1				  Byte	 DGROUP:015E
FOUND_LETTER			  Near	 _TEXT:00E8
HANDLER				  Byte	 DGROUP:015C
HELP				  Near	 _TEXT:0108
HTML1				  Byte	 DGROUP:0003
HTML2				  Byte	 DGROUP:004A
LOOPAS				  Near	 _TEXT:00FB
LOOPFORBUFFER			  Near	 _TEXT:00CA
MATCHTEST			  Word	 DGROUP:0159
NEWL				  Near	 _TEXT:01BB
NEWLINE				  Byte	 DGROUP:015F
NEWL_NEXT			  Near	 _TEXT:01CE
NEXT_CHAR			  Near	 _TEXT:00EB
NEXT_COMMAND_END		  Near	 _TEXT:00BB
NEXT_COMMAND_LOOP		  Near	 _TEXT:00A3
READ_FILENAME			  Near	 _TEXT:0167
READ_FILENAME_END		  Near	 _TEXT:0175
Turbo Assembler	 Version 3.2	    11/15/15 15:08:50	    Page 10
Symbol Table



READ_FILENAME_NEXT		  Near	 _TEXT:017A
READ_FILENAME_START		  Near	 _TEXT:016B
RED				  Byte	 DGROUP:0183
REPLACE				  Near	 _TEXT:017E
RESET				  Near	 _TEXT:0097
SETMTZERO			  Near	 _TEXT:0206
SIMBOLIS			  Byte	 DGROUP:015B
SKAITOM				  Near	 _TEXT:0042
SKIP_SPACES			  Near	 _TEXT:015E
SKIP_SPACES_END			  Near	 _TEXT:0166
SKIP_SPACES_LOOP		  Near	 _TEXT:015E
SOURCEF				  Byte	 DGROUP:0062
SOURCEFHANDLE			  Word	 DGROUP:0069
START				  Near	 _TEXT:0000
STARTCONVERTING			  Near	 _TEXT:0036
SUM				  Byte	 DGROUP:015D
SUM_NE_1			  Near	 _TEXT:00A2
SYMBOL				  Near	 _TEXT:01B1
TESTING				  Near	 _TEXT:01FF
TESTUI				  Byte	 DGROUP:0000
_6				  Near	 _TEXT:0062
_7				  Near	 _TEXT:0078
_END				  Near	 _TEXT:012D

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0100 Para	  Stack	  STACK
  _DATA				  16  018B Word	  Public  DATA
_TEXT				  16  020E Word	  Public  CODE
